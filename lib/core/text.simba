(*
Text
====

The text file holds functions and procedures that are used in Runescape text
recognition.

*)

{$include_once debug.simba}
{$include_once mouse.simba}

{$f-}

(*
findText
~~~~~~~~

.. code-block:: pascal

    function findText(var p: TPoint; txt, fonts: TStringArray; searchBox: TBox): boolean;

Uses a bitmap mask to find text on the screen.  Returns true if the text is found.
    * p: The point the text is found.
    * txt: The text to look for.
    * fonts: The font(s) of the text.
    * searchBox: The box to look for the text.

.. note::

    by Stupid3ooo, modified by LordJashin & Coh3n
    Last Updated: Feb. 20, 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      p: TPoint;
    begin
      if (findText(p, ['Lobby'], [upCharsEx], tabLogout.bounds)) then
        writeln('Found "Exit to Lobby" text');
      .
      .
      .
    end;
*)
function findText(var p: TPoint; txt, fonts: TStringArray; searchBox: TBox): boolean;
var
  s, i, j: integer;
begin
  p := point(-1, -1);

  for i := 0 to high(txt) do
    for j := 0 to high(fonts) do
    begin
      s := bitmapFromText(toStr(txt[i]), toStr(fonts[j]));

      // to prevent looking outside the client
      if (searchBox.x1 < 0) then searchBox.x1 := 0;
      if (searchBox.y1 < 0) then searchBox.y1 := 0;

      result := findBitmapMaskTolerance(s, p, searchBox, 30, 30);
      freeBitmap(s);

      if (result) then
        break(2);
    end;

  if (result) then
    printToDebug('findText('+toStr(txt)+'): True, at point '+toStr(p))
  else
    printToDebug('findText('+toStr(txt)+'): '+toStr(result));
end;

(*
findTextByColor
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findTextByColor(var p: TPoint; col, tol: integer; txt, fonts: TStringArray; lookIn: TBox; waitTime: integer = 0): boolean;

Uses TPointArrays to find text on the screen.  Searches for the color (col) with
tolerance (tol) on the screen, then looks for the text (txt) in a TPA created
from the fonts (fonts).  Looks in the box (lookIn) and returns the point found
(p). Returns true if the text is found. If the optional parameter (waitTime) is
set, will wait specified amount of time for the text to be found before returning
false.


.. note::

    by Raymond and Coh3n
    Last Updated: Feb. 20, 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      p: TPoint;
    begin
      if (findTextByColor(p, clWhite, 10, ['Lobby'], [upCharsEx], gameTabArea)) then
        writeln('Found "Exit to Lobby" text');
      .
      .
      .
    end;
*)
function findTextByColor(var p: TPoint; col, tol: integer; txt, fonts: TStringArray; lookIn: TBox; waitTime: integer = 0): boolean;
var
  b: TBox;
  i, j, w, h, t: integer;
  tpaColors, tpaText, matches: TPointArray;
begin
  t := (getSystemTime() + waitTime);
  p := point(-1, -1);

  if (not findColorsTolerance(tpaColors, col, lookIn, tol)) then
  begin
    printToDebug('findTextByColor: failed to find text color');
    exit(false);
  end;

  repeat
    // loop through the fonts and texts to look for
    for i := 0 to high(txt) do
      for j := 0 to high(fonts) do
      begin
        tpaText := TPAFromText(txt[i], fonts[i], w, h);

        if (tpaColors.findTextIn(h - 1, tpaText, matches)) then
        begin
          // sort the tpa matches and return the top left of the text
          b := tpaText.getBounds();
          matches.sortFromPoint(point(b.x1, b.y1));
          p.x := matches[0].x;
          p.y := matches[0].y;

          result := true;
          break(3);
        end;
      end;

  until(getSystemTime() > t);

  if (result) then
    printToDebug('findTextByColor('+toStr(txt)+'): True, at point '+toStr(p))
  else
    printToDebug('findTextByColor('+toStr(txt)+'): '+toStr(result));
end;

(*
mouseText
~~~~~~~~~

.. code-block:: pascal

    function mouseText(txt, fonts: TStringArray; searchBox: TBox; mouseAction: integer): boolean;

Returns true if the mouse action is performed on the text.
    * txt: The text to look for.
    * fonts: The font(s) of the text.
    * searchBox: The box to look for the text.
    * mouseAction: The action of the mouse.

.. note::

    by Coh3n
    Last Updated: Mar. 1, 2013 by Coh3n

Example:

.. code-block:: pascal

    mouseText(['Lobby'], [upCharsEx], tabLogout.bounds, MOUSE_LEFT);
*)
function mouseText(txt, fonts: TStringArray; searchBox: TBox; mouseAction: integer): boolean;
var
  p: TPoint;
begin
  if (findText(p, txt, fonts, searchBox)) then
  begin
    mouse(p.rand(3, 10), mouseAction);
    exit(true);
  end;
end;

(*
typeByte
~~~~~~~~

.. code-block:: pascal

    procedure typeByte(k: byte);

Types one character k.

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

    typeByte(VK_ENTER);

*)
procedure typeByte(k: byte);
begin
  {$IFDEF SMART}
  if (k = 13) then
    k := 10;
  {$ENDIF}

  KeyDown(k);
  Wait(10 + Random(50));
  KeyUp(k);
end;

(*
typeSend
~~~~~~~~

.. code-block:: pascal

    procedure typeSend(text: string; pressEnter: boolean = true);

Types text in a human-like way.  Optional parameter 'pressEnter'.  Will press
enter by default.

.. note::

    by SKy Scripter
    Last Updated: January 29th, 2013 by Coh3n

Example:

.. code-block:: pascal

    // to type and press enter
    typeSend('Hello');

    // to type and not press enter
    typeSend('Hello', false);

*)
procedure typeSend(text: string; pressEnter: boolean = true);
var
  i: Integer;
begin
  for i := 1 to Length(Text) do
  begin
    SendKeys(Text[i], 30 + Random(30), 30 + Random(30));
    Wait(40 + Random(40));
  end;

  if (pressEnter) then
    TypeByte(VK_ENTER);
end;

{*
type __TOptions
~~~~~~~~~~~~~~~

Used to store an RS right click menu.
*}
type
  __TOptions = record
    str: string;
    bounds, bigBox: TBox;
  end;

{*
__debugOptions
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __debugOptions(options: array of __TOptions);

Prints the options' .str attribute to the printToDebug box.

.. note::

    by Coh3n
    Last Updated: Feb. 27, 2013 by Coh3n

Example:

.. code-block:: pascal

    __debugOptions(options);
*}
procedure __debugOptions(options: array of __TOptions);
var
  i: integer;
begin
  printToDebug('Options found: ');

  for i := 0 to high(options) do
    printToDebug(options[i].str);
end;

{*
__getChooseOptions
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __getChooseOptions(excludeBox: TBox; tabbed: boolean = false): array of __TOptions;

Gets the text from the options menu. Searches for the menu in the entire client.
    * excludeBox: The box to exclude of colors are found. Only used when searching a tabbed menu.
    * tabbed: Optional. Default false. Set to true if looking for tabbed options.

.. note::

    by Wizzup?, Narcle, Coh3n & Flight
    Last Updated: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    tabbedOptions := __getChooseOptions(MS_BOX, true);
*}
function __getChooseOptions(excludeBox: TBox; tabbed: boolean = false): array of __TOptions;
var
  b, bb, bigBox: TBox;
  TPA, TPA1, TPA2, tpaText, tpaNotText, tpaShadow, tpaFilter: TPointArray;
  ATPA, tmpATPA: T2DPointArray;
  i, l, bW, bH, bmp, oldTarget, oldCTS: integer;
  menuColors: TIntegerArray;
begin
  oldTarget := getImageTarget();

  // the entire RS client
  getClientDimensions(b.x2, b.y2);
  b := intToBox(0, 0, b.x2 - 1, b.y2 - 1);

  oldCTS := getToleranceSpeed();
  setColorToleranceSpeed(1);

  menuColors := [131843 {black}, 3682593 {top blue}, 3552822 {grey}];
  setLength(ATPA, length(menuColors));

  // find how many of each menu color is found; store in ATPA
  for i := 0 to high(menuColors) do
    findColors(ATPA[i], menuColors[i], b);

  TPA := ATPA.merge();

  if (tabbed) then
  begin
    tpaFilter := TPA.clearTPAFrom(TPAFromBox(excludeBox));
    ATPA := tpaFilter.split(4);
  end else
    ATPA := TPA.split(4);

  // gets the right box of colors on the MS by checking the size of each color's area
  for i := 0 to high(ATPA) do
  begin
    b := ATPA[i].getBounds();

    if ((b.x2 - b.x1) > 90) and ((b.y2 - b.y1) > 18) then
      break;
  end;

  bigBox := b; // used in chooseOption to move the mouse away if the options don't exist
  setColorToleranceSpeed(3);

  // get TPAs of the text, around text, and shadow
  findColorsTolerance(tpaText, 4996381, b, 18);
  tpaNotText := tpaText.returnNotInTPA(tpaText.getBounds());
  findColorsTolerance(tpaShadow, 460291, b, 6);

  setColorToleranceSpeed(oldCTS);

  // create a bitmap of size b (the size of the menu)
  bmp := createBitmap(b.x2 - b.x1 + 2, b.y2 - b.y1 + 2);

  // "reset" not text/shadow TPAs so they can be drawn on bmp
  tpaNotText.offset(point(-b.x1, -b.y1));
  tpaShadow.offset(point(-b.x1, -b.y1));

  fastDrawClear(bmp, 0);
  drawTPABitmap(bmp, tpaNotText, clRed);
  drawTPABitmap(bmp, tpaShadow, clPurple);

  ocr_FilterUpTextByCharacteristics(getMufasaBitmap(bmp));
  getBitmapSize(bmp, bW, bH);

  setTargetBitmap(bmp); // new target for findColors
  setLength(ATPA, bH div 16);

  // look for the outlined text on the bitmap
  for i := 0 to high(ATPA) do
    findColors(ATPA[i], clRed, 0, (2 + i * 16), bW - 1, (18 + i * 16)); // +2 to y to line it up

  l := high(ATPA);
  sortATPAFromFirstPointY(ATPA, point(bW div 2, 0));

  setLength(result, length(ATPA));
  result[0].bigBox := bigBox;

  for i := 0 to high(ATPA) do
  begin
    tmpATPA := ATPA[i].split(1, 10); // split one into characters
    sortATPAFromFirstPointX(tmpATPA, point(0, 0));

    result[i].str := tmpATPA.getTextInATPA(5, 'UpCharsEx');
    //writeln(result[i].str);

    bb := ATPA[i].getBounds();
    result[i].bounds := intToBox((bb.x1 + b.x1), (bb.y1 + b.y1), (bb.x2 + b.x1), (bb.y2 + b.Y1));
  end;

  setColorToleranceSpeed(oldCTS);
  setImageTarget(oldTarget);
  freeBitmap(bmp);
  __debugOptions(result);
end;

(*
chooseOption
~~~~~~~~~~~~

.. code-block:: pascal

    function chooseOption(txt, txtTab: TStringArray; mouseAction: integer; close: boolean = true; waitTime: integer = 100): boolean;

Works for RS tabbed menus.
    * txtTab: The final option you want to choose. The function looks for this option first.
    * txt: The text that the mouse hovers to activate the tabbed menu.
    * mouseAction: What you want the mouse to do.  Mouse constants are in mouse.simba.
    * close: Optional; default true. Will move the mouse away from the menu if the option isn't found.
    * waitTime: Optional; default 100ms. The time you want the function to wait for the options to be found.

.. note::

    by Wizzup?, Nava2 & N1ke!
    Last Modified: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    if (chooseOption(['Bank'], ['Use'], MOUSE_LEFT)) then
      writeln('Using bank');
*)
function chooseOption(txt, txtTab: TStringArray; mouseAction: integer; close: boolean = true; waitTime: integer = 100): boolean;
var
  b: TBox;
  p: TPoint;
  textFound: boolean;
  i, j, t: integer;
  options: array of __TOptions;
begin
  result := false;
  wait(waitTime + random(50)); // an initial wait after mouse is clicked
  t := (getSystemTime() + waitTime);

  repeat
    options := __getChooseOptions(b);

    if (length(txtTab) > 0) then
    begin
      if (chooseOption(txtTab, TStringArray([]), MOUSE_LEFT, false, 0)) then // choose the final option if it exists
        exit(true)
      else
        if (not chooseOption(txt, TStringArray([]), MOUSE_MOVE, false, 0)) then // move the mouse to the first option
        begin
          printToDebug('chooseOption (tabbed): txt not found');
          exit(false);
        end;

      wait(100 + random(100));
      options := __getChooseOptions(options[0].bigBox, true);
    end;

    if (length(options) <= 0) then
    begin
      printToDebug('chooseOption: no options available');
      exit(false);
    end;

    for i := 0 to high(options) do
    begin
      if (length(txtTab) > 0) then
        textFound := strArrInStr(txtTab, options[i].str)
      else
        textFound := strArrInStr(txt, options[i].str);

      if (textFound) then
      begin
        // carefully move the mouse to the tabbed menu
        if (length(txtTab) > 0) then
        begin
          getMousePos(p.x, p.y);
          mouse(point(randomRange(options[0].bigBox.x1, options[0].bigBox.x2), p.y), MOUSE_MOVE, MOUSE_ACCURATE);
        end;

        mouseBox(options[i].bounds, mouseAction);
        printToDebug('Found option: '+options[i].str);
        result := true;
        exit(true);
      end;
    end;

    wait(25 + random(25));
  until(getSystemTime() > t);

  // to move the mouse away from the menu box if the option isn't found
  b := options[0].bigBox;
  if (mouseAction <> MOUSE_NONE) and (close = true) then
  begin
    j := max(b.x1 - 52, 0);

    if (j = 0) then
      j := (b.x2 + 10);

    mouse(point(j, max(b.y1 - 50, 0)).rand(40, b.y2 - b.y1));
    wait(200 + random(100));
  end;
end;

(*
chooseOption; overload;
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function chooseOption(txt: TStringArray; mouseAction: integer = MOUSE_LEFT; waitTime: integer = 100): boolean; overload;

Chooses the first option in txt that's found in the RS right click menu.  Mouse
behaviour depends on mouseAction.  Will wait (waitTime) for the options to
exist.  Default waitTime is 100ms.

.. note::

    by Coh3n
    Last Modified: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    if (chooseOption(['Examine'], MOUSE_LEFT)) then
      writeln('Examining something...');
*)
function chooseOption(txt: TStringArray; mouseAction: integer = MOUSE_LEFT; waitTime: integer = 100): boolean; overload;
begin
  result := chooseOption(txt, TStringArray([]), mouseAction, waitTime);
end;

(*
optionsExist
~~~~~~~~~~~~

.. code-block:: pascal

    function optionsExist(txt: TStringArray): boolean;

Returns true if one of the strings in txt exists in the options menu.

.. note::

    by Coh3n
    Last Modified: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    if (optionsExist(['Examine'])) then
      writeln('Option exists');
*)
function optionsExist(txt: TStringArray): boolean;
begin
  result := chooseOption(txt, MOUSE_NONE, 0);
end;
