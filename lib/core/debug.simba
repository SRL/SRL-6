(*
Debug
=====

The debug file holds any files used for SRL debugging and logging. Debug usage
guidelines are as follows:
    * Use print('Message', TDebug.ERROR) for error messages.
    * Use print('Message', TDebug.WARNING) for warnings.  If a lot of warnings are expected in a
      row, use print() once, followed by print('Message' TDebug.LOG).
    * Use print('Message') for informational messages (i.e. "Checking if..." or
      "Found...").
    * Use print('Message', TDebug.LOG) for specific information the user won't want to see, but
      will be useful for scripters to debug (i.e. "Found 20 pixels of the color
      12345678 with tolerance 15").
    * Use print('Message', TDebug.HINT) for scripting hints.
    * Use print('Message', TDebug.FATAL) to terminate the script.
*)

{$include_once globals.simba}
{$include_once ../utilities/time.simba}
{$include_once ../utilities/wrappers.simba}
{$include_once ../utilities/types/types.simba}
{$include_once ../tmp.simba}

{$f-}

(*
type TDebug
~~~~~~~~~~~

A set of enums used to distinguish between the types of SRL debugging.

Example:

.. code-block:: pascal

    print('Failed to open bank', TDebug.ERROR);
*)
{$s+}
type
  TDebug = (DEBUG, LOG, HINT, WARNING, ERROR, FATAL);
{$s-}

{*
var Internal Debug
~~~~~~~~~~~~~~~~~~

Internal SRL debug variables:
    * __logFile: The handle of the SRL log file.
    * __debugLevel: Used for debug indenting. Makes it easier to read & follow.
*}
var
  __logFile = -1;
  __debugLevel = 1;

(*
var External Debug
~~~~~~~~~~~~~~~~~~

External SRL debug variables that can be set scripts:
    * logPath: string; The path the save the SRL log file. Default path is SRL-6/logs/.
    * disableSRLLog: boolean; Disables saving debug to a log file.  Default false.
    * disableSRLDebug: boolean; Disables SRL functions from printing to the debug box.  Default false.
*)
var
  logPath = includePath + 'SRL-6/logs/';
  disableSRLLog = false;
  disableSRLDebug = false;

{*
__openLogFile
~~~~~~~~~~~~~

.. code-block:: pascal

    function __openLogFile(): boolean;

Creates the SRL log file.

.. note::

    by Coh3n
    Last Modified: Feb. 20th, 2012 by Coh3n

Example:

.. code-block:: pascal

    __openLogFile();

*}
function __openLogFile(): boolean;
var
  fileName, start: string;
begin
  if (disableSRLLog) then
    exit;

  if (not directoryExists(logPath)) then
    forceDirectories(logPath);

  start := replace(theDate(DATE_DAY)+' at '+theTime(), ':', '.', [rfReplaceAll]);

  // make sure it's a valid file name (Windows)
  fileName := 'SRL log ('+start+').txt';
  fileName := replace(fileName, '/', '-', [rfReplaceAll]);
  fileName := replace(fileName, ':', '-', [rfReplaceAll]);
  fileName := logPath + fileName;

  try
    if (fileExists(fileName)) then
      __logFile := openFile(fileName, true)
    else
      __logFile := createFile(fileName);
  except
    writeln('Could not open/create log file');
  end;
end;

{*
__printToLog
~~~~~~~~~~~~

.. code-block:: pascal

    procedure printToLog(s : string);

Writes the string 's' to the SRL log file.

.. note::

    by Markus
    Last Modified: Feb. 20th, 2012 by Coh3n

Example:

.. code-block:: pascal

    printToLog('Adding to SRL log file!');

*}
procedure __printToLog(s: string);
begin
  if (disableSRLLog) then
    exit;

  if (__logFile >= 0) then
    try
      writeFileString(__logFile, '['+msToTime(getTimeRunning(), TIME_BARE)+']: '+s+#13+#10);
    except
      writeln('Could not write to log file');
    end;
end;

{*
__closeLogFile
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __closeLogFile();

Closes the log file.

.. note::

    by Coh3n
    Last Modified: 13 April 2013 by Coh3n

Example:

.. code-block:: pascal

    __closeLogFile();

*}
procedure __closeLogFile();
begin
  if (disableSRLLog) then
    exit;

  try
    closeFile(__logFile);
  except
    writeln('Error closing log file');
  end;
end;

(*
print
~~~~~

.. code-block:: pascal

    procedure print(txt: string; debugType: TDebug = TDebug.DEBUG);

Prints txt to the debug box if debugType doesn't equal TDebug.LOG.  Will always
print to the log file unless disableSRLLog is set to true.  Valid arguements
for debugType:
    * DEBUG (default)
    * LOG
    * HINT
    * WARNING
    * ERROR

.. note::

    by Coh3n & masterBB
    Last Modified: 16 April 2013 by Coh3n

Example:

.. code-block:: pascal

    print(TheDate);

*)
procedure print(txt: string; debugType: TDebug = TDebug.DEBUG);
var
  debugMSG: string;
begin
  case debugType of
    TDebug.HINT:
      txt := 'HINT: ' + txt;

    TDebug.WARNING:
      txt := 'WARNING: ' + txt;

    TDebug.ERROR:
      txt := 'ERROR: ' + txt;

    TDebug.FATAL:
      txt := 'FATAL ERROR: ' + txt;
  end;

  debugMSG := replicate('--', __debugLevel) + ' ' + txt;

  if (not disableSRLLog) then
  begin
    if (__logFile = -1) then // if it hasn't yet been created
      __openLogFile();

    __printToLog(debugMSG);
  end;

  // print the fatal error and terminate the script
  if (debugType = TDebug.FATAL) then
  begin
    writeln(debugMSG);
    halt();
  end;

  if (disableSRLDebug) then
    exit;

  if (debugType <> TDebug.LOG) then
    writeln(debugMSG);
end;

(*
onFuncEnter()
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure onFuncEnter();

Increments the debug level when entering a function.

.. note::

    by Coh3n
    Last Updated: 06 April 2013

Example:

.. code-block:: pascal

    Lape_OnFunctionEnter := @onFuncEnter;

*)
procedure onFuncEnter();
begin
  inc(__debugLevel);
end;

(*
onFuncExit
~~~~~~~~~~

.. code-block:: pascal

    procedure onFuncExit();

Decrements the debug level when exiting a function.

.. note::

    by Coh3n
    Last Updated: 06 April 2013 by Coh3n

Example:

.. code-block:: pascal

    Lape_OnFunctionExit := @onFuncExit;

*)
procedure onFuncExit();
begin
  dec(__debugLevel);
end;

(*
debugBitmap
~~~~~~~~~~~

.. code-block:: pascal

    procedure debugBitmap(Bmp: Integer);

Shows a bitmap in the debug image window.

.. note::

    by Cazax
    Last Updated: 12 April 2013 by Coh3n

Example:

.. code-block:: pascal

    debugBitmap(bmp);
*)
procedure debugBitmap(Bmp: Integer);
var
  W, H: Integer;
begin
  try
    GetBitmapSize(Bmp, W, H);
    DisplayDebugImgWindow(W, H);
    DrawBitmapDebugImg(Bmp);
  except
    print('Error in DebugBitmap', TDebug.error);
  end;
end;

(*
debugTPA
~~~~~~~~

.. code-block:: pascal

    procedure debugTPA(tpa: TPointArray; bmpName: string);

Shows a TPointArray on the debug image window. Has the option to save the
window to a file.
    * tpa: The TPointArray to be displayed.
    * bmpName: The name of the file to be saved.  If bmpName = '' nothing is saved.

.. note::

    by Wizzup?
    Last Updated: 12 April 2013 by Coh3n

Example:

.. code-block:: pascal

    debugTPA(tpa, 'Example');
*)
procedure debugTPA(tpa: TPointArray; bmpName: string);
var
  bmp: integer;
  bds: TBox;
  tpaTemp : TPointArray;
begin
  bds := tpa.getBounds();
  bmp := bitmapFromClient(bds.x1, bds.y1, bds.x2, bds.y2);

  tpaTemp := tpa.copy();
  tpaTemp.offset(point(-bds.x1, -bds.y1));

  drawTPABitmap(bmp, tpaTemp, clRed);
  drawBitmapDebugImg(bmp);
  displayDebugImgWindow(bds.x2 - bds.x1 + 1, bds.y2 - bds.y1 + 1);

  if (bmpName <> '') then
    saveBitmap(bmp, scriptPath + bmpName + '.png');

  freeBitmap(bmp);
end;

(*
debugATPA
~~~~~~~~~

.. code-block:: pascal

    procedure debugATPA(atpa: T2DPointArray; bmpName: string);

Plots the points of a T2DPointArray to the debug image window.  Will plot each
element of the array in a different color.  Has the option to save the window
to a file.
    * atpa: The T2DPointArray to be drawn.
    * bmpName: The name of the file to be saved.  If bmpName = '', no file is saved.

.. note::

    by Wizzup?
    Last Updated: 12 April 2013 by Coh3n

Example:

.. code-block:: pascal

    debugATPA(atpa, 'Example');
*)
procedure debugATPA(atpa: T2DPointArray; bmpName: string);
var
  bmp: integer;
  atpaTemp: T2DPointArray;
  bds: TBox;
begin
  if (length(atpa) <= 0) then
    exit;

  bds := atpa.getBounds();
  bmp := bitmapFromClient(bds.x1, bds.y1, bds.x2, bds.y2);

  atpaTemp := atpa.copy();
  atpaTemp.offset(point(-bds.x1, -bds.y1));

  drawATPABitmap(bmp, atpaTemp);
  drawBitmapDebugImg(bmp);
  displayDebugImgWindow(bds.x2 - bds.x1 + 1, bds.y2 - bds.y1 + 1);

  if (bmpName <> '') then
    saveBitmap(bmp, scriptPath + bmpName + '.png');

  freeBitmap(bmp);
end;

(*
debugATPABounds
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure debugATPABounds(ATPA: T2DPointArray; bmpName: string);

Plots the founds of each element of a T2DPointArray to the debug image window.
Has the option to save the window's display to a file.
    * ATPA: The T2DPointArray to be drawn.
    * bmpName: The name of the file to be saved.  If bmpName = '', no file is saved.

.. note::

    by Wizzup?
    Last Updated: 12 April 2013 by Coh3n

Example:

.. code-block:: pascal

    debugATPABounds(atpa, 'Example');
*)
procedure debugATPABounds(ATPA: T2DPointArray; bmpName: string);
var
  Width, Height, ClientBMP, I: Integer;
  B, Box: TBox;
  BoxColors: TIntegerArray;
  SelColor: Integer;
  x, y: Integer;
  BMP: Integer;
begin
  ATPA.getBounds();
  Width := Box.X2 + 5;
  Height := Box.Y2 + 5;

  DisplayDebugImgWindow(Width, Height);
  BoxColors := [clRed, clBlue, clBlack, clGreen, clYellow];

  ClientBMP := BitmapFromClient(0, 0, Width - 1, Height - 1);

  for i:= 0 to High(ATPA) do
  begin
    SelColor := BoxColors[Random(Length(BoxColors))];
    B := ATPA[i].getBounds();

    for x := B.x1 to B.x2 do
    begin
      FastSetPixel(ClientBMP, x, b.y1, selColor);
      FastSetPixel(ClientBMP, x, B.y2, selColor);
    end;

    for y := B.y1 to B.y2 do
    begin
      FastSetPixel(ClientBMP, B.x1, y, selColor);
      FastSetPixel(ClientBMP, B.x2, y, selColor);
    end;

    BMP := BitmapFromText(IntToStr(i), StatChars);
    FastReplaceColor(bmp, clBlack, clYellow);
    FastReplaceColor(bmp, clWhite, clBlack);

    SetTransparentColor(bmp,clYellow);
    FastDrawTransparent(B.x1 + 2, b.y1 + 2, BMP, ClientBMP);

    FreeBitmap(BMP);
  end;

  if (bmpName <> '') then
    SaveBitmap(ClientBMP, bmpName + '.png');

  DrawBitmapDebugImg(ClientBMP);
  FreeBitmap(ClientBmp);
end;

(*
takeScreenshot
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure takeScreenshot(fileName: string);

Saves a screenshot to fileName, and adds the time to avoid replacing images.

.. note::

    by Harry & Coh3n
    Last updated: Feb. 09, 2013 by Coh3n

Example:

.. code-block:: pascal

    takeScreenshot('example.png');
*)
procedure takeScreenshot(fileName: string);
begin
  saveScreenshot(logPath + timeRunning() + '_' + fileName);
end;

begin
  addOnTerminate('__closeLogFile');
  //Lape_OnFunctionEnter := @onFuncEnter;
  //Lape_OnFunctionExit := @onFuncExit;
end;

