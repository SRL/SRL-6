(*
Debug
=====

The debug file holds any files used for SRL debugging and logging. Debug usage
guidelines are as follows:
    * Use printToDebug() for error messages.
    * Use printToDebug() for warnings.  If a lot of warnings are expected in a
      row, use printToDebug() once, followed by printLog().
    * Use printToDebug() for informational messages (i.e. "Checking if..." or
      "Found...").
    * Use printLog() for specific information the user won't want to see, but
      will be useful for scripters to debug (i.e. "Found 20 pixels of the color
      12345678 with tolerance 15").
*)

{$include_once globals.simba}
{$include_once ../utilities/time.simba}
{$include_once ../utilities/wrappers.simba}
{$include_once ../utilities/types.simba}
{$include_once ../tmp.simba}

{$f-}

var
  debugLevel = 1; // used for the nice printToDebug formatting
  logPath = includePath + 'SRL-6/logs/';
  scriptStartTime = '0:0:0';
  disableSRLLog = false;
  disableSRLprintToDebug = false;

(*
openLogFile
~~~~~~~~~~~

.. code-block:: pascal

    function openLogFile(): integer;

Creates the SRL log file.

.. note::

    by Coh3n
    Last Modified: Feb. 20th, 2012 by Coh3n

Example:

.. code-block:: pascal

    openLogFile();

*)
function openLogFile(): integer;
var
  fileName: string;
begin
  if (disableSRLLog) then
    exit;

  if (not directoryExists(logPath)) then
    forceDirectories(logPath);

  // make sure it's a valid file name (Windows)
  fileName := 'SRL log ('+scriptStartTime+').txt';
  fileName := replace(fileName, '/', '-', [rfReplaceAll]);
  fileName := replace(fileName, ':', '-', [rfReplaceAll]);
  fileName := logPath + fileName;

  try
    if (fileExists(fileName)) then
      result := appendFile(fileName)
    else
      result := createFile(fileName);
  except
    writeln('Could not open log file');
  end;
end;

(*
printToLog
~~~~~~~~~~

.. code-block:: pascal

    procedure printToLog(s : string);

Writes the string 's' to the SRL log file.

.. note::

    by Markus
    Last Modified: Feb. 20th, 2012 by Coh3n

Example:

.. code-block:: pascal

    printToLog('Adding to SRL log file!');

*)
procedure printToLog(s: string);
var
  tmpFile: integer;
begin
  if (disableSRLLog) then
    exit;

  tmpFile := openLogFile();

  if (tmpFile >= 0) then
    try
      writeFileString(tmpFile, '['+msToTime(getTimeRunning(), TIME_BARE)+']: '+s+#13+#10);
    except
      writeln('Could not write to log file');
    finally
      closeFile(tmpFile);
    end;
end;

(*
printToDebug
~~~~~~~~~~~~

.. code-block:: pascal

    procedure printToDebug(txt: string);

Prints 'txt' to the printToDebug box in the SRL debug format.

.. note::

    by Coh3n
    Last Modified: Jan. 03th, 2013 by Zyt3x

Example:

.. code-block:: pascal

    printToDebug(TheDate);

*)
procedure printToDebug(txt: string);
var
  printToDebugMSG: string;
begin
  printToDebugMSG := replicate('--', debugLevel) + ' ' + txt;

  if (not disableSRLLog) then
    printToLog(printToDebugMSG);

  if (disableSRLprintToDebug) then
    exit;

  writeln(printToDebugMSG);
end;

(*
onFuncEnter()
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure onFuncEnter();

Increments the debug level when entering a function.

.. note::

    by Coh3n
    Last Updated: 06 April 2013

Example:

.. code-block:: pascal

    Lape_OnFunctionEnter := @onFuncEnter;

*)
procedure onFuncEnter();
begin
  inc(debugLevel);
end;

(*
onFuncExit
~~~~~~~~~~

.. code-block:: pascal

    procedure onFuncExit();

Decrements the debug level when exiting a function.

.. note::

    by Coh3n
    Last Updated: 06 April 2013 by Coh3n

Example:

.. code-block:: pascal

    Lape_OnFunctionExit := @onFuncExit;

*)
procedure onFuncExit();
begin
  dec(debugLevel);
end;

(*
takeScreenshot
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure takeScreenshot(fileName: string);

Saves a screenshot to fileName, and adds the time to avoid replacing images.

.. note::

    by Harry & Coh3n
    Last updated: Feb. 09, 2013 by Coh3n

Example:

.. code-block:: pascal

    takeScreenshot('example.png');
*)
procedure takeScreenshot(fileName: string);
begin
  saveScreenshot(logPath + timeRunning() + '_' + fileName);
end;

begin
  //Lape_OnFunctionEnter := @onFuncEnter;
  //Lape_OnFunctionExit := @onFuncExit;
end;

