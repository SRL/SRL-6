(*
Player Management
=================

The Players file stores the functions related to the Players array. It also
stores properties of the TPlayer type.

*)

{$include_once ../interfaces/lobby.simba}
{$include_once ../interfaces/mainscreen.simba}
{$include_once ../core/mouse.simba}

{$f-}

(*
Constant: Skills
~~~~~~~~~~~~~~~~

Integer constants that represent each skill.

Example:

.. code-block:: pascal

    players[currentPlayer].skillLevel[SKILL_ATTACK] := 50;
*)
const
  SKILL_COUNT = 25;
    SKILL_ATTACK        = 0;
    SKILL_HITPOINTS     = 1;
    SKILL_MINING        = 2;
    SKILL_STRENGTH      = 3;
    SKILL_AGILITY       = 4;
    SKILL_SMITHING      = 5;
    SKILL_DEFENCE       = 6;
    SKILL_HERBLORE      = 7;
    SKILL_FISHING       = 8;
    SKILL_RANGE         = 9;
    SKILL_THIEVING      = 10;
    SKILL_COOKING       = 11;
    SKILL_PRAYER        = 12;
    SKILL_CRAFTING      = 13;
    SKILL_FIREMAKING    = 14;
    SKILL_MAGIC         = 15;
    SKILL_FLETCHING     = 16;
    SKILL_WOODCUTTING   = 17;
    SKILL_RUNECRAFTING  = 18;
    SKILL_SLAYER        = 19;
    SKILL_FARMING       = 20;
    SKILL_CONSTRUCTION  = 21;
    SKILL_HUNTER        = 22;
    SKILL_SUMMONING     = 23;
    SKILL_DUNGEONEERING = 24;

const
  LOGIN_COLOR_TEXT = 12378347;

var
  _boxUsername, _boxPassword: TBox; // set at the end of this file

(*
Type: TPlayer
~~~~~~~~~~~~~

A record that stores useful information about the current players.  It is up to
the scripter to set most these attributes in their scripts.

Example:

.. code-block:: pascal

    with players[0] do
    begin
      loginName := 'example@example.com';
      displayName := 'Sir Example III';
      nickname := 'fighter1';
      password := 'thisismypassword12345';
    end;

*)
type
  TPlayer = record
    loginName: string;
    displayName: string;
    nickname: string;
    password: string;
    bankPin: string;
    location: string;
    isActive: boolean;
    isMember: boolean;
    findMod: boolean;
    findTrade: boolean;
    reincarnate: boolean;
    secureLogin: boolean;
    worked: TTimeMarker;
    world: integer;
    skillLevel: array[0..(SKILL_COUNT - 1)] of integer;
    booleans: array[0..99] of boolean;
    integers: array[0..99] of integer;
    strings: array[0..99] of string;
    extendeds: array[0..99] of extended;
    variants: array[0..99] of variant;
  end;

  TPlayerArray = array of TPlayer;

(*
Player Variables
~~~~~~~~~~~~~~~~

All the variables associated with players.simba.

  * players: used to store player information.
  * currentPlayer: the player currently running.
  * disableIPScreenshots: disables the screenshots taken in the lobby screen.

*)
var
  players: TPlayerArray;
  currentPlayer: integer;
  disableIPScreenshots: boolean;

// from player_info.simba; can't be avoided :'(
function getPlayers(): TPlayerArray; forward;

(*
TPlayerArray.getActive
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.getActive(): integer;

Returns the number of players that are still active in the TPlayerArray.

.. note::

    by ss23 & Coh3n
    Last updated: Dec. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    while (players.getActive() > 0) do
      mainloop();
*)
function TPlayerArray.getActive(): integer;
var
  i, h: integer;
begin
  result := 0;
  h := high(self);

  for i := 0 to h do
    if (self[i].isActive) then
      inc(result);
end;

{*
TPlayerArray._add
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayerArray._add(info: TPlayer);

Adds the player with 'info' to the TPlayerArray.

.. note::

    by Zyt3x & Coh3n
    Last updated: Dec. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    var
      P: TPlayer;
      Players: TPlayerArray;
    begin
      with P do
      begin
        loginName := 'example@example.com';
        password := 'examplepassword123';
      end;

      Players._add(P);
    end;
*}
procedure TPlayerArray._add(const info: TPlayer);
var
  h: integer;
begin
  setLength(self, length(self) + 1);
  self[high(self)] := info;

  h := high(self);
  self[h] := info;
  self[h].isActive := true;
  self[h].findMod := true;
end;

(*
TPlayerArray.setup
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayerArray.setup(names: TStringArray);

Sets up the players with login name, display name, or nickname that match
elements of 'names'.  Should only be called only in DeclarePlayers().

.. note::

    by Zyt3x & Coh3n
    Last updated: Dec. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

   players.setup(['woodcutter5', 'miner3', 'fisher6']);

*)
procedure TPlayerArray.setup(names: TStringArray);
var
  i, j: integer;
  tmp: TPlayerArray;
begin
  tmp := getPlayers();

  for i := 0 to high(names) do
    for j := 0 to high(tmp) do
    begin
      if (names[i] = tmp[j].loginName) or (names[i] = tmp[j].displayName) or (names[i] = tmp[j].nickname) then
      begin
        self._add(tmp[j]);
        break;
      end;

      if (j = high(tmp)) then
        printToDebug('Invalid player name: '+names[i]);
    end;
end;

(*
TPlayerArray.switchTo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.switchTo(player: integer; active: boolean = true): boolean;

Switches to the 'player' element in the TPlayerArray. Sets the previous player
to optional parameter 'active'. Sets previous player to true by default.

.. note::

    by Dankness, Ron, Raymond, ZephyrsFury & Coh3n
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    players.switchTo(3);
    // or
    players.switchTo(3, false);

*)
function TPlayerArray.switchTo(player: integer; active: boolean = true): boolean;
begin
  self[currentPlayer].isActive := active;
  self[currentPlayer].logout();

  if (self.getActive() <= 0) then
  begin
    printToDebug('All players inactive...');
    exit(false);
  end;

  printToDebug('Switching to player '+toStr(player)+' ('+self[player].nickname+')');
  currentPlayer := player;

  if (@SRL_Events[EVENT_PLAYER_NEXT] <> nil) then
    SRL_Events[EVENT_PLAYER_NEXT]();

  result := self[currentPlayer].login();
end;

(*
TPlayerArray.next
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.next(active: boolean = true): boolean;

Switches to the next active player in the TPlayerArray. Sets the previous player
to the optional parameter 'active'. Sets the previous player to true by default.

.. note::

    by ZephyrsFury & Coh3n
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    players.next();
    // or
    players.next(false);

*)
function TPlayerArray.next(active: boolean = true): boolean;
var
  nP: integer;
begin
  nP := (currentPlayer + 1) mod length(self);

  // get the next active player index
  while (not self[nP].isActive) do
    nP := (nP + 1) mod length(self);

  result := self.switchTo(nP, active);
end;

(*
TPlayerArray.randomNext
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.randomNext(active: boolean = true): boolean;

Switches to a random active player in the TPlayerArray. Sets the previous player
to the optional parameter 'active'. Sets the previous player to true by default.

.. note::

    by ZephyrsFury & Coh3n
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    players.randomNext();
    // or
    players.randomNext(false);

*)
function TPlayerArray.randomNext(active: boolean = true): boolean;
var
  nP: integer;
begin
  nP := random(length(self));

  // get an active random player index
  while (not self[nP].isActive) or (nP = currentPlayer) do
  begin
    if (self.getActive() = 1) and (nP = currentPlayer) then // if there's only 1 player left
      break;

    nP := random(length(self));
  end;

  result := self.switchTo(nP, active);
end;

(*
TPlayer.write
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayer.write();

Writes the standard information about the player to the Simba printToDebug box.

.. note::

    by Coh3n
    Last updated: Dec. 22nd, 2012 by Zyt3x

Example:

.. code-block:: pascal

    players[currentPlayer].write();

*)
procedure TPlayer.write();
begin
  printToDebug('Login Name: ' + loginName);
  printToDebug('Display Name: ' + displayName);
  printToDebug('Nickname: ' + nickname);
  printToDebug('Member: ' + toStr(isMember));
  printToDebug('Active: ' + toStr(isActive));
  printToDebug('Worked: ' + toStr(worked.getTime()));
  printToDebug('Total Worked: ' + toStr(worked.getTotalTime()));
end;

(*
isLoggedIn()
~~~~~~~~~~~~

.. code-block:: pascal

    function isLoggedIn(): boolean;

Returns true if a player is logged in.

.. note::

    by WT-Fakawi
    Last updated: 30/09/2012 by Coh3n

Example:

.. code-block:: pascal

    if (isLoggedIn()) then
      writeln('We are logged in!');
*)
function isLoggedIn(): boolean;
begin
  Result := (GetColor(478, 543) = 16777215); // white text on report abuse button
end;

{*
__enterLoginInfo()
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __enterLoginInfo(const inputBox: TBox; const info: string; clickBox: boolean = true; pressEnter: boolean = true): boolean;

Used to enter a players username and password to login to RS. Input box can be
any text box, but the username and password boxes are what it was designed for.
The input text (info) is the username/password.  It will click the text box if
clickBox is set to true. Will press enter after text as been entered if
pressEnter is set to true. See TPlayer.loginToLobby for usage.

.. note::

    by Starblaster100, Raymond, IceFire908, Tarajunky, NCDS & Coh3n
    Last updated: 30/09/2012 by Coh3n

Example:

.. code-block:: pascal

    __enterLoginInfo(self.loginName);
*}
function __enterLoginInfo(const inputBox: TBox; const info: string; clickBox: boolean = true; pressEnter: boolean = true): boolean;
var
  tpa: TPointArray;
  p: TPoint;
  c, t: integer;
begin
  t := (getSystemTime() + (60000 * 2));

  repeat
    // check to see if there is already text in the input box
    findColors(tpa, LOGIN_COLOR_TEXT, inputBox);

    // click input box; clicks to the right of existing text
    if (length(tpa) > 0) then // if there's text in the box
    begin
      sortTPAFrom(tpa, point(inputBox.x2, (inputBox.y1 + inputBox.y2 div 2))); // the middle right of the input box
      p := point(tpa[0].x + 20, tpa[0].y);

      // make sure the point is in the inputBox
      if (not pointInBox(p, inputBox)) then
        p := point(inputBox.x2 - (10 + random(10)), p.y);

      if (clickBox) then
        mouse(p.rand(3), MOUSE_LEFT);
    end else begin
      if (clickBox) then
        mouseBox(inputBox, MOUSE_LEFT);

      break;
    end;

    // delete any existing text
    c := 0;
    while (countColor(LOGIN_COLOR_TEXT, inputBox) > 0) and (c < 25) do
    begin
      inc(c);
      typeByte(VK_BACK);
      wait(50+random(50));
    end;

  until(not findColors(tpa, LOGIN_COLOR_TEXT, inputBox) or (getSystemTime() > t));

  wait(100 + random(200));
  typeSend(info, pressEnter);
  result := true;
end;

{*
__secureEnterInfo
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __secureEnterInfo(user, pass: string): boolean;

An alternative to the standard login procedure. Will enter in only a few
characters of the username and password at a time. This will add security
against keyloggers.

.. note::

    by Coh3n & Flight
    Last updated: Feb. 12, 2013 by Coh3n

Example:

.. code-block:: pascal

    See __loginResponse();
*}
function __secureEnterInfo(user, pass: string): boolean;
var
  i, j, uL, pL, uH, pH, uLen, pLen, tmp: integer;
  uTextExists, pTextExists: boolean;
  uTPA, pTPA: TPointArray;
begin
  result := true;
  tmp := mouseSpeed;
  mouseSpeed := 13;

  // remove existing text from the input boxes
  uTextExists := findColors(uTPA, LOGIN_COLOR_TEXT, _boxUsername);
  pTextExists := findColors(pTPA, LOGIN_COLOR_TEXT, _boxPassword);

  if (uTextExists) then
    __enterLoginInfo(_boxUsername, '', true, pTextExists);

  if (pTextExists) then
    __enterLoginInfo(_boxPassword, '', (not uTextExists), true);

  if (not uTextExists) then
    mouseBox(intToBox(_boxUsername.x2 - 15, _boxUsername.y1, _boxUsername.x2, _boxUsername.y2), MOUSE_LEFT);

  uL := 0;
  pL := 0;
  uLen := length(user);
  pLen := length(pass);

  repeat
    if (not (uH = uLen)) then
    begin
      // prevents "Out of string range" errors
      uH := (uL + randomRange(1, 3));
      if (uH > uLen) then
        uH := uLen;

      for i := uL to uH do
      begin
        wait(100 + random(100));
        typeSend(user[i], false);
      end;

      uL := (uH + 1);

      // press enter if entering the password isn't complete
      if (not (pH = pLen)) then
        typeByte(VK_ENTER);
    end;

    if (not (pH = pLen)) then
    begin
      // prevents "Out of string range" errors
      pH := (pL + randomRange(1, 3));
      if (pH > pLen) then
        pH := pLen;

      for j := pL to pH do
      begin
        wait(100 + random(100));
        typeSend(pass[j], false);
      end;

      pL := (pH + 1);

      // click the end of the username box only if entering the username isn't complete
      if (not (uH = uLen)) then
      begin
        wait(250 + random(250));
        mouseBox(intToBox(_boxUsername.x2 - 15, _boxUsername.y1, _boxUsername.x2, _boxUsername.y2), MOUSE_LEFT);
      end;
    end;

  until((uH = uLen) and (pH = pLen));

  typeByte(VK_ENTER);
  wait(100 + random(200));
  typeByte(VK_ENTER); // in case we were in the username box

  mouseSpeed := tmp;
end;

{*
__loginActions
~~~~~~~~~~~~~~

.. code-block:: pascal

    function __loginActions(const action: string): boolean;

Used to perform different actions depending on which type of login message
appears (if any) when a player is logged in.

.. note::

    by Starblaster100, Raymond, IceFire908, Tarajunky, NCDS & Coh3n
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    See __loginResponse();
*}
function __loginActions(const action: string): boolean;
begin
  result := true;

  case (action) of
    'false':
      result := players.next(false);

    'true':
      result := players.next(true);

    'halt':
      halt();

    'update':
      begin
        if (@SRL_Events[EVENT_RS_UPDATE] <> nil) then
        begin
          printToDebug('Waiting 5 minutes before calling update procedure');
          wait(5 * 60000);
          SRL_Events[EVENT_RS_UPDATE];
          exit(false);
        end;

        halt();
      end;
  end;
end;

{*
__getLoginResponse
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __getLoginResponse(colorCount, timer: integer): TVariantArray;

Returns login response information depending on the login text color count.

.. note::

    by Starblaster100, Raymond, IceFire908, Tarajunky, NCDS & Coh3n
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    See TPlayer.__loginResponse();
*}
const
  __RES_DEBUG  = 0;
  __RES_WAIT   = 1;
  __RES_TRIES  = 2;
  __RES_ACTION = 3;
  __RES_LOC    = 4;
function __getLoginResponse(colorCount, timer: integer): TVariantArray;
begin
  case (colorCount) of
    //               printToDebug message      |      wait time | tries | action | player[].location
    763, 2348, 2299:
          result := ['Invalid username/password',  0,         2,  'false',  'Wrong User/Pass'      ];
    1088: result := ['Account has been disabled',  0,         0,  'false',  'Acc Disabled'         ];
     951: result := ['Already logged in',          5000,      5,  'true',   'Already logged in'    ];
    1239: result := ['Not a RS member',            0,         1,  'true',   ''                     ];
     364: result := ['Error connecting',           20000,     9,  'halt',   'Error Connecting'     ];
    1057: result := ['Too many incorrect logins',  5 * 60000, 2,  'false',  'Too many logins'      ];
     732: result := ['Runescape has been updated', 0,         0,  'update', 'RS Updated'           ];
     591: result := ['Client token changed',       0,         0,  'update', 'Client Token Changed' ];
    1606: result := ['Game session expired',       0,         0,  'update', 'Session Expired'      ];
     777: result := ['Login limit exceeded',       20000,     10, '',       'Waiting for login.'   ];
     850: result := ['Skill level 1000+ required', 0,         9,  'true',   '1000 skill club'      ];
    1028: result := ['Player in member-only area', 0,         1,  'false',  'In member-only area'  ];
     812: result := ['Cannot connect to world',    2000,      5,  'true',   'Error connect world'  ];

    else
      if ((getSystemTime() > timer) and (timer > 0)) then
      begin
        result :=   ['One minute as passed...',    0,         5,  'false',  'Login failed'         ];
        printToDebug('Unknown color count: '+toStr(colorCount));
        takeScreenshot(logPath + 'unknown_login_count.png');
      end;
  end;
end;

{*
TPlayer.__loginResponse
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayer.__loginResponse(const tries: integer; const timer: integer): boolean;

Handles the login response pop ups that sometimes show when a player logs in.

.. note::

    by Starblaster100, Raymond, IceFire908, Tarajunky, NCDS & Coh3n
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    See TPlayer.loginToLobby();
*}
function TPlayer.__loginResponse(const tries: integer; const timer: integer): boolean;
var
  c: integer;
  arr: TVariantArray;
begin
  result := true;

  // counts the colors in the lobby pop up screen
  c := countColor(LOGIN_COLOR_TEXT, 260, 190, 510, 450);
  arr := __getLoginResponse(c, timer);

  if (length(arr) > 0) then // if there was an error logging in
  begin
    printToDebug('Login response: '+arr[__RES_DEBUG]);
    wait(2000 + arr[__RES_WAIT] + randomRange(-200, 200));
    typeByte(VK_ESCAPE); // exit response window

    // TODO: need self.world/self.member set here (see old LoginPlayer)

    if (tries <= arr[__RES_TRIES]) then
    begin
      wait(500 + random(500));
      exit(false);
    end;

    if (arr[__RES_LOC] <> '') then
      self.location := arr[__RES_LOC];

    __loginActions(arr[__RES_ACTION]);
  end;
end;

(*
TPlayer.loginToLobby
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayer.loginToLobby(): boolean;

Logs the TPlayer into to the lobby. Returns true when the lobby screen is
visible.

.. note::

    by The SRL Developers Team
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    players[currentPlayer].loginToLobby();

*)
function TPlayer.loginToLobby(): boolean;
var
  arr: TVariantArray;
  c, t, tries: integer;
begin
  if (isLoggedIn() or lobby.isOpen()) then
    exit(true);

  // check player activity
  if (not self.isActive) then
  begin
    printToDebug('Player '+self.nickname+' is not active...');
    exit(false);
  end;

  typeByte(VK_ESCAPE); // exit any existing windows
  t := (getSystemTime() + 60000);

  repeat
    inc(tries);

    printToDebug(capitalize(self.loginName)+' ('+capitalize(self.displayName)+')');

    if (not self.secureLogin) then
    begin
      __enterLoginInfo(_boxUsername, self.loginName);
      __enterLoginInfo(_boxPassword, self.password, false);
    end else
      __secureEnterInfo(self.loginName, self.password);

    wait(800 + random(50));	// fixes the login spam recoveries bug

    repeat
      // returns false if exceeded maximum tries (set in __getLoginResponse)
      if (not self.__loginResponse(tries, t)) then
        break;

      wait(100 + random(100));
      result := (lobby.isOpen());
    until(result);
  until(result);

  if (result) and (not disableIPScreenshots) then
    takeScreenshot('IP_address.png');
end;

(*
TPlayer.login
~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayer.login(): boolean;

Completely logs the TPlayer into the game.  Returns true when they player is
logged in.

.. note::

    by The SRL Developers Team
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    players[currentPlayer].login();

*)
function TPlayer.login(): boolean;
var
  tries, t: integer;
begin
  repeat
    if (isLoggedIn()) then
    begin
      result := true;
      break;
    end;

    inc(tries);

    if (self.loginToLobby()) then
    begin
      // TODO: need world switching code here (see old LoginPlayer)


      // the "Play" button
      mouseBox(intToBox(270, 500, 490, 520), MOUSE_LEFT);

      repeat
        // returns false if exceeded maximum tries (set in __getLoginResponse)
        if (not self.__loginResponse(tries, -1)) then
          break(2);

        wait(100 + random(100));
        result := (isLoggedIn());

      until(result);
    end;
  until((tries >= 0) or (result));

  if (result) then
  begin
    printToDebug('Logged in: '+self.nickname);
    self.worked.start();
    //__exitedSquealOfFortune := false;

    if (@SRL_Events[EVENT_LOGIN] <> nil) then
      SRL_Events[EVENT_LOGIN]();
  end;

  wait(300 + random(500));
end;

(*
TPlayer.logout
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayer.logout(): boolean;

Completely logs the player out of the game.

.. note::

    by Coh3n
    Last updated: Feb. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    players[currentPlayer].logout();

*)
function TPlayer.logout(): boolean;
var
  t: integer;
begin
  if (not isLoggedIn()) then
  begin
    result := true;
    exit;
  end;

  if (@SRL_Events[EVENT_LOGOUT] <> nil) then
    SRL_Events[EVENT_LOGOUT]();

  if (tabLogout.clickText(['Login'])) then
  begin
    t := (getSystemTime() + (15000));

    while (not result) and (getSystemTime() < t) do
    begin
      printToDebug('Waiting for login screen...');
      result := (not isLoggedIn());
      wait(700 + random(500));
    end;

    self.worked.pause();
  end;
end;

(*
TPlayer.exitToLobby
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayer.exitToLobby(): boolean;

Logs the player out to the lobby.

.. note::

    by Coh3n
    Last updated: Mar. 1, 2013 by Coh3n

Example:

.. code-block:: pascal

    players[currentPlayer].exitToLobby();
*)
function TPlayer.exitToLobby(): boolean;
begin
  result := lobby._open();
end;

(*
TPlayer.leaveLobby
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayer.leaveLobby(): boolean;

Leaves the lobby; goes to the login screen.

.. note::

    by Coh3n
    Last updated: Mar. 3, 2013 by Coh3n

Example:

.. code-block:: pascal

    players[currentPlayer].leaveLobby();
*)
function TPlayer.leaveLobby(): boolean;
begin
  result := lobby._leaveLobby();
end;

begin
  _boxUsername := intToBox(279, 205, 486, 215);
  _boxPassword := intToBox(279, 250, 486, 265);
end;
