(*
Drawing
=======

The drawing file holds procedures to create and draw on-to bitmaps.

*)

{$include_once ../core/debug.simba}
{$include_once ../tmp.simba}

{*
const _DEFAULT_COLOR
~~~~~~~~~~~~~~~~~~~~

Integer constant that stores the default color which all drawing functions will
use if the color parameter is not used.

*}
const
  _DEFAULT_COLOR := clRed;

{*
const _COLOR_ARRAY
~~~~~~~~~~~~~~~~~~

TIntegerArray constant that stores multiple colors. Used for drawing with
multiple colors.

*}
const
  _COLOR_ARRAY := [clAqua, clBlue, clFuchsia, clLime, clMaroon, clOrange, clNavy, clYellow, clRed, clWhite];

{*
const _SHADOW_COLOR
~~~~~~~~~~~~~~~~~~~

Integer constant that stores the shadow color for adding a shadow for text drawing.

*}
const
  _SHADOW_COLOR := 65536;

(*
type TDrawing
~~~~~~~~~~~~~

A type that stores infomation of the bitmap.

*)
type
  TDrawing = record
   bitmap: TMufasaBitmap;
   isSetup: boolean;
end;

(*
TDrawing.create
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TDrawing.create(const name: string; const width, height: integer): boolean;

Creates a blank bitmap, setting the width and height and name values to the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    result := myBitmap.create('bitmap[0]' 250, 250);

*)
function TDrawing.create(const name: string; const width, height: integer): boolean;
begin
  if (self.isSetup) then
    exit(true);

  try
    self.bitmap.init(client.getMBitmaps());
    self.bitmap.setSize(width, height);
    self.bitmap.setName(name);
    self.isSetup := true;

    print('Bitmap ' + name + ' was created');
  except
    print('Failed to create bitmap ' + name);
  end;

  result := self.isSetup;
end;

(*
TDrawing.createFromClient
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TDrawing.createFromClient(const name: string; const area: TBox): boolean;

Creates a bitmap from the client from the desired area, setting the
width and height and name values to the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    result := myBitmap.create('bitmap[0]' box);

*)
function TDrawing.createFromClient(const name: string; const area: TBox): boolean;
var
  w, h: integer;
begin
  if (self.isSetup) then
    exit(true);

  try
    self.bitmap.init(Client.getMBitmaps());
    self.bitmap.setSize(area.x2 - area.x1, area.y2- area.y1);
    self.bitmap.copyClientToBitmap(client.getIOManager(), false, 0, 0, area.x1, area.y1, area.x2, area.y2);
    self.bitmap.setName(name);
    self.isSetup := true;

    print('Bitmap ' + name + ' was created');
  except
    print('Failed to create bitmap ' + name, TDebug.ERROR);
  end;

  result := self.isSetup;
end;

(*
TDrawing.createFromClient; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TDrawing.createFromClient(const name: string): boolean; overload;

Creates a bitmap from the whole client, setting the width and height and
name values to the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    result := myBitmap.create('bitmap[0]);
*)
function TDrawing.createFromClient(const name: string): boolean; overload;
var
  w, h: integer;
begin
  getClientDimensions(w, h);

  result := self.createFromClient(name, intToBox(0, 0, w, h));
end;

(*
TDrawing.destroy()
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.destroy();

Free's the bitmap and destroys any other data.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.destory();
*)
procedure TDrawing.destroy();
var
  s: string;
begin
  if (not self.isSetup) then
    exit();

  s := self.bitmap.getName();

  self.bitmap.free();
  self.isSetup := false;
  print('Destroyed bitmap "' + s + '"');
end;

(*
TDrawing.clear
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.clear();

Clears the whole bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.clear();

*)
procedure TDrawing.clear();
begin
  if (not self.isSetup) then
    exit();

  self.bitmap.drawClear(0);
end;

(*
TDrawing.clearArea
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.clearArea(area: TBox);

Clears the bitmap in the set area.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.clearArea(intToBox(100, 100, 200, 200));

*)
procedure TDrawing.clearArea(area: TBox);
begin
  if (not self.isSetup) then
    exit();

  self.bitmap.rectangle(area, 0);
end;

(*
TDrawing.drawTPA
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawTPA(tpa: TPointArray; color: TColor = _DEFAULT_COLOR);

Draws TPA (tpa) onto the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawTPA(tpa);

*)
procedure TDrawing.drawTPA(tpa: TPointArray; color: TColor = _DEFAULT_COLOR);
var
  b: TBox;
begin
  if (not self.isSetup) then
    exit;

  try
    self.bitmap.drawTPA(tpa, color);
  except
    print('failed drawing onto the bitmap', TDebug.ERROR);

    // working out if user is attempting to draw outside the bitmap bounds.
    b := getTPABounds(tpa);

    if (b.x1 < 0) or (b.y1 < 0) or (b.x2 > self.bitmap.getWidth()) or (b.y2 > self.bitmap.getHeight()) then
      print('reason: You are attempting to draw off the bitmap bounds', TDebug.HINT);
  end;
end;

(*
TDrawing.drawATPA
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawATPA(atpa: T2DPointArray);

Draws each tpa points in the atpa onto the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawATPA(atpa);

*)
procedure TDrawing.drawATPA(atpa: T2DPointArray);
var
  h, i, l: integer;
begin
  h := high(atpa);

  for i := 0 to h do
  begin
    self.drawTPA(atpa[i], _COLOR_ARRAY[l]);
    inc(l);

    if (l > 9) then
      l := 0;
  end;
end;

(*
TDrawing.drawBox
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawBox(const box: TBox; const fill: boolean; const color: TColor = _DEFAULT_COLOR);

Draws the TBox onto the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawBox(intToBox(100, 100, 200, 200), true, clLime);

*)
procedure TDrawing.drawBox(const box: TBox; const fill: boolean; const color: TColor = _DEFAULT_COLOR);
begin
  self.bitmap.rectangle(box, fill, color);
end;

(*
TDrawing.drawBoxes
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawBoxes(const boxArr: TBoxArray; const fill: boolean; const color: TColor = _DEFAULT_COLOR);

Draws an array of boxes onto the bitmap in the desired color.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawBoxes(tba, false, clLime);

*)
procedure TDrawing.drawBoxes(const boxArr: TBoxArray; const fill: boolean; const color: TColor = _DEFAULT_COLOR);
var
  i, h: integer;
begin
  h := high(boxArr);
  i := 0;

  for i to h do
    self.drawBox(boxArr[i], fill, color);
end;

(*
TDrawing.drawBoxes overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawBoxes(const boxArr: TBoxArray; const fill: boolean; const colorArr: TIntegerArray); overload;

Same as TDrawing.drawBoxes but allows a color for each box.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    TDrawing.drawBoxes([box1, box2], true, [clRed, clLime];

*)
procedure TDrawing.drawBoxes(const boxArr: TBoxArray; const fill: boolean; const colorArr: TIntegerArray); overload;
var
  i, h: integer;
begin
  h := high(boxArr);

  if ((h + 1) <> length(colorArr)) then
  begin
    print('Box / color array lengths differ', TDebug.ERROR);
    exit;
  end;

  for i := 0 to h do
    self.drawBox(boxArr[i], fill, colorArr[i]);
end;

(*
TDrawing.drawLine
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawLine(const startPoint, endPoint: TPoint; const color: TColor = _DEFAULT_COLOR);

Draws a line on the bitmap from startPoint to endPoint.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawLine(point(100, 100), point(200, 100), clLime);

*)
procedure TDrawing.drawLine(const startPoint, endPoint: TPoint; const color: TColor = _DEFAULT_COLOR);
var
  box: TBox;
begin
  try
    self.bitmap.lineTo(startPoint, endPoint, color);
  except
    print('failed drawing a line onto the bitmap', TDebug.ERROR);

    // working out if user is attempting to draw outside the bitmap bounds.
    box := pointToBox(point(0, 0), point(self.bitmap.getWidth(), self.bitmap.getHeight()));

    if (not pointInBox(startPoint, box)) or (not pointInBox(endPoint, box)) then
      print('reason: One of your points is off the bitmap bounds', TDebug.HINT);
  end;
end;

(*
TDrawing.drawLine; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawLine(const x1, y1, x2, y2: integer; const color: TColor = _DEFAULT_COLOR); overload;

Same as TDrawing.drawLine but accepts x1, y1, x2, y2 parameters rather than TPoints.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawLine(100, 100, 200, 200, clLime);

*)
procedure TDrawing.drawLine(const x1, y1, x2, y2: integer; const color: TColor = _DEFAULT_COLOR); overload;
begin
  self.drawLine(point(x1, y1), point(x2, y2), color);
end;

(*
TDrawing.drawCrossAt
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawCrossAt(const mid: TPoint; const size: integer; const color: TColor = _DEFAULT_COLOR);

Draws a cross onto the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawCrossAt(point(50, 50), 10);

*)
procedure TDrawing.drawCrossAt(const mid: TPoint; const size: integer; const color: TColor = _DEFAULT_COLOR);
var
  b: tbox;
begin
  if (size = 0) then
    exit();

  b := intToBox(mid.x - size, mid.y - size, mid.x + size, mid.y + size);

  self.drawLine(b.x1, b.y1, b.x2, b.y2, color);
  self.drawLine(b.x2, b.y1, b.x1, b.y2, color);
end;

(*
TDrawing.debugDTM
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.debugDTM(const dtm: integer; const color: TColor = _DEFAULT_COLOR);

Searches the whole client for a dtm and draws crosses at the found points

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.debugDTM(dtm, clRed);

*)
procedure TDrawing.debugDTM(const dtm: integer; const color: TColor = _DEFAULT_COLOR);
var
  matches: TPointArray;
  i, w, h: integer;
begin
  getClientDimensions(w, h);

  findDTMs(dtm, matches, intToBox(4, 4, w-4, h-4));
  h := high(matches);

  for i := 0 to h do
    self.drawCrossAt(matches[i], 4, color);
end;

(*
TDrawing.drawEllipse
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawEllipse(const middlePoint: TPoint; const xRadius, yRadius: integer; const fill: boolean; const color: TColor = _DEFAULT_COLOR);

Draws a ellipse onto the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawEllipse(point(50, 50), 10, 20, true, clRed);

*)
procedure TDrawing.drawEllipse(const middlePoint: TPoint; const xRadius, yRadius: integer; const fill: boolean; const color: TColor = _DEFAULT_COLOR);
var
  tpa: TPointArray;
begin
  tpa := tpaFromEllipse(middlePoint.x, middlePoint.y, xRadius, yRadius);

  if (fill) then
    fillEllipse(tpa);

  self.drawTPA(tpa, color);
end;

(*
TDrawing.drawCircle
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawCircle(const middlePoint: TPoint; const radius: integer; const fill: boolean; const color: TColor = _DEFAULT_COLOR);

Draws a circle at the middlePoint with the radius onto the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawCircle(point(100, 100), 15, true, clLime);

*)
procedure TDrawing.drawCircle(const middlePoint: TPoint; const radius: integer; const fill: boolean; const color: TColor = _DEFAULT_COLOR);
begin
  self.drawEllipse(middlePoint, radius, radius, fill, color);
end;

(*
TDrawing.drawBitmap
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawBitmap(bmp: integer; const point: TPoint);

Draws a bitmap at the desired point onto our bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawBitmap(bmp, point(50, 50));

*)
procedure TDrawing.drawBitmap(const bmp: integer; const point: TPoint);
var
  w, h: integer;
begin
  try
    getMufasaBitmap(bmp).drawTransparent(point.x, point.y, self.bitmap);
  except
    print('failed drawing bitmap onto the bitmap', TDebug.ERROR);

    // detecting a possible error
    getBitmapSize(bmp, w, h);

    if (point.y or point.x < 0) or (w > self.bitmap.getWidth()) or (h > self.bitmap.getHeight()) then
       print('reason: A part of the bitmap you are drawing is bigger than the target bitmap', TDebug.HINT);
  end;
end;


(*
TDrawing.debugATPABounds
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.debugATPABounds(atpa: T2DPointArray);

Debugs an ATPA onto the bitmap, draws the bounds and places a cross where the
middle TPA is.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.debugATPABounds(atpa);

*)
procedure TDrawing.debugATPABounds(atpa: T2DPointArray);
var
  c: TColor;
  i, l, h: integer;
  b: Tbox;
  p: TPoint;
begin
  h := high(atpa);

  for i := 0 to h do
  begin
    c := _COLOR_ARRAY[L];
    b := getTPABounds(atpa[i]);
    p := middleTPA(atpa[i]);

    self.drawBox(b, false, c);
    self.drawCrossAt(p, 3, c);
    self.drawTextAt(intToStr(i), point(b.x1 + 2, b.y1 + 2), c);

    inc(l);

    if (l > 9) then
      l := 0;
  end;
end;

(*
TDrawing.drawPolygon
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawPolygon(polygon: TPointArray; color: TColor);

Draws a polygon onto the bitmap.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawPolygon([point(100, 100), point(150, 150), point(200, 200)], clLime);

*)
procedure TDrawing.drawPolygon(polygon: TPointArray; color: TColor = _DEFAULT_COLOR);
var
  i, h: Integer;
begin
  h := (high(polygon) - 1);

  if (h = -1) then
    exit();

  for i := 0 to h do
    self.drawLine(polygon[i], polygon[i + 1], color);

  self.drawLine(polygon[h + 1], polygon[0], color);
end;

(*
TDrawing.displayInWindow
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.displayInWindow;

Displays the bitmap in Simba's debug image.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.displayInWindow();

*)
procedure TDrawing.displayInWindow;
begin
  clearDebugImg();
  drawBitmapDebugImg(self.bitmap.getIndex());
  displayDebugImgWindow(self.bitmap.getWidth(), self.bitmap.getHeight());
end;

(*
TDrawing.drawTextAt
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawTextAt(const text: string; const pos: TPoint; const font: string; const color: TColor = _DEFAULT_COLOR);

Draws text onto the bitmap at the desired point.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawTextAt('hello!', point(25, 25), 'statChars', clLime);

*)
procedure TDrawing.drawTextAt(const text: string; const pos: TPoint; const font: string; const color: TColor = _DEFAULT_COLOR);
var
  txt, shadow: TPointArray;
begin
  txt := tpaFromText(text, font);
  txt.offset(pos);

  shadow := txt.copy();
  shadow.offset(point(1, 1));

  self.drawTPA(shadow, _SHADOW_COLOR);
  self.drawTPA(txt, color);
end;

(*
TDrawing.drawTextAt: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawTextAt(const text: string; const pos: TPoint; const color: TColor = _DEFAULT_COLOR); overload;

Same as drawTextAt but no font parameter is reqiured (uses statChars).

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawTextAt('hello!', point(25, 25), clLime);

*)
procedure TDrawing.drawTextAt(const text: string; const pos: TPoint; const color: TColor = _DEFAULT_COLOR); overload;
begin
  self.drawTextAt(text, pos, 'statChars', color);
end;

(*
TDrawing.drawMultiTextAt
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawMultiTextAt(const textArr: TStringArray; posArr: TPointArray; const font: string; const color: TColor = _DEFAULT_COLOR); overload;

Draws text onto the bitmap, each index in the textArr will be drawn at the point in the posArr at the same index.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawMultiTextAt(['hello', 'bye'], [point(100, 100), point(100, 200)], 'statChars', clLime);

*)
procedure TDrawing.drawMultiTextAt(const textArr: TStringArray; posArr: TPointArray; const font: string; const color: TColor = _DEFAULT_COLOR); overload;
var
  i, h: integer;
begin
  h := high(textArr);

  if ((h + 1) <> length(posArr)) then
  begin
    print('Text / pos array lengths differ', TDebug.ERROR);
    exit;
  end;

  for i := 0 to h do
    self.drawTextAt(textArr[i], posArr[i], font, color);
end;

(*
TDrawing.drawTextLines
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TDrawing.drawTextLines(const textArr: TStringArray; startPos: TPoint; shadow: boolean; font: string; color: TColor = _DEFAULT_COLOR);

Draws text onto the bitmap, each index in the textArr is put on a different line.

.. note::

    by Ollybest
    Last Updated: 21 April 2013 by Ollybest

Example:

.. code-block:: pascal

    myBitmap.drawTextLines(['this will be line1', 'this will be line 2'], point(1, 50), true, 'statChars', clLime);

*)
procedure TDrawing.drawTextLines(const textArr: TStringArray; startPos: TPoint; shadow: boolean; font: string; color: TColor = _DEFAULT_COLOR);
var
  atpa: T2DPointArray;
  tpa, shadowTPA: TPointArray;
  w, h, i, hi: integer;
begin
  setLength(atpa, length(textArr));
  hi := high(textArr);

  for i := 0 to hi do
  begin
    atpa[i] := tpaFromText(textArr[i], font, w, h);
    atpa[i].offSet(point(startPos.x, startPos.y + 1 + (i * h)));
  end;

  tpa := atpa.merge();

  if (shadow) then
  begin
    shadowTPA := tpa.copy();
    shadowTPA.offset(point(1, 1));
    self.drawTPA(shadowTPA, _SHADOW_COLOR);
  end;

  self.drawTPA(tpa, color);
end;




