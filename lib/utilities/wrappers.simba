(*
Wrappers
========

The Wrappers include contains wrapper functions used throughout SRL.  These functions should
 be put inside Simba itself, and will be removed from SRL when that is done.

*)

(*
findColor: overload;
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColor(var x, y: integer; col: integer b: TBox): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    FindColor(x, y, cl_White, mainScreen.getBounds());

*)
function findColor(var x, y: integer; col: integer; b: TBox): boolean; overload;
begin
  result := findColor(x, y, col, b.x1, b.y1, b.x2, b.y2);
end;

(*
findColors: overload;
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindColors(var points : TPointArray; const color : Integer; const box : TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    FindColors(TPA, cl_White, MSBox);

*)
function findColors(var points : TPointArray; const color : Integer; const box : TBox): Boolean; overload;
begin
  Result := FindColors(points, color, box.X1, box.Y1, box.X2, box.Y2);
end;

(*
findColorTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorTolerance(var x, y: integer; color: integer; box: tbox; tolerance: integer): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    findColorTolerance(x, y, 255, b, 10);

*)
function findColorTolerance(var x, y: integer; color: integer; box: tbox; tolerance: integer): boolean; overload;
begin
  result := FindColorTolerance(x, y, color, box.X1, box.Y1, box.X2, box.Y2, tolerance);
end; 

(*
findColorsTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindColorsTolerance(var points : TPointArray; const color : Integer; const box : TBox; const tolerance : Integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    FindColorsTolerance(TPA, cl_White, MSBox, 10);

*)
function findColorsTolerance(var points : TPointArray; const color : Integer; const box : TBox; const tolerance : Integer): Boolean; overload;
begin
  Result := FindColorsTolerance(points, color, box.X1, box.Y1, box.X2, box.Y2, tolerance);
end;

(*
countColor: overload;
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function CountColor(Color: integer; box: TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    CountColor(clWhite, MSBOX);

*)
function countColor(Color: integer; box: TBox): integer; overload;
begin
  Result := CountColor(color, box.X1, box.Y1, box.X2, box.Y2);
end;

(*
CountColorTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function countColorTolerance(Color: integer; box: TBox; tol: integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    CountColorTolerance(clWhite, 10, MSBOX);

*)
function countColorTolerance(Color: integer; box: TBox; tol: integer): Boolean; overload;
begin
  Result := CountColorTolerance(color, box.X1, box.Y1, box.X2, box.Y2, tol);
end;

(*
findBitmapMaskTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapMaskTolerance(mask: integer; var p: TPoint, b: TBox; tol, contourTol: integer): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    result := findBitmapMaskTolerance(s, p, mainscreen.bounds, 30, 30);
*)
function findBitmapMaskTolerance(mask: integer; var p: TPoint; b: TBox; tol, contourTol: integer): boolean; overload;
begin
  result := findBitmapMaskTolerance(mask, p.x, p.y, b.x1, b.y1, b.x2, b.y2, tol, contourTol);
end;

(*
replicate: overload;
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function replicate(const str : String; const times : Integer): String; overload;

Used to replicate any string, as opposed to the former replicate() that replicates chars.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(replicate('SRL', 10));

*)
function replicate(const str : String; const times : Integer): String; overload;
begin
  for 1 to times do
    Result := Result + str;
end;
