(*
Wrappers
========

The Wrappers include contains wrapper functions used throughout SRL.  These functions should
be put inside Simba itself, and will be removed from SRL when that is done.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/wrappers.simba>`_.

*)

{$f-}

(*
getColor: overload;
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getColor(p: TPoint): integer; overload;

Takes a TPoint variable instead of x, y variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

     p := point(350, 200);
     int := getColor(p);

*)
function getColor(p: TPoint): integer; overload;
begin
  result := getColor(p.x, p.y);
end;

(*
getColors: overload;
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getColors(tpa: TPointArray; clearSame: boolean): TIntegerArray; overload;

Takes an extra parameter, clearSame if true will clear the same integers in the result.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

     intArr := getColors(myTPA, true);

*)
function getColors(tpa: TPointArray; clearSame: boolean): TIntegerArray; overload;
begin
  result := getColors(tpa);

  if (clearSame) then
    clearSameIntegers(result);
end;

(*
findColor: overload;
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColor(var x, y: integer; col: integer; searchBox: TBox): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    FindColor(x, y, cl_White, mainScreen.getBounds());

*)
function findColor(var x, y: integer; col: integer; searchBox: TBox): boolean; overload;
begin
  result := findColor(x, y, col, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
findColorTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    findColorTolerance(var x, y: integer; color: integer; searchBox: TBox; tolerance: integer): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    findColorTolerance(x, y, 255, b, 10);

*)
function findColorTolerance(var x, y: integer; color: integer; searchBox: TBox; tolerance: integer): boolean; overload;
begin
  result := FindColorTolerance(x, y, color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tolerance);
end;

(*
findColors: overload;
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    findColors(var points : TPointArray; const color : Integer; const searchBox: TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    FindColors(TPA, cl_White, MSBox);

*)
function findColors(var points : TPointArray; const color : Integer; const searchBox: TBox): Boolean; overload;
begin
  Result := FindColors(points, color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
findColorsTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    findColorsTolerance(var points : TPointArray; const color : Integer; const searchBox: TBox; const tolerance : Integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Zyt3x

Example:

.. code-block:: pascal

    FindColorsTolerance(TPA, clWhite, mainScreen.getBounds(), 10);

*)
function findColorsTolerance(var points : TPointArray; const color : Integer; const searchBox: TBox; const tolerance : Integer): Boolean; overload;
begin
  result := findColorsTolerance(points, color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tolerance);
end;

(*
findColorSpiral: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorSpiral(var x, y: integer; color: integer; searchBox: TBox): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    findColorSpiral(x, y, clRed, box);

*)
function findColorSpiral(var x, y: integer; color: integer; searchBox: TBox): boolean; overload;
begin
  result := findColorSpiral(x, y, color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
findColorSpiralTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorSpiralTolerance(var x, y: integer; color: integer; searchBox: TBox; tol: integer): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    findColorSpiral(x, y, clRed, box);

*)
function findColorSpiralTolerance(var x, y: integer; color: integer; searchBox: TBox; tol: integer): boolean; overload;
begin
  result := findColorSpiralTolerance(x, y, color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tol);
end;

(*
findColorsSpiralTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    findColorsSpiralTolerance(var x, y: integer; var points: tpointarray; color: integer; searchBox: TBox; tolerance: integer): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    findColorsSpiralTolerance(x, y, TPA, clWhite, mainScreen.GetBounds, 10);

*)
function findColorsSpiralTolerance(var x, y: integer; var points: tpointarray; color: integer; searchBox: TBox; tolerance: integer): boolean; overload;
begin
  result := findColorsSpiralTolerance(x, y, points, color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tolerance);
end;

(*
countColor: overload;
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    countColor(Color: integer; searchBox: TBox): integer; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    CountColor(clWhite, mainscreen.getBounds);

*)
function countColor(Color: integer; searchBox: TBox): integer; overload;
begin
  Result := CountColor(color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
CountColorTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function countColorTolerance(Color: integer; searchBox: TBox; tol: integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    CountColorTolerance(clWhite, 10, mainscreen.getBounds);

*)
function countColorTolerance(Color: integer; searchBox: TBox; tol: integer): integer; overload;
begin
  Result := CountColorTolerance(color, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tol);
end;

(*
freeDTMs
~~~~~~~~

.. code-block:: pascal

    procedure freeDTMs(DTMs: TIntegerArray);

Free's an array of DTMs.

.. note::

    - by Olly

Example:

.. code-block:: pascal

     freeDTMs([dtm1, dtm2]);
*)
procedure freeDTMs(DTMs: TIntegerArray);
var
  i: integer;
begin
  for i := 0 to high(dtms) do
    freeDTM(dtms[i]);
end;

(*
freeBitmaps
~~~~~~~~~~~

.. code-block:: pascal

    procedure freeBitmaps(bitmaps: TIntegerArray);

Free's an array of bitmaps.

.. note::

    - by Olly

Example:

.. code-block:: pascal

     freeBitmaps([bmp1, bmp2]);

*)
procedure freeBitmaps(bitmaps: TIntegerArray);
var
  i: integer;
begin
  for i := 0 to high(bitmaps) do
    freeBitmap(bitmaps[i]);
end;

(*
getBitmapName
~~~~~~~~~~~~~

.. code-block:: pascal

    function getBitmapName(index: integer): string;

Returns the name of the bitmap stored in 'index'.

.. note::

    - by Olly

Example:

.. code-block:: pascal

     n := getBitmapName(bmpOre);
*)
function getBitmapName(index: integer): string;
begin
  result := client.getMBitmaps().getBMP(index).getName();
end;

(*
getDTMName
~~~~~~~~~~

.. code-block:: pascal

    function getDTMName(index: integer): string;

Returns the name of the dtm stored in 'index'.

.. note::

    - by Olly

Example:

.. code-block:: pascal

     n := getDTMName(dtmOre);
*)
function getDTMName(index: integer): string;
begin
  result := client.getMDTMs().getDTM(index).getName();
end;

(*
bitmapFromClient: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function bitmapFromClient(searchBox: TBox): integer; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    bmp := bitmapFromClient(box);

*)
function bitmapFromClient(searchBox: TBox): integer; overload;
begin
  result := bitmapFromClient(searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
findBitmapIn: overload;
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapIn(bmp: integer; var x, y: integer; searchBox: TBox): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    result := findBitmap(bmp, x, y, mainScreen.bounds);

*)
function findBitmapIn(bmp: integer; var x, y: integer; searchBox: TBox): boolean; overload;
begin
  result := findBitmapIn(bmp, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
findBitmapTolerance
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapTolerance(const bmp: integer; var x, y: integer; const tolerance: integer): boolean;

Searches the whole client for a bitmap with tolerance.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    result := findBitmapTolerance(bmp, x, y, 50);

*)
function findBitmapTolerance(const bmp: integer; var x, y: integer; const tolerance: integer): boolean;
var
  w, h: integer;
begin
  getClientDimensions(w, h);
  result := findBitmapToleranceIn(bmp, x, y, 0, 0, w-1, h-1, tolerance);
end;

(*
findBitmapToleranceIn: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapToleranceIn(bmp: integer; var x, y: integer; searchBox: TBox; tolerance: integer): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    result := findBitmapToleranceIn(bmp, x, y, mainScreen.bounds, 20);

*)
function findBitmapToleranceIn(bmp: integer; var x, y: integer; searchBox: TBox; tolerance: integer): boolean; overload;
begin
  result := findBitmapToleranceIn(bmp, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tolerance);
end;

(*
findBitmapMaskTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapMaskTolerance(mask: integer; var p: TPoint; searchBox: TBox; tol, contourTol: integer): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    result := findBitmapMaskTolerance(s, p, mainscreen.bounds, 30, 30);

*)
function findBitmapMaskTolerance(mask: integer; var p: TPoint; searchBox: TBox; tol, contourTol: integer): boolean; overload;
begin
  result := findBitmapMaskTolerance(mask, p.x, p.y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tol, contourTol);
end;

(*
findDeformedBitmapToleranceIn: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDeformedBitmapToleranceIn(bmp: integer; var x, y: integer; searchBox: TBox; tolerance: integer; range: integer; allowPartialAccuracy: boolean; var accuracy: extended): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    if findDeformedBitmapToleranceIn(bmp, x, y, mainscreen.getBounds, 10, 0, true, acc) then
      writeln('we found the bitmap at accuracy: ' floatToStr(acc));

*)
function findDeformedBitmapToleranceIn(bmp: integer; var x, y: integer; searchBox: TBox; tolerance: integer; range: integer; allowPartialAccuracy: boolean; var accuracy: extended): boolean; overload;
begin
  result := findDeformedBitmapToleranceIn(bmp, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, tolerance, range, allowPartialAccuracy, accuracy);
end;

(*
findDTMRotatedSE: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    findDTMRotatedSE(dtm: integer; var x, y: integer; searchBox: TBox; sangle, eangle, astep, afound: extended): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    if findDTMRotatedSE(aDTM, x, y, mainscreen.getBounds, -Pi/4, Pi/4, Pi/60, aFound) then
      writeln('found the dtm!');

*)
function findDTMRotatedSE(dtm: integer; var x, y: integer; searchBox: TBox; sangle, eangle, astep, afound: extended): boolean; overload;
begin
  result := findDTMRotatedSE(dtm, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, sangle, eangle, astep, afound);
end;

(*
FindDTMRotatedAlternating: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMRotatedAlternating(dtm: integer; var x, y: integer; searchBox: TBox; sangle, eangle, astep, afound: extended): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    if findDTMRotatedAlternating(aDTM, x, y, mainscreen.getBounds, -Pi/4, Pi/4, Pi/60, aFound) then
      writeln('found the dtm!');

*)
function findDTMRotatedAlternating(dtm: integer; var x, y: integer; searchBox: TBox; sangle, eangle, astep, afound: extended): boolean; overload;
begin
  result := findDTMRotatedAlternating(dtm, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, sangle, eangle, astep, afound);
end;

(*
findDTMRotated
~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMRotated(dtm: integer; var x, y: integer; x1, y1, x2, y2: integer; sAngle, eAngle, aStep: extended; out aFound: extended): boolean;

Wrapper for findDTMRotatedAlternating (commonly used in SRL5).

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    if FindDTMRotated(aDTM, x, y, 100, 100, 400, 400, -Pi/4, Pi/4, Pi/60, aFound) then
      writeln('found the dtm!');

*)
function findDTMRotated(dtm: integer; var x, y: integer; x1, y1, x2, y2: integer; sAngle, eAngle, aStep: extended; out aFound: extended): boolean;
begin;
  result := findDTMRotatedAlternating(DTM, x, y, x1, y1, x2, y2, sangle, eangle, astep, afound);
end;

(*
findDTMRotated: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMRotated(DTM: Integer; var x, y: integer; searchBox: TBox; sAngle, eAngle, aStep: extended; out aFound: extended): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    if FindDTMRotated(aDTM, x, y, mainscreen.getBounds, -Pi/4, Pi/4, Pi/60, aFound) then
      writeln('found the dtm!');

*)
function findDTMRotated(DTM: Integer; var x, y: integer; searchBox: TBox; sAngle, eAngle, aStep: extended; out aFound: extended): boolean; overload;
begin
  result := FindDTMRotated(DTM, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, sangle, eangle, astep, afound);
end;

(*
findDTMs: overload;
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMs(dtm: integer; var tpa: tpointarray; searchBox: TBox): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    findDTMs(theDTM, tpa, mainscreen.getBounds);
    result := length(tpa) > 0;

*)
function findDTMs(dtm: integer; var tpa: tpointarray; searchBox: TBox): boolean; overload;
begin
  result := findDTMs(dtm, tpa, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
findDTM: overload;
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTM(dtm: integer; var x, y: integer; searchBox: TBox): boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    if findDTM(theDTM, x, y, mainscreen.getBounds) then
      writeln('we found the dtm!');

*)
function findDTM(dtm: integer; var x, y: integer; searchBox: TBox): boolean; overload;
begin
  result := findDTM(dtm, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

function findDTM(DTM: Integer; searchBox: TBox): Boolean; overload;
var
  x, y: Integer;
begin
  result := findDTM(dtm, x, y, searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2);
end;

(*
getTextAtEx: overload;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getTextAtEx(const searchBox: TBox; minvspacing, maxvspacing, hspacing, color, tolerance: integer; const font: string): string; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

  writeln(getTextAtEx(box, 0, 0, 3, clRed, 5, 'statChars'));

*)
function getTextAtEx(const searchBox: TBox; minvspacing, maxvspacing, hspacing, color, tolerance: integer; const font: string): string; overload;
begin
  result := GetTextAtEx(searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, minvspacing, maxvspacing, hspacing, color, tolerance, font);
end;

(*
getTextAtEx: overload;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getTextAtEx(const xs, ys, xe, ye: integer; const minVSpacing, maxVSpacing, hSpacing, col, tol: integer; const font: string; const extract: strExtr): string; overload;

Overloaded function, Takes an extra paramter "extract" which deterimes what to
extract from the string, vaild extracts are "Numbers", "Letters" and "Others".

.. note::

    - by Olly

Example:

.. code-block:: pascal

  writeln(getTextAtEx(100, 100, 200, 200, 0, 0, 3, clRed, 5, 'statChars', Numbers));

*)
function getTextAtEx(const xs, ys, xe, ye: integer; const minVSpacing, maxVSpacing, hSpacing, col, tol: integer; const font: string; const extract: strExtr): string; overload;
var
  s: string;
begin
  s := getTextAtEx(xs, ys, xe, ye, minVSpacing, maxVSpacing, hSpacing, col, tol, font);

  result := extractFromStr(s, extract);
end;

(*
getTextAtEx: overload;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getTextAtEx(const searchBox: TBox; const minVSpacing, maxVSpacing, hSpacing, col, tol: integer; const font: string; const extract: strExtr): string; overload;

Overloaded function, Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note::

    - by Olly

Example:

.. code-block:: pascal

  writeln(getTextAtEx(box, 0, 0, 3, clRed, 5, 'statChars', Numbers));

*)
function getTextAtEx(const searchBox: TBox; const minVSpacing, maxVSpacing, hSpacing, col, tol: integer; const font: string; const extract: strExtr): string; overload;
begin
  result := getTextAtEx(searchBox.x1, searchBox.y1, searchBox.x2, searchBox.y2, minVSpacing, maxVSpacing, hSpacing, col, tol, font, extract);
end;

(*
getTextATPA: overload;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getTextATPA(const atpa: T2DPointArray; const maxVSpacing: integer; const font: string; const extract: strExtr): string; overload;

Overloaded function, Takes an extra paramter "extract" which deterimes what to
extract from the string, vaild extracts are "Numbers", "Letters" and "Others".

.. note::

    - by Olly

Example:

.. code-block:: pascal

  writeln(getTextATPA(atpa, 5, StatChars, Numbers));

*)
function getTextATPA(const atpa: T2DPointArray; const maxVSpacing: integer; const font: string; const extract: strExtr): string; overload;
var
  s: string;
begin
  s := getTextATPA(atpa, maxVSpacing, font);

  result := extractFromStr(s, extract);
end;

(*
tpaFromText: overload;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     function tpaFromText(const text, font: string): TPointArray; overload;

Creates a tpa from text without the need for the W and H parameters.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

  tpa := tpaFromText('this is my text tpa', 'statChars');

*)
function tpaFromText(const text, font: string): TPointArray; overload;
var
  w, h: integer;
begin
  result := tpaFromText(text, font, w, h);
end;

(*
replicate: overload;
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function replicate(const str : String; const times : Integer): String; overload;

Used to replicate any string, as opposed to the former replicate() that replicates chars.

.. note::

    - by Zyt3x

Example:

.. code-block:: pascal

    writeLn(replicate('SRL', 10));

*)
function replicate(const str : String; const times : Integer): String; overload;
begin
  for 1 to times do result += str;
end;

(*
explode: overload;
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     function explode(const del : TStringArray; str : String): TStringArray; overload;

Explodes a string into a TStringArray, takes an array of delimiters instead of one.

.. note::

    - by Zyt3x

Example:

.. code-block:: pascal

   S := '1 2,3.4,5--6,7.8,9 0';
   sArr := explode([' ', ',', '.', '--'], S);
   // sArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]

*)
function explode(const del : TStringArray; str : String): TStringArray; overload;
var
  I : Integer;
  delSTR := '/*SRL*/';
begin
  for I := 0 to high(del) do str := replace(str, del[I], delSTR, [rfReplaceAll]);
  result := explode(delSTR, str);
end;

(*
inRange: overload;
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function inRange(const value, min, max: extended): boolean; overload;

Takes a extended variable instead of an integer variable.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    if inRange(33.90, 30.0, 35.0) then
      writeln('it''s in range');

*)
function inRange(const value, min, max: extended): boolean; overload;
begin
  result := (value >= min) and (value <= max);
end;

(*
distance: overload;
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function distance(pnt1, pnt2: TPoint): integer; overload;

Accepts two TPoints instead of x1, y1, x2 and y2 variables.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

    dist := distance(point(100, 100), point(200, 200));

*)
function distance(pnt1, pnt2: TPoint): integer; overload;
begin
  result := distance(pnt1.x, pnt1.y, pnt2.x, pnt2.y);
end;

(*
getClientBounds
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getClientBounds(): TBox;

Returns the clients bounds.

.. note::

    - by Olly

Example:

.. code-block:: pascal

   b := getClientBounds();
*)
function getClientBounds(): TBox;
var
  w, h: integer;
begin
  getClientDimensions(w, h);

  result := [0, 0, w -1, h -1];
end;

{$f+}
