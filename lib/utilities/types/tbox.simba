(*
TBox
====

This file holds all types related to TBox.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/types/tbox.simba>`_.

*)

{$f-}

(*
TBox.isPointInside
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.isPointInside(const point: TPoint): boolean;

Returns true if the point is in the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    result := box.isPointInside(point(250, 100));

*)
function TBox.isPointInside(const point: TPoint): Boolean; constref;
begin
  result := pointInBox(point, self);
end;

(*
TBox.getDimensions
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.getDimensions(var w, h: integer);

Returns the width and the height of the box in vars. W and H.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    var
      w, h: integer;
    begin
      box.getDimensions(w, h);

*)
procedure TBox.getDimensions(var w, h: integer); constref;
begin
  w := self.x2 - self.x1 + 1;
  h := self.y2 - self.y1 + 1;
end;

(*
TBox.getWidth
~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getWidth(): integer;

Returns the width of the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    w := box.getWidth();

*)
function TBox.getWidth(): integer; constref;
begin
  result := self.x2 - self.x1 + 1;
end;

(*
TBox.getHeight
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getHeight(): integer;

Returns the height of the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal


    h := box.getHeight();

*)
function TBox.getHeight(): integer; constref;
begin
  result := self.y2 - self.y1 +1;
end;

(*
TBox.getMiddle
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getMiddle(): TPoint;

Returns TPoint of the TBox's middle.

.. note::

    - by Dgby714

Example:

.. code-block:: pascal

    pt := b.getMidPoint();

*)
function TBox.getMiddle(): TPoint; constref;
begin
  result := point((self.x2 + self.x1) div 2, (self.y2 + self.y1) div 2);
end;

(*
TBox.getColors
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getColors(clearSame: boolean = true): TIntegerArray;

Returns an array of the colors found inside the TBox. Will clear the same
colors if clearSame is set to true.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    cols := b.getColors();

*)
function TBox.getColors(clearSame: boolean = true): TIntegerArray; constref;
begin
  getColorsWrap(TPAFromBox(intToBox(self.x1, self.y1, self.x2, self.y2)), result);

  if (clearSame) then
    clearSameIntegers(result);
end;

(*
TBox.colorExists
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.colorExists(color: integer; tolerance: integer = 0): Boolean;

Returns true if the color is found within the TBox. Also includes a optional
tolerance parameter.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    result := b.colorExists(OUTLINE_BLACK);

*)
function TBox.colorExists(color: integer; tolerance: integer = 0): Boolean; constref;
var
  p: TPoint;
begin
  result := findColorTolerance(p.x, p.y, color, self.x1, self.y1, self.x2, self.y2, tolerance);
end;

(*
TBox.dtmExists
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.dtmExists(const dtm: integer): boolean;

Returns true if the dtm is found within the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    result := b.dtmExists(thedtm);

*)
function TBox.dtmExists(const dtm: integer): boolean; constref;
var
  p: TPoint;
begin
  result := findDTM(dtm, p.x, p.y, self.x1, self.y1, self.x2, self.y2);
end;

(*
TBox.bitmapExists
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.bitmapExists(const bitmap, tolerance: integer): boolean;

Returns true if the bitmap is found within the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    result := b.bitmapExists(aBitmap, 25);

*)
function TBox.bitmapExists(const bitmap, tolerance: integer): boolean; constref;
var
  p: TPoint;
begin
  result := findBitmapToleranceIn(bitmap, p.x, p.y, self.x1, self.y1, self.x2, self.y2, tolerance);
end;

(*
TBox.createTPA
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.createTPA: TPointArray;

Creates and returns a TPointArray of the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    TPA := box.createTPA;

*)
function TBox.createTPA: TPointArray; constref;
begin
  result := tpaFromBox(self);
end;

(*
TBox.createTPAEdge
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.createTPAEdge: TPointArray;

Creates and returns a TPointArray of the edge of the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    tpa := myBox.createTPAEdge;

*)
function TBox.createTPAEdge: TPointArray; constref;
begin
  result := edgeFromBox(self);
end;

(*
TBox.mouse
~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.mouse(const mouseAction: integer = MOUSE_MOVE);

Peforms the desired mouse action on the box (uses mouseBox).

.. note::

    - by Olly

Example:

.. code-block:: pascal

    box.mouse();

*)
procedure TBox.mouse(const mouseAction: integer = MOUSE_MOVE); constref;
begin
  mouseBox(self, mouseAction);
end;

(*
TBox.equals
~~~~~~~~~~~

.. code-block:: pascal

    function TBox.isVaild(compareBox: TBox): boolean;

Returns true if the TBox is equal to compareBox.

.. note::

    - by Coh3n

Example:

.. code-block:: pascal

    if b.equals(b2) then
      writeln('boxes are equal.);

*)
function TBox.equals(compareBox: TBox): boolean; constref;
begin
  result := (self.x1 = compareBox.x1) and (self.x2 = compareBox.x2) and
            (self.y1 = compareBox.y1) and (self.y2 = compareBox.y2);
end;


(*
TBox.isVaild
~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.isVaild(invaildBox: TBox = [-1, -1, -1, -1]): boolean;

Returns true if the TBox is vaild or not, an invaild box is considered by default
(-1, -1, -1, -1), but can be changed (invaildBox).

.. note::

    - by Olly

Example:

.. code-block:: pascal

    if b.isVaild() then
      writeln('box is vaild.);

*)
function TBox.isVaild(invaildBox: TBox = [-1, -1, -1, -1]): boolean; constref;
begin
  result := (not self.equals(invaildBox));
end;


(*
TBox.setBounds
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.setBounds(const xs, ys, xe, ye: integer);

Sets the bounds of the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    b.setBounds(50, 50, 250, 250);

*)
procedure TBox.setBounds(const xs, ys, xe, ye: integer);
begin
  self := intToBox(xs, ys, xe, ye);
end;

(*
TBox.normalize()
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.normalize(b: TBox);

Makes sure the box is top-left to bottom-right

.. note::

    - by bonsai

Example:

.. code-block:: pascal

    someBox.normalize();

*)
procedure TBox.normalize();
var
  tmp: integer;
begin
  if (self.x1 > self.x2) then
  begin
    tmp := self.x1;
    self.x1 := self.x2;
    self.x2 := tmp;
  end;
  if (self.y1 > self.y2) then
  begin
    tmp := self.y1;
    self.y1 := self.y2;
    self.y2 := tmp;
  end;
end;

(*
TBox.setLimit
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.setLimit(b: TBox);

Limits the TBox to another TBox (b).

.. note::

    - by Olly
    - modified by bonsai 20140719

Example:

.. code-block:: pascal

    b.limit(intToBox(50, 50, 100, 100));

*)
procedure TBox.setLimit(b: TBox);
begin
  self.normalize();
  b.normalize();

  if (self.x1 < b.x1) then self.x1 := b.x1;
  if (self.x1 > b.x2) then self.x1 := b.x2;
  if (self.x2 < b.x1) then self.x2 := b.x1;
  if (self.x2 > b.x2) then self.x2 := b.x2;

  if (self.y1 < b.y1) then self.y1 := b.y1;
  if (self.y1 > b.y2) then self.y1 := b.y2;
  if (self.y2 < b.y1) then self.y2 := b.y1;
  if (self.y2 > b.y2) then self.y2 := b.y2;
end;

(*
TBox.copy()
~~~~~~~~~~~

.. code-block:: pascal

    function TBox.copy(): TBox;

Results a copy of the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    b := myBox.copy();

*)
function TBox.copy(): TBox; constref;
begin
  result := intToBox(self.x1, self.y1, self.x2, self.y2);
end;

(*
TBox.offset
~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.offset(const p: TPoint);

Offsets the TBox by "p".

.. note::

    - by Olly

Example:

.. code-block:: pascal

    myBox.offset(point(10, 10));

*)
procedure TBox.offset(const p: TPoint);
begin
  self.X1 := self.X1 + p.x;
  self.X2 := self.X2 + p.x;
  self.Y1 := self.Y1 + p.y;
  self.Y2 := self.Y2 + p.y;
end;

(*
TBox.edit
~~~~~~~~~

.. code-block:: pascal

    procedure TBox.edit(const x1_, y1_, x2_, y2_: integer);

Edits the TBox values.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    myBox.edit(-10, -10, + 10, + 10);

*)
procedure TBox.edit(const x1_, y1_, x2_, y2_: integer);
begin
  self.x1 := self.x1 + x1_;
  self.y1 := self.y1 + y1_;
  self.x2 := self.x2 + x2_;
  self.y2 := self.y2 + y2_;
end;

(*
TBox.combine
~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.combine(b: TBox): TBox;

Combines the TBox(self) and B and results the combined box into one.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    newBox := box.combine(intToBox(50, 50, 100, 100));

*)
function TBox.combine(b: TBox): TBox; constref;
begin
  Result.X1 := Min(Min(b.X1, b.X2), Min(self.X1, self.X2));
  Result.Y1 := Min(Min(b.Y1, b.Y2), Min(self.Y1, self.Y2));
  Result.X2 := Max(Max(b.X1, b.X2), Max(self.X1, self.X2));
  Result.Y2 := Max(Max(b.Y1, b.Y2), Max(self.Y1, self.Y2));
end;

(*
TBox.split
~~~~~~~~~~

.. code-block:: pascal

    function TBox.split(const width, height: integer): TBoxArray;

Splits the TBox into a TBoxArray by "width" and "height".

.. note::

    - by Home

Example:

.. code-block:: pascal

    tba := myBox.split(25, 25);

*)
function TBox.split(const width, height: integer): TBoxArray; constref;
var
  AreaW, AreaH: Integer;
  BoxX, BoxY: Integer;
  x, y, i: Integer;
begin
  // Calculate the area dimensions
  AreaW := self.X2 - self.X1 + 1;
  AreaH := self.Y2 - self.Y1 + 1;

  // Calculate the number of boxes in each dimension
  BoxX := AreaW div Width;
  if AreaW mod Width <> 0 then
    Inc(BoxX);
  BoxY := AreaH div Height;
  if AreaH mod Height <> 0 then
    Inc(BoxY);

  // Set the number of boxes
  SetLength(Result, BoxX * BoxY);

  // Calculate the boxes
  i := 0;
  for y := 0 to (BoxY - 1) do
    for x := 0 to (BoxX - 1) do
    begin
      Result[i] := IntToBox(self.X1 + x * Width,
      self.Y1 + y * Height,
      Min(self.X2, self.X1 + (x + 1) * Width - 1),
      Min(self.Y2, self.Y1 + (y + 1) * Height - 1));
      Inc(i);
    end;
end;

(*
TBox.getGaussPoint
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getGaussPoint: TPoint;

Returns a gauss point in the TBox. See gaussBox (tmp.simba) for more.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p := myBox.getGaussPoint();

*)
function TBox.getGaussPoint: TPoint; constref;
begin
  gaussBox(result, self);
end;

(*
TBox.getRandomPoint
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getRandomPoint: TPoint;

Returns a 100% random point in the TBox.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p := myBox.getRandomPoint();

*)
function TBox.getRandomPoint: TPoint; constref;
begin
  result.x := randomRange(self.x1, self.x2);
  result.y := randomRange(self.y1, self.y2);
end;

(*
TBox.getRandomPoint
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getRandomPoint(clearBoxes: TBoxArray): TPoint;

Will return a random point that is in the TBox, but is *not* in any of "clearBoxes".

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p := myBox.getRandomPoint(boxArr);

*)
function TBox.getRandomPoint(clearBoxes: TBoxArray): TPoint; constref; overload;
var
  i, h: integer;
  atpa: T2DPointArray;
  tpa, boxTPA: TPointArray;
begin
  result := [-1, -1];

  h := high(clearBoxes);
  if (h = -1) then
    exit();

  setLength(atpa, h +1);

  for i := 0 to h do
    atpa[i] := tpaFromBox(clearBoxes[i]);

  tpa := mergeATPA(atpa);
  clearDoubleTPA(tpa);

  boxTPA := tpaFromBox(self);
  boxTPA := clearTPAFromTPA(boxTPA, tpa);

  if (length(boxTPA) > 0) then
    result := boxTPA[random(high(boxTPA))]
  else
    writeln('-- ERROR: TBox.getRandomPoint(): No points left to get a point from! resulting as (-1, -1)');
end;

(*
TBox.overlap
~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.overlap(b: TBox): boolean;

Returns true if the TBox is in any kind of contact with the TBox "b".

.. note::

    - by Janilabo
    - Last Updated: 17 August 2013 by Olly

Example:

.. code-block:: pascal

    if b.overlap(box2) then
      writeln('boxes overlap');
*)
function TBox.overlap(b: TBox): boolean; constref;
begin
  Result := not ((self.X1 > b.X2) or (self.X2 < b.X1) or (self.Y1 > b.Y2) or (self.Y2 < b.Y1));
end;

(*
TBox.hasEqualDimensions
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.hasEqualDimensions(other: TBox): Boolean;

Returns true if the TBox has equal width & height, with TBox "other".

.. note::

    - by Le Jingle(Fratello)

Example:

.. code-block:: pascal

    if someBox.hasEqualDimensions(anotherBox) then
      writeln('boxes have same width and height');
*)
function TBox.hasEqualDimensions(other: TBox): Boolean; constref;
begin
  Result := ((Self.X2 - Self.X1) = (other.X2 - other.X1)) and
            ((Self.Y2 - Self.Y1) = (other.Y2 - other.Y1));
end;

(*
TBox.expand
~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.expand(const size: integer);

Increases (expands) the size of the box by "size".

.. note::

    - by Olly
    - Last Updated: 02 September 2013 by Olly

Example:

.. code-block:: pascal

    box.expand(10);
*)
procedure TBox.expand(const size: integer);
begin
  self.edit(-size, -size, +size, +size);
end;

(*
TBox.shrink
~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.shrink(const size: integer);

Shrinks the size of the box by 'size'.

.. note::

    - by Olly
    - Last Updated: 08 March 2014 by Olly

Example:

.. code-block:: pascal

    box.shrink(10);
*)
procedure TBox.shrink(const size: integer);
begin
  self.edit(+size, +size, -size, -size);
end;

{$f+}




