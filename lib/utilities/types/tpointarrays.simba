{$include_once ../../tmp.simba}
{$include_once tpoint.simba}

{$f-}

(*
TPointArray.copy
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.copy(): TPointArray;

Copies a TPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    newTPA := TPA.copy();
*)
function TPointArray.copy(): TPointArray;
begin
  result := copyTPA(self);
end;

(*
TPointArray.addIndex
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.addIndex(const p : TPoint; const index : Integer);

Used to add a point to a TPointArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.addIndex(point(13, 37), 0);

*)
procedure TPointArray.addIndex(const p : TPoint; const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: addIndex: index larger than array length.');
    Exit;
  end;

  setLength(self, length(self)+1);
  for I := high(self)-1 downto index do
    self[I+1] := self[I];
  self[index] := p;
end;

(*
TPointArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.deleteIndex(const index : Integer);

Used to delete a point of a TPointArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.deleteIndex(0);

*)
procedure TPointArray.deleteIndex(const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: deleteIndex: index larger than array length.');
    Exit;
  end;

  for I := index to high(self)-1 do
    self[I] := self[I+1];
  setLength(self, length(self)-1);
end;

(*
TPointArray.append
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.append(const p : TPoint);

Used to append a point to a TPointArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.append(1337.0);

*)
procedure TPointArray.append(const p : TPoint);
begin
  self.addIndex(p, length(self));
end;

(*
TPointArray.combine
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.combine(const arr : TPointArray);

Used to combine two TPointArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.combine(TPA2);

*)
procedure TPointArray.combine(const arr : TPointArray);
begin
  combineTPAWrap(self, arr, self);
end;

(*
TPointArray.returnInArray
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnInArray(const p : TPoint) : Integer;

Returns the index of where the point was found in a TPointArray.  Returns -1 if not found.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TPA.returnInArray(point(13, 37)));

*)
function TPointArray.returnPosInArray(const p : TPoint) : Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if self[I].equals(p) then
    begin
      result := I;
      exit;
    end;
end;

(*
TPointArray.isInArray
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.isInArray(const p : TPoint) : Boolean;

Returns True if the point is present in the TPointArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TPA.returnInArray(point(13, 37)));

*)
function TPointArray.isInArray(const p : TPoint) : Boolean;
begin
  result := returnPosInArray(p) > -1;
end;

(*
TPointArray.include
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.include(const arr : TPointArray) : TPointArray;

Returns a TPointArray which contains points that are present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA := TPA2.include(TPA);

*)
function TPointArray.include(const arr : TPointArray) : TPointArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TPointArray.exclude
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.exclude(const arr : TPointArray) : TPointArray;

Returns a TPointArray which contains points that are not present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA := TPA2.exclude(TEA);

*)
function TPointArray.exclude(const arr : TPointArray) : TPointArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TPointArray.rotate
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.rotate(const angle, cx, cy: extended);

Rotates the points in the TPointArray.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    tpa.rotate(40.00, p.x, p.y);

*)
procedure TPointArray.rotate(const angle, cx, cy: extended);
begin
  self := rotatePoints(self, angle, cx, cy);
end;

(*
TPointArray.clearEquals
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.clearEquals();

Used to clear duplicates in a TPointArray.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    TPA.clearEquals();

*)
procedure TPointArray.clearEquals();
begin
  clearDoubleTPA(self);
end;

(*
TPointArray.invert
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.invert();

Used to invert the TPointArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.invert();

*)
procedure TPointArray.invert();
begin
  invertTPA(self);
end;

(*
TPointArray.getMiddle
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.getMiddle(): TPoint;

Returns the point in the average middle of the TPA.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    mP := TPA.getMiddle();

*)
function TPointArray.getMiddle(): TPoint;
begin
  result := middleTPA(self);
end;

(*
TPointArray.getBounds
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.getBounds() : TPoint;

Returns the box boundaries of the TPA.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    b := TPA.getBounds();

*)
function TPointArray.getBounds() : TBox;
begin
  result := getTPABounds(self);
end;

(*
TPointArray.equals
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.equal() : Boolean;

Returns true if both TPointArrays are equal.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    b := TPA.equals(TPA2);

*)
function TPointArray.equals(const arr : TPointArray) : Boolean;
begin
  result := sameTPA(self, arr);
end;

(*
TPointArray.isPointNear
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.isPointNear(const P : TPoint; const W, H : Integer): Boolean;

Returns True if the point is near the array.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.isPointNear(P, 13, 37);

*)
function TPointArray.isPointNear(const P : TPoint; const W, H : Integer): Boolean;
begin
  result := nearbyPointInArrayEx(P, W, H, self);
end;

(*
TPointArray.isPointNear: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.isPointNear(const P : TPoint; const D : Integer): Boolean; overload;

Returns True if the point is near the array.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.isPointNear(P, 1337);

*)
function TPointArray.isPointNear(const P : TPoint; const D : Integer): Boolean; overload;
begin
  result := nearbyPointInArray(P, D, self);
end;

(*
TPointArray.returnInTPA
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnInTPA(const arr : TPointArray) : TPointArray);

Returns the TPA where the points in arr matches the points in the TPointArray.

.. note::

    by Zyt3x

Example:

..code-block:: pascal

    matches := TPA.returnInTPA(TPA2);

*)
function TPointArray.returnInTPA(const arr : TPointArray) : TPointArray;
begin
  FindTPAinTPA(arr, self, result);
end;

(*
TPointArray.returnInTPA; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnInTPA(const arr : TPointArray; var matches : TPointArray) : Boolean; overload;

Returns True if the TPA where the points in arr matches the points in the TPointArray.
  Also returns the matching points in the TPA "matches"

.. note::

    by Zyt3x

Example:

..code-block:: pascal

    if TPA.returnInTPA(TPA2, resultTPA) then

*)
function TPointArray.returnInTPA(const arr : TPointArray; var matches : TPointArray) : Boolean; overload;
begin
  Result := FindTPAinTPA(arr, self, matches);
end;

(*
TPointArray.returnNotInTPA
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnNotInTPA(b: TBox): TPointArray;

Returns the points in the given box (b) that are not in the TPointArray.

.. note::

    by Coh3n

Example:

..code-block:: pascal

    if (TPA.returnNotInTPA(b)) then

*)
function TPointArray.returnNotInTPA(b: TBox): TPointArray;
begin
  result := returnPointsNotInTPA(self, b);
end;

(*
TPointArray.offset
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.offset(p: TPoint);

Offsets each point in the TPointArray by the point p.

.. note::

    by Coh3n

Example:

..code-block:: pascal

    TPA.offset(point(5, 5));

*)
procedure TPointArray.offset(p: TPoint);
begin
  offsetTPA(self, p);
end;

(*
TPointArray.sortQuick
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortQuick(const arr : TIntegerArray; const iLo, iHi : Integer; const sortUp : Boolean);

Used to QuickSort the TPointArray.  PS: Using the TIntegerArray arr to sort.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortQuick(13, 37, True);

*)
procedure TPointArray.sortQuick(var arr : TIntegerArray; const iLo, iHi : Integer; const sortUp : Boolean);
begin
  quickTPASort(arr, self, iLo, iHi, sortUp);
end;

(*
TPointArray.sortByXValue
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortByXValue(const lowToHigh : Boolean);

Sorts the TPA from lowest X to highest X or highest X to lowest X, depending on lowToHigh

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortByXValue(True);

*)
procedure TPointArray.sortByXValue(const lowToHigh : Boolean);
begin
  sortTPAByX(self, lowToHigh);
end;

(*
TPointArray.sortByYValue
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortByYValue(const lowToHigh : Boolean);

Sorts the TPA from lowest Y to highest Y or highest Y to lowest Y, depending on lowToHigh

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortByYValue(True);

*)
procedure TPointArray.sortByYValue(const lowToHigh : Boolean);
begin
  sortTPAByY(self, lowToHigh);
end;

(*
TPointArray.sortFromPoint
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortFromPoint(const P : TPoint);

Sorts the TPA from a point

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortFromPoint(P);

*)
procedure TPointArray.sortFromPoint(const P : TPoint);
begin
  sortTPAFrom(self, P);
end;

(*
TPointArray.filterPointsBox
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.filterPointsBox(x, y, x2, y2: integer);

Removes all the points outside of the box.

.. note::

    by masterBB

Example:

.. code-block:: pascal

    tpa.filterPointsBox(100, 100, 200, 200);

*)
procedure TPointArray.filterPointsBox(x, y, x2, y2: integer);
var
  h, c, i: Integer;
begin
  h := high(self);
  c := 0;

  if (x > x2) then
    swap(x, x2);

  if (y > y2) then
    swap(y, y2);

  for i := 0 to h do
  begin
    if (self[i].x > x) and (self[i].x < x2) and (self[i].y > y) and (self[i].y < y2) then
    begin
      self[c] := self[i];
      inc(c);
    end;
  end;

  setlength(self ,c);
end;

(*
TPointArray.filterPointsBox; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.filterPointsBox(box: TBox); overload;

Accepts a TBox rather than x1, y1, x2, y2 vars.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    tpa.filterPointsBox(myBox);

*)
procedure TPointArray.filterPointsBox(box: TBox); overload;
begin
  self.filterPointsBox(box.x1, box.y1, box.x2, box.y2);
end;

(*
TPointArray.excludePointsCircle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.excludePointsCircle(const startD, endD, minRadius, maxRadius : Extended; const mX, mY : Integer);

Removes the points that are in the TPointArray Points that are not within the
 degrees SD (Strat Degrees) and ED (End Degrees)  and
 the radius’ MinR (Min Radius) and MaxR (Max Radius)  from
 the origin Mx and My.  Lookup FilterPointsPie for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.excludePointsCircle(13.0, 37.0, 13.0, 37.0, 13, 37);

*)
procedure TPointArray.excludePointsCircle(const startD, endD, minRadius, maxRadius : Extended; const mX, mY : Integer);
begin
  filterPointsPie(self, startD, endD, minRadius, maxRadius, mX, mY);
end;

(*
TPointArray.excludePointsLine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.excludePointsLine(const angle : Extended; const length, mX, mY : Integer);

Removes the points in the TPointArray Points that are not on the line defined  by
 angle, length and center.  Lookup FilterPointsLine for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.excludePointsLine(13.0, 13, 33, 37);

*)
procedure TPointArray.excludePointsLine(const angle : Extended; const length, mX, mY : Integer);
begin
  filterPointsLine(self, angle, length, mX, mY);
end;

(*
TPointArray.excludePointsDist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.excludePointsDist(const minD, maxD : Extended; const mX, mY : Integer);

Removes the points that don't have a dist between mindist/maxdist with (mx,my).
  Lookup FilterPointsDist for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.excludePointsDist(13.0, 13, 33, 37);

*)
procedure TPointArray.excludePointsDist(const minD, maxD : Extended; const mX, mY : Integer);
begin
  filterPointsDist(self, minD, maxD, mX, mY);
end;


(*
TPointArray.findText
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.findText(const height : Integer; const searchTPA : TPointArray; var matches : TPointArray): Boolean;

Returns True if the text TPA is found within TPointArray.  Also returns the matching points in the variable matches.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.findText(13.0, 13, sTPA, mTPA);

*)
function TPointArray.findTextIn(const height : Integer; const searchTPA : TPointArray; var matches : TPointArray): Boolean;
begin
  Result := FindTextTPAInTPA(height, searchTPA, self, matches);
end;

(*
TPointArray.split
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.split(w, h: integer): T2DPointArray;

Splits the TPointArray into a 2D array of boxes w by h.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    ATPA := TPA.split(5, 3);

*)
function TPointArray.split(w, h: integer): T2DPointArray;
begin
  result := splitTPAEx(self, w, h);
end;

(*
TPointArray.split overload
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.split(const dist: integer): T2DPointArray;

Splits the TPointArray into a 2D array of boxes dist by dist.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    ATPA := TPA.split(4);

*)
function TPointArray.split(const dist: integer): T2DPointArray; overload;
begin
  result := splitTPA(self, dist);
end;

(*
TPointArray.clearTPAFrom
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.clearTPAFrom(const tpa: TPointArray): TPointArray;

Removes the points in 'tpa' that are in the TPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    filteredTPA := TPA.clearTPAFrom(clearTPA);
*)
function TPointArray.clearTPAFrom(const tpa: TPointArray): TPointArray;
begin
  result := clearTPAFromTPA(self, tpa);
end;

(*
TPointArray.toATPA
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.toATPA(const distance: integer): T2DPointArray;

Splits the TPA to boxes with sidelength distance and results them as a T2DPointArray.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa := tpa.toATPA(10);

*)
function TPointArray.toATPA(const distance: integer): T2DPointArray;
begin
  result := TPAToATPA(self, distance);
end;

(*
TPointArray.toATPA
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.toATPA(const distance: integer): T2DPointArray; overload;

Splits the TPA to boxes with sidelengths W and H and results them as a T2DPointArray

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa := tpa.toATPA(10, 5);

*)
function TPointArray.toATPA(const w, h: integer): T2DPointArray; overload;
begin
  result := TPAToATPAEx(self, w, h);
end;

(*
TPointArray.fill
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.fill();

Fills the TPA.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    tpa.fill();

*)
procedure TPointArray.fill();
begin
  fillEllipse(self);
end;

(*
TPointArray.getEdges
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.getEdges(): TPointArray;

Returns the edges of the TPA

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    edgeTPA := tpa.getEdges();

*)
function TPointArray.getEdges(): TPointArray;
begin
  result := FindTPAEdges(self);
end;

(*
T2DPointArray.sortFromMidPoint
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.sortFromMidPoint(const sortFrom: TPoint);

Sorts the atpa from sortFrom, from the middle of each TPA.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.sortFromMidPoint(point(50, 50));

*)
procedure T2DPointArray.sortFromMidPoint(const sortFrom: TPoint);
begin
  sortATPAFromMidPoint(self, sortFrom);
end;

(*
T2DPointArray.getSamePoints
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.getSamePoints(): TPointArray;

Returns the points that all match in the atpa.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    matches := atpa.getSamePoints();

*)
function T2DPointArray.getSamePoints(): TPointArray;
begin
  getSamePointsATPA(self, result);
end;

(*
T2DPointArray.getSamePoints; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.getSamePoints(): integer; overload;

Returns the length of the matching points rather than the points that match.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    len := atpa.getSamePoints();

*)
function T2DPointArray.getSamePoints(): integer; overload;
var
  tmpTPA: TPointArray;
begin
  getSamePointsATPA(self, tmpTPA);
  result := length(tmpTPA);
end;

(*
T2DPointArray.getEachBounds
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.getEachBounds(): TBoxArray;

Returns each TPA bounds in the atpa in a TBoxArray.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    boxArr := atpa.getEachBounds();

*)
function T2DPointArray.getEachBounds(): TBoxArray;
var
  i, l: integer;
begin
  l := length(self);
  setLength(result, l);

  for i := 0 to (l - 1) do
    result[i] := getTPABounds(self[i]);
end;

(*
T2DPointArray.merge
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.merge(): TPointArray;

Merges the T2DPointArray into a TPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    TPA := ATPA.merge();

*)
function T2DPointArray.merge(): TPointArray;
begin
  result := mergeATPA(self);
end;

(*
T2DPointArray.getBounds
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.getBounds(): TBox;

Returns the box boundaries of the TPA.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    b := TPA.getBounds();

*)
function T2DPointArray.getBounds(): TBox;
begin
  result := getATPABounds(self);
end;

(*
T2DPointArray.offset
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.offset(p: TPoint);

Offsets a T2DPointArray by p.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    atpa.offset(point(1, 1));

*)
procedure T2DPointArray.offset(p: TPoint);
begin
  offsetATPA(self, p);
end;

(*
T2DPointArray.copy
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.copy(): T2DPointArray;

Copies a T2DPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    newATPA := ATPA.copy();
*)
function T2DPointArray.copy(): T2DPointArray;
begin
  result := copyATPA(self);
end;

(*
T2DPointArray.merge
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.getTextATPA(const maxSpacing: integer; const font: string): string;

Returns the string of font found inthe T2DPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    txt := ATPA.getTextATPA();

*)
function T2DPointArray.getTextInATPA(const maxSpacing: integer; const font: string): string;
begin
  result := getTextATPA(self, maxSpacing, font);
end;

(*
T2DPointArray.sortFromFirstPoint
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.sortFromFirstPoint(const sortFrom: TPoint);

Sorts the atpa from the desired TPoint.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.sortFromFirstPoint(point(250, 250));

*)
procedure T2DPointArray.sortFromFirstPoint(const sortFrom: TPoint);
begin
  sortATPAFromFirstPoint(self, sortFrom);
end;

(*
T2DPointArray.sortBySize
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.sortBySize(const largestFirst: boolean = true);

Sorts the ATPA from smallest or largest based on the largestFirst boolean.

* Parameter largestFirst is optional (defualt set to true).

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.sortSize;

*)
procedure T2DPointArray.sortBySize(const largestFirst: boolean = true);
begin
  sortATPASize(self, largestFirst);
end;

(*
T2DPointArray.sortFromSize
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.sortFromSize(const fromSize: integer; const closestFirst: boolean);

Sorts the T2DPointArray from size by the closest first if closestFirst is true.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.sortFromSize(400, true);

*)
procedure T2DPointArray.sortFromSize(const fromSize: integer; const closestFirst: boolean);
begin
  sortATPAFromSize(self, fromSize, closestFirst);
end;

(*
T2DPointArray.filterBetween
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.filterBetween(const min, max: integer);

Removes the tpas in the atpa if they their length is between min and max.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.filterBetween(0, 50);

*)
procedure T2DPointArray.filterBetween(const min, max: integer);
begin
  filterTPAsBetween(self, min, max);
end;
