(*
TPoint
======

A file that stores type functions to manipulate TPoints.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/types/tpoint.simba>`_.

*)

{$f-}

(*
TPoint.create
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPoint.create(const pX, pY : Integer);

Used to assign values to both the 'x' and 'y' coordinates of a TPoint.

.. note::

    - by Zyt3x

Example:

.. code-block:: pascal

    point.create(x,y);
    mouse(point.rand(5));

*)
procedure TPoint.create(const pX, pY : Integer);
begin
  X := pX;
  Y := pY;
end;

(*
TPoint.rand
~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.rand(xx,yy: integer): TPoint;

Used to apply separate randomness to both the 'x' and 'y' coordinates of a TPoint.

.. note::

    - by NCDS

Example:

.. code-block:: pascal

    mouse(point.rand(5,5));

*)
function TPoint.rand(xx, yy : Integer): TPoint; constref;
var
  nx, ny, rx, ry: integer;
begin
  if (xx <> 0) then
    nx := xx div abs(xx);   //div by self to determine positive or negative

  if (yy <> 0) then
    ny := yy div abs(yy);

  rx := random(xx) * nx;
  ry := random(yy) * ny;

  result.x := x + rx;
  result.y := y + ry;
end;

(*
TPoint.rand: overload;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.rand(ran: integer) : TPoint; overload;

Used to apply THE SAME randomness to both the 'x' and 'y' coordinates of a TPoint.

.. note::

    - by NCDS

Example:

.. code-block:: pascal

    mouse(point.rand(5));

*)
function TPoint.rand(ran : Integer) : TPoint; constref; overload;
begin
  result := rand(ran, ran);
end;

(*
TPoint.equals
~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.equals(const P : TPoint) : Boolean;

Returns True if both TPoint variables are equal.

.. note::

    - by Zyt3x

Example:

.. code-block:: pascal

    writeLn(P.equals(P2));

*)
function TPoint.equals(const P : TPoint) : Boolean; constref;
begin
  result := (self.X = P.X) and (self.Y = P.Y);
end;

(*
TPoint.isInvalid
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.isInvalid: boolean;

Returns true if the TPoint is isInvalid, an invaild TPoint by default is (-1, -1)
but can be changed(invaildPoint).

.. note::

    - by Olly

Example:

.. code-block:: pascal

    if (p.isInvalid) then
      exit();

*)
function TPoint.isInvalid(invalidPoint: TPoint = point(-1, -1)): boolean; constref;
begin
  result := self.equals(invalidPoint);
end;

(*
TPoint.rotate
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPoint.rotate(const angle, cx, cy: extended);

Rotates the TPoint by angle around cx and cy.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p.rotate(54.00, p.x, p.y);

*)
procedure TPoint.rotate(const angle, cx, cy: extended);
begin
  self := rotatePoint(self, angle, cx, cy);
end;

(*
TPoint.swap
~~~~~~~~~~~

.. code-block:: pascal

    procedure TPoint.swap(var p : TPoint);

Used to swap two TPoint variables.

.. note::

    - by Zyt3x

Example:

.. code-block:: pascal

    P.swap(P);

*)
procedure TPoint.swap(var p : TPoint);
begin
  tSwap(self, p);
end;

(*
TPoint.offset
~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.offSet(p: TPoint);

Offsets the TPoint by p.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p.offset(point(50, 50));

*)
function TPoint.offset(p: TPoint): TPoint;
begin
  self.x := self.x + p.x;
  self.y := self.y + p.y;
  result := self;
end;

(*
TPoint.copy
~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.copy(): TPoint;

Result a copy of the TPoint.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    tp := p.copy();

*)
function TPoint.copy(): TPoint; constref;
begin
  result := point(self.x, self.y);
end;

(*
TPoint.isInBox
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.isInBox(const box: TBox): boolean;

Returns if the TPoint is in the box.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    if p.isInBox(box) then
      writeln('point P is in the box!');

*)
function TPoint.isInBox(const box: TBox): boolean; constref;
begin
  result := pointInBox(self, box);
end;

(*
TPoint.randRange
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.randRange(const aFrom, aTo: integer): TPoint;

Used to apply the same randomness to both the 'x' and 'y' coordinates of a TPoint.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    writeln(p.randRange(-10, 10));

*)
function TPoint.randRange(const aFrom, aTo: integer): TPoint; constref;
begin
  result.x := randomRange(self.x + aFrom, self.x + aTo);
  result.y := randomRange(self.y + aFrom, self.y + aTo);
end;

(*
TPoint.randRange
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.randRange(const xFrom, xTo, yFrom, yTo: integer): TPoint; overload;

Overloaded function, but has extra parameters to apply separate randomness to
both 'x', 'y' cords.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p.randRange(-10, 10, -10, 10);

*)
function TPoint.randRange(const xFrom, xTo, yFrom, yTo: integer): TPoint; constref; overload;
begin
  result.x := randomRange(self.x + xFrom, self.x + xTo);
  result.y := randomRange(self.y + yFrom, self.y + yTo);
end;

(*
TPoint.gaussRange
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.gaussRange(const aFrom, aTo: integer): TPoint;

Uses gaussain to apply the same randomness to both the 'x' and 'y' coordinates
of a TPoint.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p.gaussRange(-10, 10);

*)
function TPoint.gaussRange(const aFrom, aTo: integer): TPoint; constref;
begin
  result.x := gaussRangeInt(self.x + aFrom, self.x + aTo);
  result.y := gaussRangeInt(self.y + aFrom, self.y + aTo);
end;

(*
TPoint.gaussRange
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.gaussRange(const xFrom, xTo, yFrom, yTo: integer): TPoint; overload;

Overloaded function, but has extra parameters to apply separate gaussian randomness
to both 'x', 'y' cords.

.. note::

    - by Olly

Example:

.. code-block:: pascal

    p.gaussRange(-10, 10, -5, 5);

*)
function TPoint.gaussRange(const xFrom, xTo, yFrom, yTo: integer): TPoint; constref; overload;
begin
  result.x := gaussRangeInt(self.x + xFrom, self.x + xTo);
  result.y := gaussRangeInt(self.y + yFrom, self.y + yTo);
end;

(*
TPoint.getAngleTo
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.getAngleTo(pt2: TPoint): extended;

Returns the angle from the TPoint to "pt2".

.. note::

    - by Janilabo

Example:

.. code-block:: pascal

    writeln(point(100, 100).getAngleTo(point(150, 150));

*)
function TPoint.getAngleTo(pt2: TPoint): extended; constref;
begin
  Result := ((ArcTan2((pt2.Y - self.Y), (pt2.X - self.X)) * (180.0 / Pi)) + 90.0);
  if (Result < 0.0) then
    Result := (Result + 360.0);
end;

{$f+}
