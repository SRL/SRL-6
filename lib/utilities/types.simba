(*
Type
====

The Type include contains type editing functions used throughout SRL.

*)

{$include_once ../utilities/wrappers.simba}
{$include_once ../core/mouse.simba}

(*
TStringArray.addIndex
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.addIndex(const str : String; const index : Integer);

Used to add a value to a TStringArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.addIndex('new entry', 0);

*)
procedure TStringArray.addIndex(const str : String; const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: addIndex: index larger than array length.');
    Exit;
  end;

  setLength(self, length(self)+1);
  for I := high(self)-1 downto index do
    self[I+1] := self[I];
  self[index] := str;
end;

(*
TStringArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.deleteIndex(const index : Integer);

Used to delete a value of a TStringArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.deleteIndex(0);

*)
procedure TStringArray.deleteIndex(const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: deleteIndex: index larger than array length.');
    Exit;
  end;

  for I := index to high(self)-1 do
    self[I] := self[I+1];
  setLength(self, length(self)-1);
end;

(*
TStringArray.append
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.append(const str : String);

Used to append a value to a TStringArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.append('new entry');

*)
procedure TStringArray.append(const str : String);
begin
  self.addIndex(str, length(self));
end;

(*
TStringArray.combine
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.combine(const arr : TStringArray);

Used to combine two TStringArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.combine(TSA2);

*)
procedure TStringArray.combine(const arr : TStringArray);
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    self.append(arr[I]);
end;

(*
TStringArray.returnInArray
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.returnInArray(const str : String) : Integer;

Returns the index of where the value was found in a TStringArray.  Returns -1 if not found.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TSA.returnInArray('new entry'));

*)
function TStringArray.returnInArray(const str : String) : Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if self[I] = str then
    begin
      result := I;
      exit;
    end;
end;

(*
TStringArray.isInArray
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.isInArray(const str : String) : Boolean;

Returns True if the value is present in the TStringArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TSA.returnInArray('new entry'));

*)
function TStringArray.isInArray(const str : String) : Boolean;
begin
  result := self.returnInArray(str) > -1;
end;

(*
TStringArray.include
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.include(const arr : TStringArray) : TStringArray;

Returns a TStringArray which contains values that are present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA := TSA2.include(TSA);

*)
function TStringArray.include(const arr : TStringArray) : TStringArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TStringArray.exclude
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.exclude(const arr : TStringArray) : TStringArray;

Returns a TStringArray which contains values that are not present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA := TSA2.exclude(TSA);

*)
function TStringArray.exclude(const arr : TStringArray) : TStringArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TStringArray.swap
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.swap(var arr : TStringArray);

Used to swap two TStringArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.swap(TSA2);

*)
procedure TStringArray.swap(var arr : TStringArray);
var
  arr2 : TStringArray;
begin
  arr2 := self;
  self := arr;
  arr := arr2;
end;

(*
TStringArray.clearEquals
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.clearEquals();

Used to clear duplicates in a TStringArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.clearEquals();

*)
procedure TStringArray.clearEquals();
var
  I : Integer;
  arr : TStringArray;
begin
  for I := 0 to high(self) do
    if not arr.isInArray(self[I]) then
      arr.append(self[I]);
  self := arr;
end;

(*
TStringArray.invert
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.invert();

Used to invert the TStringArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.invert();

*)
procedure TStringArray.invert();
var
  I : Integer;
  arr : TStringArray;
begin
  for I := high(self) downto 0 do
    arr.append(self[I]);
  self := arr;
end;

(*
TStringArray.explodeArr
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.explodeArr(const delArr : TStringArray): T2DStringArray;

Used to explode the TStringArray using different del strings.
  Requires the length of delArr to be the same as the length of the string array.

.. note::

    by Zyt3x
    Rename this to "TStringArray.explode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    s2DArr := sArr.explodeArr(['divider1', ...]);

*)
function TStringArray.explodeArr(const delArr : TStringArray): T2DStringArray;
var
  I : Integer;
begin
  if not length(delArr) <> length(self) then
  begin
    WriteLn('ERROR: explodeArr: delArr length not equal to array length.');
    Exit;
  end;

  setLength(result, length(self));
  for I := 0 to high(self) do
    result[I] := explode(delArr[I], self[I]);
end;

(*
TStringArray.explodeArr: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.explodeArr(const del : String): T2DStringArray; overload;

Used to explode the TStringArray.  Uses a string instead of an array of strings.

.. note::

    by Zyt3x
    Rename this to "TStringArray.explode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    s2DArr := sArr.explodeArr('divider');

*)
function TStringArray.explodeArr(const del : String): T2DStringArray; overload;
var
  delArr : TStringArray;
  I : Integer;
begin
  setLength(delArr, length(self));
  for I := 0 to high(delArr) do
    delArr[I] := del;

  result := self.explodeArr(delArr);
end;

(*
TStringArray.implodeArr
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.implodeArr(const glue : String): String;

Used to implode the TStringArray.

.. note::

    by Zyt3x
    Rename this to "TStringArray.implode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    S := sArr.implodeArr('glue');

*)
function TStringArray.implodeArr(const glue : String): String;
begin
  result := implode(glue, self);
end;

(*
TStringArray.toLowerCase
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.toLowerCase();

Used to lowercase a TStringArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.toLowerCase();

*)
procedure TStringArray.toLowerCase();
var
  I : Integer;
begin
  for I := 0 to high(self) do
    self[I] := lowerCase(self[I]);
end;

(*
TStringArray.toUpperCase
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.toUpperCase();

Used to uppercase a TStringArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.toUpperCase();

*)
procedure TStringArray.toUpperCase();
var
  I : Integer;
begin
  for I := 0 to high(self) do
    self[I] := upperCase(self[I]);
end;

(*
TStringArray.toCapitalize
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.toCapitalize();

Used to capitalize a TStringArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TSA.toCapitalize();

*)
procedure TStringArray.toCapitalize();
var
  I : Integer;
begin
  for I := 0 to high(self) do
    self[I] := capitalize(self[I]);
end;

(*
TStringArray.toString
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.toString() : String;

Used to turn a TStringArray into a string.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TSA.toString());

*)
function TStringArray.toString() : String;
begin
  result := self.implodeArr('');
end;

(*
T2DStringArray.implodeArr
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DStringArray.implodeArr(const glueArr : TStringArray): TStringArray;

Used to implode the T2DStringArray.
  Requires the length of glueArr to be the same as the length of the string array.

.. note::

    by Zyt3x
    Rename this to "T2DStringArray.implode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    sArr := s2DArr.implodeArr(['glue1', ...]);

*)
function T2DStringArray.implodeArr(const glueArr : TStringArray): TStringArray;
var
  I : Integer;
begin
  if not length(glueArr) <> length(self) then
  begin
    WriteLn('ERROR: implodeArr: glueArr length not equal to array length.');
    Exit;
  end;

  setLength(result, length(self));
  for I := 0 to high(self) do
    result[I] := self[I].implodeArr(glueArr[I]);
end;

(*
T2DStringArray.implodeArr: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DStringArray.implodeArr(const glue : String): TStringArray; overload;

Used to implode the T2DStringArray using glue strings.  Uses a string instead of an array of strings.

.. note::

    by Zyt3x
    Rename this to "T2DStringArray.implode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    sArr := s2DArr.implodeArr('glue']);

*)
function T2DStringArray.implodeArr(const glue : String): TStringArray; overload;
var
  glueArr : TStringArray;
  I : Integer;
begin
  setLength(glueArr, length(self));
  for I := 0 to high(glueArr) do
    glueArr[I] := glue;

  result := self.implodeArr(glueArr);
end;

(*
TIntegerArray.addIndex
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.addIndex(const int : Integer; const index : Integer);

Used to add a value to a TIntegerArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.addIndex(1337, 0);

*)
procedure TIntegerArray.addIndex(const int : Integer; const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: addIndex: index larger than array length.');
    Exit;
  end;

  setLength(self, length(self)+1);
  for I := high(self)-1 downto index do
    self[I+1] := self[I];
  self[index] := int;
end;

(*
TIntegerArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.deleteIndex(const index : Integer);

Used to delete a value of a TIntegerArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.deleteIndex(0);

*)
procedure TIntegerArray.deleteIndex(const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: deleteIndex: index larger than array length.');
    Exit;
  end;

  for I := index to high(self)-1 do
    self[I] := self[I+1];
  setLength(self, length(self)-1);
end;

(*
TIntegerArray.append
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.append(const int : Integer);

Used to append a value to a TIntegerArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.append(1337);

*)
procedure TIntegerArray.append(const int : Integer);
begin
  self.addIndex(int, length(self));
end;

(*
TIntegerArray.combine
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.combine(const arr : TIntegerArray);

Used to combine two TIntegerArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.combine(TIA2);

*)
procedure TIntegerArray.combine(const arr : TIntegerArray);
var
  I : Integer;
begin
  combineIntArrayWrap(self, arr, self);
end;

(*
TIntegerArray.returnInArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.returnInArray(const int : Integer) : Integer;

Returns the index of where the value was found in a TIntegerArray.  Returns -1 if not found.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TIA.returnInArray(1337));

*)
function TIntegerArray.returnInArray(const int : Integer) : Integer;
begin
  inIntArrayEx(self, result, int);
end;

(*
TIntegerArray.isInArray
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.isInArray(const int : Integer) : Boolean;

Returns True if the value is present in the TIntegerArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TIA.returnInArray(1337));

*)
function TIntegerArray.isInArray(const int : Integer) : Boolean;
begin
  result := inIntArray(self, int);
end;

(*
TIntegerArray.include
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.include(const arr : TIntegerArray) : TIntegerArray;

Returns a TIntegerArray which contains values that are present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA := TIA2.include(TIA);

*)
function TIntegerArray.include(const arr : TIntegerArray) : TIntegerArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TIntegerArray.exclude
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.exclude(const arr : TIntegerArray) : TIntegerArray;

Returns a TIntegerArray which contains values that are not present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA := TIA2.exclude(TIA);

*)
function TIntegerArray.exclude(const arr : TIntegerArray) : TIntegerArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TIntegerArray.swap
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.swap(var arr : TIntegerArray);

Used to swap two TIntegerArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.swap(TIA2);

*)
procedure TIntegerArray.swap(var arr : TIntegerArray);
var
  arr2 : TIntegerArray;
begin
  arr2 := self;
  self := arr;
  arr := arr2;
end;

(*
TIntegerArray.clearEquals
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.clearEquals();

Used to clear duplicates in a TIntegerArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.clearEquals();

*)
procedure TIntegerArray.clearEquals();
var
  I : Integer;
  arr : TIntegerArray;
begin
  for I := 0 to high(self) do
    if not arr.isInArray(self[I]) then
      arr.append(self[I]);
  self := arr;
end;

(*
TIntegerArray.invert
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.invert();

Used to invert the TIntegerArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.invert();

*)
procedure TIntegerArray.invert();
begin
  invertTIA(self);
end;

(*
TIntegerArray.sum
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.sum() : Integer;

Returns the sum of all values in a TIntegerArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(toStr(TIA.sum()));

*)
function TIntegerArray.sum() : Integer;
begin
  result := sumIntegerArray(self);
end;

(*
TIntegerArray.sum64
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.sum64() : Integer;

Returns the sum of all values in a TIntegerArray.  Returns the value in a Int64 variable.

.. note::

    by Zyt3x
    Used for large numbers.

Example:

.. code-block:: pascal

    writeLn(toStr(TIA.sum64()));

*)
function TIntegerArray.sum64() : Int64;
begin
  result := sum64IntArr(self);
end;

(*
TIntegerArray.average
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.average() : Integer;

Returns the average of all values in a TIntegerArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(toStr(TIA.average()));

*)
function TIntegerArray.average() : Integer;
begin
  result := averageTIA(self);
end;

(*
TIntegerArray.sortQuick
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TIntegerArray.quickSort();

Used to QuickSort the TIntegerArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TIA.sortQuick();

*)
procedure TIntegerArray.sortQuick();
begin
  quickSort(self);
end;

(*
TIntegerArray.toExtendedArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TIntegerArray.toExtendedArray() : TExtendedArray;

Turns a TIntegerArray into a TExtendedArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA := TIA.toExtended;

*)
function TIntegerArray.toExtendedArray() : TExtendedArray;
var
  I : Integer;
begin
  setLength(result, length(self));
  for I := 0 to high(self) do
    result[I] := self[I] * 1.0;
end;

(*
TExtendedArray.addIndex
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TExtendedArray.addIndex(const ext : Extended; const index : Integer);

Used to add a value to a TExtendedArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA.addIndex(1337.0, 0);

*)
procedure TExtendedArray.addIndex(const ext : Extended; const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: addIndex: index larger than array length.');
    Exit;
  end;

  setLength(self, length(self)+1);
  for I := high(self)-1 downto index do
    self[I+1] := self[I];
  self[index] := ext;
end;

(*
TExtendedArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TExtendedArray.deleteIndex(const index : Integer);

Used to delete a value of a TExtendedArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA.deleteIndex(0);

*)
procedure TExtendedArray.deleteIndex(const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: deleteIndex: index larger than array length.');
    Exit;
  end;

  for I := index to high(self)-1 do
    self[I] := self[I+1];
  setLength(self, length(self)-1);
end;

(*
TExtendedArray.append
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TExtendedArray.append(const ext : Extended);

Used to append a value to a TExtendedArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA.append(1337.0);

*)
procedure TExtendedArray.append(const ext : Extended);
begin
  self.addIndex(ext, length(self));
end;

(*
TExtendedArray.combine
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TExtendedArray.combine(const arr : TExtendedArray);

Used to combine two TExtendedArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA.combine(TEA2);

*)
procedure TExtendedArray.combine(const arr : TExtendedArray);
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    self.append(arr[I]);
end;

(*
TExtendedArray.returnInArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TExtendedArray.returnInArray(const ext : Extended) : Integer;

Returns the index of where the value was found in a TExtendedArray.  Returns -1 if not found.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TEA.returnInArray(1337.0));

*)
function TExtendedArray.returnInArray(const ext : Extended) : Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if self[I] = ext then
    begin
      result := I;
      exit;
    end;
end;

(*
TExtendedArray.isInArray
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TExtendedArray.isInArray(const ext : Extended) : Boolean;

Returns True if the value is present in the TExtendedArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TEA.returnInArray(1337.0));

*)
function TExtendedArray.isInArray(const ext : Extended) : Boolean;
begin
  result := returnInArray(ext) > -1;
end;

(*
TExtendedArray.include
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TExtendedArray.include(const arr : TExtendedArray) : TExtendedArray;

Returns a TExtendedArray which contains values that are present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA := TEA2.include(TEA);

*)
function TExtendedArray.include(const arr : TExtendedArray) : TExtendedArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TExtendedArray.exclude
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TExtendedArray.exclude(const arr : TExtendedArray) : TExtendedArray;

Returns a TExtendedArray which contains values that are not present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA := TEA2.exclude(TEA);

*)
function TExtendedArray.exclude(const arr : TExtendedArray) : TExtendedArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TExtendedArray.swap
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TExtendedArray.swap(var arr : TExtendedArray);

Used to swap two TExtendedArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA.swap(TEA2);

*)
procedure TExtendedArray.swap(var arr : TExtendedArray);
var
  arr2 : TExtendedArray;
begin
  arr2 := self;
  self := arr;
  arr := arr2;
end;

(*
TExtendedArray.clearEquals
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TExtendedArray.clearEquals();

Used to clear duplicates in a TExtendedArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA.clearEquals();

*)
procedure TExtendedArray.clearEquals();
var
  I : Integer;
  arr : TExtendedArray;
begin
  for I := 0 to high(self) do
    if not arr.isInArray(self[I]) then
      arr.append(self[I]);
  self := arr;
end;

(*
TExtendedArray.invert
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TExtendedArray.invert();

Used to invert the TExtendedArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TEA.invert();

*)
procedure TExtendedArray.invert();
var
  I : Integer;
  arr : TExtendedArray;
begin
  for I := high(self) downto 0 do
    arr.append(self[I]);
  self := arr;
end;

(*
TExtendedArray.sum
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TExtendedArray.sum() : Extended;

Returns the sum of all values in a TExtendedArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(toStr(TEA.sum()));

*)
function TExtendedArray.sum() : Extended;
var
  I : Integer;
begin
  for I := 0 to high(self) do
    result := result + self[I];
end;

(*
TExtendedArray.average
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TExtendedArray.average() : Extended;

Returns the average of all values in a TExtendedArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(toStr(TEA.average()));

*)
function TExtendedArray.average() : Extended;
begin
  result := averageExtended(self);
end;

(*
TBoolArray.addIndex
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoolArray.addIndex(const bool : Boolean; const index : Integer);

Used to add a value to a TBoolArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TBA.addIndex(True, 0);

*)
procedure TBoolArray.addIndex(const bool : Boolean; const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: addIndex: index larger than array length.');
    Exit;
  end;

  setLength(self, length(self)+1);
  for I := high(self)-1 downto index do
    self[I+1] := self[I];
  self[index] := bool;
end;

(*
TBoolArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoolArray.deleteIndex(const index : Integer);

Used to delete a value of a TBoolArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TBA.deleteIndex(0);

*)
procedure TBoolArray.deleteIndex(const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: deleteIndex: index larger than array length.');
    Exit;
  end;

  for I := index to high(self)-1 do
    self[I] := self[I+1];
  setLength(self, length(self)-1);
end;

(*
TBoolArray.append
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoolArray.append(const bool : Boolean);

Used to append a value to a TBoolArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TBA.append(False);

*)
procedure TBoolArray.append(const bool : Boolean);
begin
  self.addIndex(bool, length(self));
end;

(*
TBoolArray.combine
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoolArray.combine(const arr : TBoolArray);

Used to combine two TBoolArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TBA.combine(TBA2);

*)
procedure TBoolArray.combine(const arr : TBoolArray);
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    self.append(arr[I]);
end;

(*
TBoolArray.swap
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoolArray.swap(var arr : TBoolArray);

Used to swap two TBoolArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TBA.swap(TBA2);

*)
procedure TBoolArray.swap(var arr : TBoolArray);
var
  arr2 : TBoolArray;
begin
  arr2 := self;
  self := arr;
  arr := arr2;
end;

(*
TBoolArray.invert
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoolArray.invert();

Used to invert the TBoolArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TBA.invert();

*)
procedure TBoolArray.invert();
var
  I : Integer;
  arr : TBoolArray;
begin
  for I := high(self) downto 0 do
    arr.append(self[I]);
  self := arr;
end;

(*
TBox.isPointInside
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.isPointInside(const point: TPoint): boolean;

Returns true if the point is in the TBox.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    result := box.isPointInside(point(250, 100));

*)
function TBox.isPointInside(const point: TPoint): boolean;
begin
  result := pointInBox(point, self);
end;

(*
TBox.getDimensions
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.getDimensions(var w, h: integer);

Returns the width and the height of the box in vars. W and H.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    var
      w, h: integer;
    begin
      box.getDimensions(w, h);
    ..
    .

*)
procedure TBox.getDimensions(var w, h: integer);
begin
  w := self.x2 - self.x1;
  h := self.y2 - self.y1;
end;


(*
TBox.rand
~~~~~~~~~

.. code-block:: pascal

    procedure TBox.rand(x1, y1, x2, y2: integer);

Adds random values to the TBox.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    b.rand(5, 5, 5, 5);

*)
procedure TBox.rand(rx1, ry1, rx2, ry2: integer);
begin
  self.x1 := self.x1 + random(rx1);
  self.y1 := self.y1 + random(ry1);
  self.x2 := self.x2 + random(rx2);
  self.y2 := self.y2 + random(ry2);
end;

(*
TBox.getMidPoint
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getMidPoint(): tPoint;

returns tPoint of the TBox's middle.

.. note::

    by Dgby714

Example:

.. code-block:: pascal

    pt := b.getMidPoint();

*)
function TBox.getMidPoint(): TPoint;
begin

  result := Point((self.x2 + self.x1) div 2, (self.y2 + self.y1) div 2);
end;

(*
TBox.getColors
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.getColors(clearSame: boolean = true): TIntegerArray;

Returns an array of the colors found inside the TBox. Will clear the same
colors if clearSame is set to true.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    cols := b.getColors();

*)
function TBox.getColors(clearSame: boolean = true): TIntegerArray;
begin
  getColorsWrap(TPAFromBox(intToBox(self.x1, self.y1, self.x2, self.y2)), result);

  if (clearSame) then
    result.clearEquals();
end;

(*
TBox.colorExists
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.colorExists(color: integer; tolerance: integer = 0): Boolean;

Returns true if the color is found within the TBox. Also includes a optional
tolerance parameter.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    result := b.colorExists(OUTLINE_BLACK);

*)
function TBox.colorExists(color: integer; tolerance: integer = 0): Boolean;
var
  p: TPoint;
begin
  result := findColorTolerance(p.x, p.y, color, self, tolerance);
end;

(*
TBox.dtmExists
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.dtmExists(const dtm: integer): boolean;

Returns true if the dtm is found within the TBox.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    result := b.dtmExists(thedtm);

*)
function TBox.dtmExists(const dtm: integer): boolean;
var
  p: TPoint;
begin
  result := findDTM(dtm, p.x, p.y, self);
end;

(*
TBox.bitmapExists
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.bitmapExists(const bitmap, tolerance: integer): boolean;

Returns true if the bitmap is found within the TBox.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    result := b.bitmapExists(aBitmap, 25);

*)
function TBox.bitmapExists(const bitmap, tolerance: integer): boolean;
var
  p: TPoint;
begin
  result := findBitmapToleranceIn(bitmap, p.x, p.y, self, tolerance);
end;

(*
TBox.createTPA
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBox.createTPA: TPointArray;

Creates and returns a TPointArray of the TBox.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    TPA := box.createTPA;

*)
function TBox.createTPA: TPointArray;
begin
  result := tpaFromBox(self);
end;

(*
TBox.mouse
~~~~~~~~~~

.. code-block:: pascal

    procedure TBox.mouse(const mouseAction: integer = MOUSE_MOVE);

Peforms the desired mouse action on the box (uses mouseBox).

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    box.mouse();

*)
procedure TBox.mouse(const mouseAction: integer = MOUSE_MOVE);
begin
  mouseBox(self, mouseAction);
end;

(*
TPoint.create
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPoint.create(const pX, pY : Integer);

Used to assign values to both the 'x' and 'y' coordinates of a TPoint.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    point.create(x,y);
    mouse(point.rand(5));

*)
procedure TPoint.create(const pX, pY : Integer);
begin
  X := pX;
  Y := pY;
end;

(*
TPoint.rand
~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.rand(xx,yy: integer): TPoint;

Used to apply separate randomness to both the 'x' and 'y' coordinates of a TPoint.

.. note::

    by NCDS

Example:

.. code-block:: pascal

    mouse(point.rand(5,5));

*)
function TPoint.rand(xx, yy : Integer): TPoint;
var
  nx, ny, rx, ry: integer;
begin
  nx := xx div abs(xx);   //div by self to determine positive or negative
  ny := yy div abs(yy);

  rx := random(xx) * nx;
  ry := random(yy) * ny;

  result.x := x + rx;
  result.y := y + ry;
end;

(*
TPoint.rand: overload;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.rand(ran: integer) : TPoint; overload;

Used to apply THE SAME randomness to both the 'x' and 'y' coordinates of a TPoint.

.. note::

    by NCDS

Example:

.. code-block:: pascal

    mouse(point.rand(5));

*)
function TPoint.rand(ran : Integer) : TPoint; overload;
begin
  result := rand(ran, ran);
end;

(*
TPoint.equals
~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.equals(const P : TPoint) : Boolean;

Returns True if both TPoint variables are equal.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(P.equals(P2));

*)
function TPoint.equals(const P : TPoint) : Boolean;
begin
  result := (self.X = P.X) and (self.Y = P.Y);
end;

(*
TPoint.isInvaild
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPoint.isInvaild: boolean;

Returns true if the TPoint is invaild, an invaild TPoint is point(-1, -1);

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    if (p.isInvaild) then
      exit;

*)
function TPoint.isInvaild: boolean;
begin
  result := self.equals(Point(-1, -1));
end;

(*
TPoint.rotate
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPoint.rotate(const angle, cx, cy: extended);

Rotates the TPoint.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    tp.rotate(54.00, p.x, p.y);

*)
procedure TPoint.rotate(const angle, cx, cy: extended);
begin
  self := rotatePoint(self, angle, cx, cy);
end;

(*
TPoint.swap
~~~~~~~~~~~

.. code-block:: pascal

    procedure TPoint.swap(var p : TPoint);

Used to swap two TPoint variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    P.swap(P);

*)
procedure TPoint.swap(var p : TPoint);
var
  p2 : TPoint;
begin
  p2 := self;
  self := p;
  P := p2;
end;

(*
TPointArray.addIndex
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.addIndex(const p : TPoint; const index : Integer);

Used to add a point to a TPointArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.addIndex(point(13, 37), 0);

*)
procedure TPointArray.addIndex(const p : TPoint; const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: addIndex: index larger than array length.');
    Exit;
  end;

  setLength(self, length(self)+1);
  for I := high(self)-1 downto index do
    self[I+1] := self[I];
  self[index] := p;
end;

(*
TPointArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.deleteIndex(const index : Integer);

Used to delete a point of a TPointArray at a chosen index larger than the array's lowest index.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.deleteIndex(0);

*)
procedure TPointArray.deleteIndex(const index : Integer);
var
  I : Integer;
begin
  if not inRange(index, low(self), length(self)) then
  begin
    WriteLn('ERROR: deleteIndex: index larger than array length.');
    Exit;
  end;

  for I := index to high(self)-1 do
    self[I] := self[I+1];
  setLength(self, length(self)-1);
end;

(*
TPointArray.append
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.append(const p : TPoint);

Used to append a point to a TPointArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.append(1337.0);

*)
procedure TPointArray.append(const p : TPoint);
begin
  self.addIndex(p, length(self));
end;

(*
TPointArray.combine
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.combine(const arr : TPointArray);

Used to combine two TPointArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.combine(TPA2);

*)
procedure TPointArray.combine(const arr : TPointArray);
begin
  combineTPAWrap(self, arr, self);
end;

(*
TPointArray.returnInArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnInArray(const p : TPoint) : Integer;

Returns the index of where the point was found in a TPointArray.  Returns -1 if not found.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TPA.returnInArray(point(13, 37)));

*)
function TPointArray.returnInArray(const p : TPoint) : Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if self[I].equals(p) then
    begin
      result := I;
      exit;
    end;
end;

(*
TPointArray.isInArray
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.isInArray(const p : TPoint) : Boolean;

Returns True if the point is present in the TPointArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    writeLn(TPA.returnInArray(point(13, 37)));

*)
function TPointArray.isInArray(const p : TPoint) : Boolean;
begin
  result := returnInArray(p) > -1;
end;

(*
TPointArray.include
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.include(const arr : TPointArray) : TPointArray;

Returns a TPointArray which contains points that are present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA := TPA2.include(TPA);

*)
function TPointArray.include(const arr : TPointArray) : TPointArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TPointArray.exclude
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.exclude(const arr : TPointArray) : TPointArray;

Returns a TPointArray which contains points that are not present in both arrays.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA := TPA2.exclude(TEA);

*)
function TPointArray.exclude(const arr : TPointArray) : TPointArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.isInArray(arr[I]) then
      result.append(arr[I]);
end;

(*
TPointArray.rotate
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.rotate(const angle, cx, cy: extended);

Rotates the points in the TPointArray.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    tpa.rotate(40.00, p.x, p.y);

*)
procedure TPointArray.rotate(const angle, cx, cy: extended);
begin
  self := rotatePoints(self, angle, cx, cy);
end;

(*
TPointArray.clearEquals
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.clearEquals();

Used to clear duplicates in a TPointArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.clearEquals();

*)
procedure TPointArray.clearEquals();
var
  I : Integer;
  arr : TPointArray;
begin
  for I := 0 to high(self) do
    if not arr.isInArray(self[I]) then
      arr.append(self[I]);
  self := arr;
end;

(*
TPointArray.invert
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.invert();

Used to invert the TPointArray.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.invert();

*)
procedure TPointArray.invert();
begin
  invertTPA(self);
end;

(*
TPointArray.swap
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.swap(var arr : TPointArray);

Used to swap two TPointArray variables.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.swap(TPA2);

*)
procedure TPointArray.swap(var arr : TPointArray);
begin
  tpaSwap(arr, self);
end;

(*
TPointArray.middle
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.middle() : TPoint;

Returns the point in the average middle of the TPA.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    mP := TPA.middle();

*)
function TPointArray.middle() : TPoint;
begin
  result := middleTPA(self);
end;

(*
TPointArray.getBounds
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.getBounds() : TPoint;

Returns the box boundaries of the TPA.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    b := TPA.getBounds();

*)
function TPointArray.getBounds() : TBox;
begin
  result := getTPABounds(self);
end;

(*
TPointArray.equals
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.equal() : Boolean;

Returns true if both TPointArrays are equal.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    b := TPA.equals(TPA2);

*)
function TPointArray.equals(const arr : TPointArray) : Boolean;
begin
  result := sameTPA(self, arr);
end;

(*
TPointArray.isPointNear
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.isPointNear(const P : TPoint; const W, H : Integer): Boolean;

Returns True if the point is near the array.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.isPointNear(P, 13, 37);

*)
function TPointArray.isPointNear(const P : TPoint; const W, H : Integer): Boolean;
begin
  result := nearbyPointInArrayEx(P, W, H, self);
end;

(*
TPointArray.isPointNear: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.isPointNear(const P : TPoint; const D : Integer): Boolean; overload;

Returns True if the point is near the array.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.isPointNear(P, 1337);

*)
function TPointArray.isPointNear(const P : TPoint; const D : Integer): Boolean; overload;
begin
  result := nearbyPointInArray(P, D, self);
end;

(*
TPointArray.returnInTPA
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnInTPA(const arr : TPointArray) : TPointArray);

Returns the TPA where the points in arr matches the points in the TPointArray.

.. note::

    by Zyt3x

Example:

..code-block:: pascal

    matches := TPA.returnInTPA(TPA2);

*)
function TPointArray.returnInTPA(const arr : TPointArray) : TPointArray;
begin
  FindTPAinTPA(arr, self, result);
end;

(*
TPointArray.returnInTPA; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnInTPA(const arr : TPointArray; var matches : TPointArray) : Boolean; overload;

Returns True if the TPA where the points in arr matches the points in the TPointArray.
  Also returns the matching points in the TPA "matches"

.. note::

    by Zyt3x

Example:

..code-block:: pascal

    if TPA.returnInTPA(TPA2, resultTPA) then

*)
function TPointArray.returnInTPA(const arr : TPointArray; var matches : TPointArray) : Boolean; overload;
begin
  Result := FindTPAinTPA(arr, self, matches);
end;

(*
TPointArray.returnNotInTPA
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.returnNotInTPA(b: TBox): TPointArray;

Returns the points in the given box (b) that are not in the TPointArray.

.. note::

    by Coh3n

Example:

..code-block:: pascal

    if (TPA.returnNotInTPA(b)) then

*)
function TPointArray.returnNotInTPA(b: TBox): TPointArray;
begin
  result := returnPointsNotInTPA(self, b);
end;

(*
TPointArray.offset
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.offset(p: TPoint);

Offsets each point in the TPointArray by the point p.

.. note::

    by Coh3n

Example:

..code-block:: pascal

    TPA.offset(point(5, 5));

*)
procedure TPointArray.offset(p: TPoint);
begin
  offsetTPA(self, p);
end;

(*
TPointArray.sortQuick
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortQuick(const arr : TIntegerArray; const iLo, iHi : Integer; const sortUp : Boolean);

Used to QuickSort the TPointArray.  PS: Using the TIntegerArray arr to sort.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortQuick(13, 37, True);

*)
procedure TPointArray.sortQuick(var arr : TIntegerArray; const iLo, iHi : Integer; const sortUp : Boolean);
begin
  quickTPASort(arr, self, iLo, iHi, sortUp);
end;

(*
TPointArray.sortByXValue
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortByXValue(const lowToHigh : Boolean);

Sorts the TPA from lowest X to highest X or highest X to lowest X, depending on lowToHigh

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortByXValue(True);

*)
procedure TPointArray.sortByXValue(const lowToHigh : Boolean);
begin
  sortTPAByX(self, lowToHigh);
end;

(*
TPointArray.sortByYValue
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortByYValue(const lowToHigh : Boolean);

Sorts the TPA from lowest Y to highest Y or highest Y to lowest Y, depending on lowToHigh

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortByYValue(True);

*)
procedure TPointArray.sortByYValue(const lowToHigh : Boolean);
begin
  sortTPAByY(self, lowToHigh);
end;

(*
TPointArray.sortFromPoint
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.sortFromPoint(const P : TPoint);

Sorts the TPA from a point

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.sortFromPoint(P);

*)
procedure TPointArray.sortFromPoint(const P : TPoint);
begin
  sortTPAFrom(self, P);
end;

(*
TPointArray.filterPointsBox
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.filterPointsBox(const W, H : Integer);

Leaves one point per box with side lengths W and H to the TPA.  Lookup RAaSTPAEx for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.filterPointsBox(13, 37);

*)
procedure TPointArray.filterPointsBox(const W, H : Integer);
begin
  RAaSTPAEx(self, W, H);
end;

(*
TPointArray.filterPointsBox: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.filterPointsBox(const D : Integer); overload;

Leaves one point per box with side lengths D to the TPA.  Lookup RAaSTPA for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.filterPointsBox(1337);

*)
procedure TPointArray.filterPointsBox(const D : Integer); overload;
begin
  RAaSTPA(self, D);
end;

(*
TPointArray.excludePointsCircle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.excludePointsCircle(const startD, endD, minRadius, maxRadius : Extended; const mX, mY : Integer);

Removes the points that are in the TPointArray Points that are not within the
 degrees SD (Strat Degrees) and ED (End Degrees)  and
 the radius’ MinR (Min Radius) and MaxR (Max Radius)  from
 the origin Mx and My.  Lookup FilterPointsPie for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.excludePointsCircle(13.0, 37.0, 13.0, 37.0, 13, 37);

*)
procedure TPointArray.excludePointsCircle(const startD, endD, minRadius, maxRadius : Extended; const mX, mY : Integer);
begin
  filterPointsPie(self, startD, endD, minRadius, maxRadius, mX, mY);
end;

(*
TPointArray.excludePointsLine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.excludePointsLine(const angle : Extended; const length, mX, mY : Integer);

Removes the points in the TPointArray Points that are not on the line defined  by
 angle, length and center.  Lookup FilterPointsLine for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.excludePointsLine(13.0, 13, 33, 37);

*)
procedure TPointArray.excludePointsLine(const angle : Extended; const length, mX, mY : Integer);
begin
  filterPointsLine(self, angle, length, mX, mY);
end;

(*
TPointArray.excludePointsDist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPointArray.excludePointsDist(const minD, maxD : Extended; const mX, mY : Integer);

Removes the points that don't have a dist between mindist/maxdist with (mx,my).
  Lookup FilterPointsDist for more information.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.excludePointsDist(13.0, 13, 33, 37);

*)
procedure TPointArray.excludePointsDist(const minD, maxD : Extended; const mX, mY : Integer);
begin
  filterPointsDist(self, minD, maxD, mX, mY);
end;

(*
TPointArray.findText
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.findText(const height : Integer; const searchTPA : TPointArray; var matches : TPointArray): Boolean;

Returns True if the text TPA is found within TPointArray.  Also returns the matching points in the variable matches.

.. note::

    by Zyt3x

Example:

.. code-block:: pascal

    TPA.findText(13.0, 13, 33, 37);

*)
function TPointArray.findTextIn(const height : Integer; const searchTPA : TPointArray; var matches : TPointArray): Boolean;
begin
  Result := FindTextTPAInTPA(height, searchTPA, self, matches);
end;

(*
TPointArray.split
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.split(w, h: integer): T2DPointArray;

Splits the TPointArray into a 2D array of boxes w by h.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    ATPA := TPA.split(5, 3);

*)
function TPointArray.split(w, h: integer): T2DPointArray;
begin
  result := splitTPAEx(self, w, h);
end;

(*
TPointArray.split overload
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.split(const dist: integer): T2DPointArray;

Splits the TPointArray into a 2D array of boxes dist by dist.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    ATPA := TPA.split(4);

*)
function TPointArray.split(const dist: integer): T2DPointArray; overload;
begin
  result := splitTPA(self, dist);
end;

(*
TPointArray.clearTPAFrom
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.clearTPAFrom(const tpa: TPointArray): TPointArray;

Removes the points in 'tpa' that are in the TPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    filteredTPA := TPA.clearTPAFrom(clearTPA);
*)
function TPointArray.clearTPAFrom(const tpa: TPointArray): TPointArray;
begin
  result := clearTPAFromTPA(self, tpa);
end;

(*
T2DPointArray.merge
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.merge(): TPointArray;

Merges the T2DPointArray into a TPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    TPA := ATPA.merge();

*)
function T2DPointArray.merge(): TPointArray;
begin
  result := mergeATPA(self);
end;

(*
T2DPointArray.merge
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.getTextATPA(const maxSpacing: integer; const font: string): string;

Returns the string of font found inthe T2DPointArray.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    txt := ATPA.getTextATPA();

*)
function T2DPointArray.getTextInATPA(const maxSpacing: integer; const font: string): string;
begin
  result := getTextATPA(self, maxSpacing, font);
end;

(*
T2DPointArray.sortFromFirstPoint
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.sortFromFirstPoint(const sortFrom: TPoint);

Sorts the atpa from the desired TPoint.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.sortFromFirstPoint(point(250, 250));

*)
procedure T2DPointArray.sortFromFirstPoint(const sortFrom: TPoint);
begin
  sortATPAFromFirstPoint(self, sortFrom);
end;

(*
T2DPointArray.sortSize
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.sortSize(const bigFirst: boolean = true);

Sorts the atpa from largest to smallest if bigFirst is true or smallest to
largest if BigFirst is false, if sorting from bigFirst the parameter is optional.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.sortSize; // sort the atpa from highest to lowest
    atpa.sortSize(false) // sort the atpa from lowest to highest

*)
procedure T2DPointArray.sortSize(const bigFirst: boolean = true);
begin
  sortATPASize(self, bigFirst);
end;

(*
T2DPointArray.sortFromSize
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure T2DPointArray.sortFromSize(const fromSize: integer; const closestFirst: boolean);

Sorts the T2DPointArray from Size by the closest first if CloseFirst is true.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    atpa.sortFromSize(400, true);

*)
procedure T2DPointArray.sortFromSize(const fromSize: integer; const closestFirst: boolean);
begin
  sortATPAFromSize(self, fromSize, closestFirst);
end;

(*
T2DPointArray.getLength
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DPointArray.getLength: integer;

Returns the length of the T2DPointArray.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    l := atpa.getLength;

*)
function T2DPointArray.getLength: integer;
begin
  result := length(self);
end;

(*
TPointArray.getLength
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPointArray.getLength: integer;

Returns the length of the TPointArray.

.. note::

    by Ollybest

Example:

.. code-block:: pascal

    l := tpa.getLength;

*)
function TPointArray.getLength: integer;
begin
  result := length(self);
end;
