(*
Color
=====

The color type holds all the functions and types that can be used for easy color
finding, comparing or manupilation.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/color.simba>`_.

*)

{$f-}

(*
type TColorSettings
~~~~~~~~~~~~~~~~~~~

A record that provides easy access to the Simba CTS settings.
*)
type
  TColorSettings = record
    CTS: Integer;
    modifier: record
      hue, saturation, sensitivity: Extended;
    end;
  end;

(*
colorSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function colorSetting(_CTS:Integer): TColorSettings;

Creates and returns a colorSetting record with the given CTS method.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findColorTolerance(x, y, $FF0000, MSX1, MSY1, MSX2, MSY2, 10, colorSetting(0))) then
*)
function colorSetting(_CTS:Integer): TColorSettings;
var
  cs: TColorSettings;
begin
  cs.CTS := _CTS;
  Result := cs;
end;

(*
colorSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function colorSetting(_CTS:Integer): TColorSettings;

Creates and returns a colorSetting record with the given CTS method and the CTS 2 modifiers.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findColorTolerance(x, y, $DACE11, MSX1, MSY1, MSX2, MSY2, 10, colorSetting(2, 0.20, 0.80))) then
*)
function colorSetting(_CTS:Integer;  _hueModifier, _saturationModifier: Extended): TColorSettings; overload;
var
  cs: TColorSettings;
begin
  cs.create(_CTS, _hueModifier, _saturationModifier);
  Result := cs;
end;

(*
colorSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function colorSetting(_CTS:Integer): TColorSettings;

Creates and returns a colorSetting record with the given CTS method and the CTS 3 modifier.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findColorTolerance(x, y, $DACE11, MSX1, MSY1, MSX2, MSY2, 10, colorSetting(2, 10))) then
*)
function colorSetting(_CTS:Integer; _sensitivityModifier: Extended): TColorSettings; overload;
var
  cs: TColorSettings;
begin
  cs.create(_CTS, _sensitivityModifier);
  Result := cs;
end;

(*
TColorSettings.create
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.create(_CTS: Integer; _hueModifier, _saturationModifier: Extended);

Creates and colorSetting record with the given CTS method and the CTS 2 modifiers.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.create(2, 0.45. 0.90);
    if(findColorTolerance(x, y, $DACE11, MSX1, MSY1, MSX2, MSY2, 10, goblinCS)) then
*)
procedure TColorSettings.create(_CTS: Integer; _hueModifier, _saturationModifier: Extended);
begin
  Self.CTS := _CTS;
  Self.modifier.hue := _hueModifier;
  Self.modifier.saturation := _saturationModifier;
end;

(*
TColorSettings.create
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.create(_CTS: Integer; _sensitivityModifier: Extended);

Creates and ColorSetting record with the given CTS method and the CTS 3 modifier.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    chickenCS.create(3, 20);
    if(findColorTolerance(x, y, $FFFFFF, MSX1, MSY1, MSX2, MSY2, 15, chickenCS)) then
*)
procedure TColorSettings.create(_CTS: Integer; _sensitivityModifier: Extended); overload;
begin
  Self.CTS := _CTS;
  Self.modifier.sensitivity := _sensitivityModifier;
end;

(*
TColorSettings.retrieve
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.retrieve();

Gets the current CTS settings used by simba, and stores them into the record.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    restoreCS.retrieve();
    SetColorToleranceSpeed(5);
    a := findColorTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10);
    restoreCS.apply();
*)
procedure TColorSettings.retrieve();
begin
  Self.CTS := GetToleranceSpeed();
  Self.modifier.sensitivity := GetToleranceSpeed3Modifier();
  GetToleranceSpeed2Modifiers(Self.modifier.hue, Self.modifier.saturation);
end;

(*
TColorSettings.retrieve
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.apply();

Applies the CTS settings from the record to the simba client.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if (findColorTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10)) then
*)
procedure TColorSettings.apply();
begin
  try
    SetColorToleranceSpeed(Self.CTS);
    SetToleranceSpeed2Modifiers(Self.modifier.hue, Self.modifier.saturation);
    SetToleranceSpeed3Modifier(Self.modifier.sensitivity);
  except
    writeln('failed setting CTS');
  end;
end;

(*
findColorTolerance; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorTolerance(var x, y: Integer; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if (findColorTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10)) then
*)
function findColorTolerance(var x, y: Integer; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColorTolerance(x, y, color, searchBox, tol);
  cs.apply();
end;

(*
findColorsTolerance; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorsTolerance(var points: TPointArray; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if (findColorsTolerance(tpa, 5811341, MSX1, MSY1, MSX2, MSY2, 10)) then
*)
function findColorsTolerance(var points: TPointArray; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColorsTolerance(points, color, searchBox, tol);
  cs.apply();
end;

(*
findColorSpiralTolerance; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorSpiralTolerance(var x, y: Integer; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if (findColorSpiralTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10)) then
*)
function findColorSpiralTolerance(var x, y: Integer; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColorSpiralTolerance(x, y, color, searchBox, tol);
  cs.apply();
end;

(*
findColorsSpiralTolerance; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorsSpiralTolerance(x, y: Integer; var points: TPointArray; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    - by Janilabo
    - Last Updated: 20 April 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if (findColorsSpiralTolerance(x, y, tpa, 5811341, MSX1, MSY1, MSX2, MSY2, 10)) then
*)
function findColorsSpiralTolerance(x, y: Integer; var points: TPointArray; color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColorsSpiralTolerance(x, y, points, color, searchBox, tol);
  cs.apply();
end;

(*
countColorTolerance; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function countColorTolerance(color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): integer; overload;

Calls Simba's countColorTolerance with an additional color settings parameter.

.. note::

    - by Janilabo
    - Last Updated: 30 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (countColorTolerance(color, mainscreen.getBounds(), tol, demonCS) > 20) then
*)
function countColorTolerance(color: integer; searchBox: TBox; tol: Integer; settings: TColorSettings): integer; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := countColorTolerance(color, searchBox, tol);
  cs.apply();
end;

(*
waitCountColor
~~~~~~~~~~~~~~

.. code-block:: pascal

    function waitCountColor(color, tol: integer; area: TBox; waitTime, minCount: integer): boolean;

Counts the color until waitTime is reached, if the color count is higher then
minCount will exit and result true.

.. note::

    - by Thomas
    - Last Updated: 9 October by Thomas

Example:

.. code-block:: pascal

     // would wait until the color count is over 50 or until 2000ms has passed.
     waitCountColor(clBlack, 5, mainScreen.getBounds(), 2000, 50);
*)
function waitCountColor(color, tol: integer; area: TBox; waitTime, minCount: integer): boolean;
var
  timeOut: TCountDown;
begin
  timeOut.setTime(waitTime);

  repeat
    result := (countColorTolerance(color, area, tol) > minCount);

    if (not result) then
      wait(10 + random(50));
  until result or timeOut.isFinished();
end; 

(*
findBitmapTolerance; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapTolerance(const bmp: integer; var x, y: integer; const tolerance: integer; settings: TColorSettings): boolean; overload;

Calls findBitmapTolerance with an additional color settings parameter.

.. note::

    - by Olly
    - Last Updated: 19 May 2014 by Olly

Example:

.. code-block:: pascal


*)
function findBitmapTolerance(const bmp: integer; var x, y: integer; const tolerance: integer; settings: TColorSettings): boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  result := findBitmapTolerance(bmp, x, y, tolerance);
  cs.apply();
end;
(*
waitColorCountRange
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function waitColorCountRange(color, tol: integer; area: TBox; waitTime, minCount: integer; maxCount: integer = maxInt): boolean;

Counts the color until waitTime is reached, if the color count is within range of
minCount and maxCount will exit and result true, by default maxCount is set to
maxInt, but can be changed.

.. note::

    - by Ollybest
    - Last Updated: 31 May 2013 by Ollybest

Example:

.. code-block:: pascal

     // would wait until the color count is between 50..150 or until 2000ms has passed.
     waitColorRange(clBlack, 5, mainScreen.getBounds(), 2000, 50, 150);

     // would wait until the color count is over 50, or until 5000ms has passed.
     waitColorRange(clBlack, 5, mainScreen.getBounds(), 5000, 50);

*)
function waitColorCountRange(color, tol: integer; area: TBox; waitTime, minCount: integer; maxCount: integer = maxInt): boolean;
var
  c: integer;
  timeOut : LongWord;
begin
  timeOut := getSystemTime() + waitTime;
  result := false;

  while (timeOut > getSystemTime()) do
  begin
    c := countColorTolerance(color, area, tol);

    if inRange(c, minCount, maxCount) then
      exit(true);

    wait(15 + random(40));
  end;
end;

(*
waitColorCountRange: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function waitColorCountRange(color, tol: integer; area: TBox; waitTime, minCount: integer; maxCount: integer = maxInt): boolean;

Same as waitColorCountRange but with an additional color settings parameter.

.. note::

    - by Ollybest
    - Last Updated: 31 May 2013 by Ollybest

Example:

.. code-block:: pascal

     waitColorRange(clBlack, 5, myCSSettings, mainScreen.getBounds(), 2000, 50, 150);

*)
function waitColorCountRange(color, tol: integer; settings: TColorSettings; area: TBox; waitTime, minCount: integer; maxCount: integer = maxInt): boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();

  result := waitColorCountRange(color, tol, area, waitTime, minCount, maxCount);

  cs.apply();
end;

(*
type TColorData
~~~~~~~~~~~~~~~

A record that stores the colors, tolerances, and modifiers of a color

  var
  col: TColorData;

  begin
    col.color := 1501044;
    col.tolerance := 50;
    col.settings.cts := 2;
    col.settings.modifier.hue := 1.11;
    col.settings.modifier.sat := 0.05;

    writeln(col);
  end;
*)

type
  TColorData = record
    color, tolerance: integer;
    settings: TColorSettings;
 end;

(*
type T2DColorData
~~~~~~~~~~~~~~~~~

A record that stores the colors, tolerances, and modifiers of an array of color

  var
  cols: T2DColorData;

  begin
    setLength(cols, 2);

    cols[0].color := 255;
    cols[0].settings.modifier.hue := 0.00;
    cols[0].settings.modifier.sat := 1.12;

    cols[1].color := 144455;
    cols[1].tolerance := 50;
    cols[1].settings.cts := 1;

    writeln(cols);
  end.
*)
type
  T2DColorData = array of TColorData;

(*
T2DColorData.gatherIn
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DColorData.gatherIn(var tpa: TPointArray; xs, ys, xe, ye: integer): boolean;

Gathers the colors in the T2DColorData in the area xs, ys, xe, ye and merges
all into the TPointArray 'tpa'.

.. note::

    - by Olly
    - Last Updated: 22 January 2014 by Olly

Example:

.. code-block:: pascal

     if (cols.gatherIn(tpa, 100, 100, 200, 200)) then
       writeln('woo');
*)
function T2DColorData.gatherIn(var tpa: TPointArray; xs, ys, xe, ye: integer): boolean;
var
  h, i: integer;
  atpa: T2DPointArray;
begin
  h := high(self);

  if (h < 0) then
    exit(false);

  setLength(atpa, h + 1);

  for i := 0 to h do
    findColorsTolerance(atpa[i], self[i].color, intToBox(xs, ys, xe, ye), self[i].tolerance, self[i].settings);

  tpa := mergeATPA(atpa);
  clearDoubleTPA(tpa);

  result := (length(tpa) > 0);
end;

(*
T2DColorData.gatherIn; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DColorData.gatherIn(var tpa: TPointArray; searchArea: TBox): boolean; overload;

Overloaded function, accepts a TBox parameter rather than xs, ys, xe, ye paramters.

.. note::

    - by Olly
    - Last Updated: 22 January 2014 by Olly

Example:

.. code-block:: pascal

     if (cols.gatherIn(tpa, mainScreen.getBounds())) then
       writeln('woo');
*)
function T2DColorData.gatherIn(var tpa: TPointArray; searchArea: TBox): boolean; overload;
begin
  result := self.gatherIn(tpa, searchArea.x1, searchArea.y1, searchArea.x2, searchArea.y2);
end;

(*
TColorData.gatherIn
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TColorData.gatherIn(var tpa: TPointArray; xs, ys, xe, ye: integer): boolean;

Gathers the TColorData in the area xs, ys, xe, ye.

.. note::

    - by Olly
    - Last Updated: 22 January 2014 by Olly

Example:

.. code-block:: pascal

     if (cols.gatherIn(tpa, 100, 100, 200, 200)) then
       writeln('woo');
*)
function TColorData.gatherIn(var tpa: TPointArray; xs, ys, xe, ye: integer): boolean;
begin
  result := findColorsTolerance(tpa, self.color, intToBox(xs, ys, xe, ye), self.tolerance, self.settings);
end;

(*
TColorData.gatherIn; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TColorData.gatherIn(var tpa: TPointArray; area: TBox): boolean; overload;

Overloaded function accepts a TBox parameter rather than xs, ys, xe, ye parameters.

.. note::

    - by Olly
    - Last Updated: 22 January 2014 by Olly

Example:

.. code-block:: pascal

     if (cols.gatherIn(tpa, 100, 100, 200, 200)) then
       writeln('woo');
*)
function TColorData.gatherIn(var tpa: TPointArray; area: TBox): boolean; overload;
begin
  result := self.gatherIn(tpa, area.x1, area.y1, area.x2, area.y2);
end;

(*
getCTS2Color
~~~~~~~~~~~~

.. code-block:: pascal

    function getCTS2Color(cols: TIntegerArray): TColorData;

Returns a CTS2 color as a TColorData type, from a TIntegerArray input of
individual colors.

.. note::

    - by The Mayor, based on ACA code
    - Last Updated: 12 August 2015 by The Mayor

Example:

.. code-block:: pascal

    var
      objCol: TColorData;
      TPA: TPointArray;
    begin
      objCol := getCTS2Color([14067346, 15838606, 16170148, 16368555]);

      if objCol.gatherIn(TPA, mainScreen.getBounds()) then
      begin
        // etc
      end;
    end;

*)
function getCTS2Color(cols: TIntegerArray): TColorData;
  type TColorRec = record
    h, s, l: extended;
    r, g, b: integer;
  end;

  function __getHue(cols: TIntegerArray; out minU, maxU: extended): extended;
  var
    minD, maxD, h, s, l: extended;
    i: integer;
  begin
    result := -1;
    minU := 100; minD := 100;
    maxU := -1; maxD := -1;
    for i := high(cols) downto 0 do
    begin
      colorToHSL(cols[i], h, s, l);

      if (h < 50) then
      begin
        if (h < minU) then minU := h;
        if (h > maxU) then maxU := h;
      end else
      begin
        if (h < minD) then minD := h;
        if (h > maxD) then maxD := h;
      end;
    end;

    if ((maxU >= 0) <> (maxD >= 0)) then
    begin
      if (maxU >= 0) then
        result := (minU + maxU) / 2
      else begin
        result := (minD + maxD) / 2;
        minU := minD; maxU := maxD;
      end;
    end else
    begin
      if ((100 - maxD) + minU) < (maxD - maxU) then
        minU := minD
      else maxU := maxD;
        result := (minU + maxU) / 2;
      if (minU > maxU) then result -= 50;
    end;

    result := result + 100;
    while (result >= 100) do result -= 100;
  end;

var
  i: Integer;
  h, s, l, minH, maxH: extended;
  minC, maxC, tmpCol: TColorRec;
begin
  result := [0, 0, [0, [0, 0, 0]]];

  if (length(cols) > 0) then
  begin
    colorToRGB(cols[0], minC.r, minC.g, minC.b);
    colorToHSL(cols[0], minC.h, minC.s, minC.l);
    maxC := minC;

    for i := 0 to high(cols) do
    begin
      colorToRGB(cols[i], tmpCol.r, tmpCol.g, tmpCol.b);
      colorToHSL(cols[i], tmpCol.h, tmpCol.s, tmpCol.l);
      if (tmpCol.r < minC.r) then minC.r := tmpCol.r;
      if (tmpCol.r > maxC.r) then maxC.r := tmpCol.r;
      if (tmpCol.g < minC.g) then minC.g := tmpCol.g;
      if (tmpCol.g > maxC.g) then maxC.g := tmpCol.g;
      if (tmpCol.b < minC.b) then minC.b := tmpCol.b;
      if (tmpCol.b > maxC.b) then maxC.b := tmpCol.b;
      if (tmpCol.h < minC.h) then minC.h := tmpCol.h;
      if (tmpCol.h > maxC.h) then maxC.h := tmpCol.h;
      if (tmpCol.s < minC.s) then minC.s := tmpCol.s;
      if (tmpCol.s > maxC.s) then maxC.s := tmpCol.s;
      if (tmpCol.l < minC.l) then minC.l := tmpCol.l;
      if (tmpCol.l > maxC.l) then maxC.l := tmpCol.l;
    end;

    h := __getHue(cols, minH, maxH);
    s := (minC.s + maxC.s) / 2;
    l := (minC.l + maxC.l) / 2;

    result.color := HSLToColor(h, s, l);
    colorToHSL(result.color, h, s, l);
    result.tolerance := ceil(maxE(maxC.l - l, l - minC.l));
    result.settings.CTS := 2;

    if (result.tolerance > 0) then
    begin
      result.settings.modifier.hue := maxE(minE(abs(minH - h), minH + 100 - h), minE(abs(maxH - h), maxH + 100 - h)) / result.tolerance;
      result.settings.modifier.saturation  := maxE(maxC.s - s, s - minC.s) / result.tolerance;
    end;
  end;
end;



{$f+}

