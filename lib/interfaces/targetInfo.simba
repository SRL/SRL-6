(*
Target Info
===========

The Target Info file holds functions and procedures that are used to interact with the runescape Target Info interface.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/TargetInfo.simba>`_.

*)
{$f-}
(*
Consts, Types, Vars
~~~~~~~~~~~~~~~~~~~

The following constants, types and variables are used throughout the targetInfo methods.


**type TRStargetInfo**

.. code-block:: pascal

    type
      TRStargetInfo = type TRSInterface;

A type that stores the Target Info interface properties.
*)
type
  TRStargetInfo = type TRSInterface;

(*
**var targetInfo**

.. code-block:: pascal

    var
      targetInfo: TRStargetInfo;

A variable through which scripters can access the TRSTargetInfo type methods.

*)
var
  targetInfo: TRSTargetInfo;

(*
TRSTargetInfo methods
~~~~~~~~~~~~~~~~~~~~~

The following methods should be called through the **targetInfo** variable.

Example:

.. code-block:: pascal

    if targetInfo.isOpen() then
      writeln('TargetInfo screen is open!');
*)

{*
__init
------

.. code-block:: pascal

    procedure TRStargetInfo.__init();

Initializes the TRStargetInfo.

.. note::

    - by Thomas

Example:

.. code-block:: pascal

    targetInfo.__init();

*}
{$IFNDEF CODEINSIGHT}
procedure TRSTargetInfo.__init();
begin
  with (self) do
  begin
    name := 'Target Info';
    ID := ID_INTERFACE_TARGETINFO;
    parentID := -1;
    static := false;
  end;
end;
{$ENDIF}

{*
__find
------

.. code-block:: pascal

    function TRSTargetInfo.__find(): boolean;

Returns true if the Target Info popup is detected and its bounds are set.
Scripters should use targetInfo.isOpen() below.

.. note::

    - by Thomas

Example:

.. code-block:: pascal

    if targetInfo.__find() then
      writeln('The Target Info popup is open, and the bounds are set!');
*}
{$IFNDEF CODEINSIGHT}
function TRSTargetInfo.__find(): boolean;
var
  b: TBox;
  i: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  color: TColorData := [2630170, 6, [2, [0.15, 1.36, 0.00]]];
begin
  color.gatherIn(TPA, mainScreen.getBounds());

  if length(TPA) < 200 then
  begin
    print('TRSTargetInfo.__find(): Didn''t find enough color', TDebug.WARNING);
    exit(false);
  end;

  ATPA := TPA.cluster(4);
  ATPA.filterBetween(0, 200);
  ATPA.sortBySize(true);

  for i := 0 to high(ATPA) do
  begin
    b := ATPA[i].getBounds();
    if inRange(b.getHeight(), 25, 30) and b.getWidth() > 100 then
    begin
      self.setBounds(b);
      print('TRSTargetInfo.__find(): Result = ' + boolToStr(result));
      exit(true);
    end;
  end;
end;
{$ENDIF}

(*
isOpen
------

.. code-block:: pascal

    function TRSTargetInfo.isOpen(waitTime: integer = 0): boolean;

Returns true if the targetInfo is open. The optional **waitTime** parameter
*(default = 0)* is the maximum time (in milliseconds) it will keep looking.

.. note::

    - by Thomas


Example:

.. code-block:: pascal

    if targetInfo.isOpen() then
      writeln('It''s open!');

*)
function TRSTargetInfo.isOpen(waitTime: integer = 0): boolean;
var
  t: TCountDown;
begin
  t.setTime(waitTime);

  repeat
    if self.__find() then
    begin
      result := true;
      break();
    end;
  until t.isFinished();

  print('TRSTargetInfo.isOpen(): Result = ' + boolToStr(result));
end;

(*
targetName
----------

.. code-block:: pascal

    function TRSTargetInfo.targetName(): string;

Returns the name of the current target, if the targetInfo is open.

.. note::

    - by Thomas

Example:

.. code-block:: pascal

    writeln(targetInfo.targetName());

*)

function TRSTargetInfo.targetName(): string;
var
  b: TBox;
begin
  if (not self.__find()) then
    exit();

  b := self.getBounds();
  b.edit(17, 1, -60, -12);

  result := Tesseract_GetText(b, TESS_FILTER_CHATBOX);
  print('TRSTargetInfo.targetName(): ' + result);
end;



{*
getPercent
----------

.. code-block:: pascal

    function TRSActionBar.getPercent(): byte;

Returns the percentage of Health left on the target.

.. note::

    - by Thomas

Example:

.. code-block:: pascal

    TargetInfo.getPercent();
*}
function TRSTargetInfo.getPercent(): byte;
const
  BACKGROUND_COLOR = 3088905;
var
  p: TPoint;
begin
  p := self.getCenterPoint();
  p.offset([-50, 13]);

  for result := 1 to 99 do
    if (getColor(p.x + result, p.y) = BACKGROUND_COLOR) then
      break();
end;

begin
  targetInfo.__init();
end;

{$f+}
