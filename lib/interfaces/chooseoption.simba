(*
Choose Option
=============

The text file holds functions and procedures that are used in the runescape choose option manu.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/chooseoption.simba>`_.

*)

{$f-}

(*
Consts, Types, Vars
~~~~~~~~~~~~~~~~~~~

The following constants, types and variables are used throughout the chooseOption methods.

**const Tesseract Filter**

.. code-block:: pascal

  const
    TESS_FILTER_CHOOSE_OPTION: TTesseractFilter = [4, 4, [False, 15, TM_Mean]];

*)
const
  TESS_FILTER_CHOOSE_OPTION: TTesseractFilter = [4, 4, [False, 15, TM_Mean]];

(*
**type TOption**

.. code-block:: pascal

    type
      TOption = record
        bounds: TBox;
        str: string;
      end;

A type that stores the bounds and string of an option in the chooseOption menu.

*)
type
  TOption = record
    bounds: TBox;
    str: string;
  end;

(*
**type TOptionArray**

.. code-block:: pascal

    type
      TOptionArray = array of TOption;

An array of the TOption type.

*)
type
  TOptionArray = array of TOption;

(*
**type TRSChooseOption**

.. code-block:: pascal

    type
      TRSChooseOption = type TRSInterface;

A type that stores the chooseOption interface properties.

*)
type
  TRSChooseOption = type TRSInterface;

(*
**var chooseOption**

.. code-block:: pascal

    var
      chooseOption: TRSChooseOption;

A variable through which scripters can access the TRSChooseOption type methods.

*)
var
  chooseOption: TRSChooseOption;

(*
TRSChooseOption methods
~~~~~~~~~~~~~~~~~~~~~~~

The following methods should be called through the **chooseOption** variable.

Example:

.. code-block:: pascal

    if chooseOption.isOpen() then
      writeln('Choose option menu is open!');
*)

{*
__find
------

.. code-block:: pascal

    function TRSChooseOption.__find(): boolean;

Returns true if the chooseOption interface is detected and its bounds are set.
Scripters should use chooseOption.isOpen() below.

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if chooseOption.__find() then
      writeln('The chooseOption menu is open, and the bounds are set!');
*}
{$IFNDEF CODEINSIGHT}
function TRSChooseOption.__find(): boolean;
const
  BORDER_COLORS = [197636, 3618615, 3748386];
  CORNER_COLOR = 2368548;
var
  tpa, tpaBorder: TPointArray;
  atpaBorder: T2DPointArray;
  i, len: integer;
  bounds: TBox;
begin
  result := false;

  freeze();

  for i := 0 to high(BORDER_COLORS) do
    if (findColors(tpa, BORDER_COLORS[i], getClientBounds())) then
      appendTPA(tpaBorder, tpa);

  unfreeze();

  if (length(tpaBorder) < 1) then
    exit();

  atpaBorder := clusterTPAEx(tpaBorder, 2, 2);
  sortATPASize(atpaBorder, true);
  len := length(atpaBorder);

  for i := 0 to (len - 1) do
  begin
    bounds := getTPABounds(atpaBorder[i]);

    if (distance(bounds.x1, bounds.y1, bounds.x2, bounds.y2) < 100) then
      continue();

    if (getColor(bounds.x1, bounds.y1 - 1) = CORNER_COLOR) and (getColor(bounds.x2, bounds.y1 - 1) = CORNER_COLOR) then
    begin
      self.setBounds([bounds.x1 + 1, bounds.y1 + 1, bounds.x2 - 1, bounds.y2 - 1]); // decrease size to remove borders
      exit(true);
    end;
  end;
end;
{$ENDIF}

(*
isOpen
------

.. code-block:: pascal

    function TRSChooseOption.isOpen(waitTime: integer = 0): boolean;

Returns true if the chooseOption menu is open. The optional **waitTime** parameter
*(default = 0)* is the maximum time (in milliseconds) it will keep looking.

.. note::

    - by Olly
    - Last Modified: 14 May 2016 by Thomas

Example:

.. code-block:: pascal

    if chooseOption.isOpen(2000) then
      chooseOption.close();
*)
function TRSChooseOption.isOpen(waitTime: integer = 0): boolean;
var
  t: TCountDown;
begin
  result := self.__find();
  t.setTime(waitTime);
  while (not result) and (not t.isFinished()) do
  begin
    wait(20 + random(50));
    result := self.__find();
  end
end;

(*
close
-----

.. code-block:: pascal

    function TRSChooseOption.close(): boolean;

Returns true if the lodestone screen is successfully closed.

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if chooseOption.isOpen() then
      chooseOption.close();
*)
function TRSChooseOption.close(): boolean;
var
  left, wide: boolean;
  wid, hei: integer;
  p: TPoint;
  t: longWord;
begin
  result := false;

  if (not self.isOpen()) then
    exit(true);

  getClientDimensions(wid, hei);

  left := (self.x1 > abs(self.x2 - wid));
  wide := ((self.y2 - self.y1) > 450);

  if (left) then
    p.x := (self.x1 - randomRange(15, 65))
  else
    if (wide) then
      p.x := (self.x2 + 300 + randomRange(15, 65))
      else
        p.x := (self.x2 + randomRange(15, 65));

  p.y := (self.y1 + random((self.y2 - self.y1) + random(10)));

  mouse(p);

  t := (getSystemTime() + randomRange(2500, 3000));

  while (not result) and (t > getSystemTime()) do
  begin
    wait(20 + random(50));
    result := (not self.isOpen());
  end;

  print('TRSChooseOption.close(): result = '+lowercase(boolToStr(result)), TDebug.SUB);
end;

(*
getOptions
----------

.. code-block:: pascal

    function TRSChooseOption.getOptions(useTesseract: boolean = false; Filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION): TOptionArray;

Returns a TOptionArray of all the options present in the chooseOption menu. The
**useTesseract** parameter can be set to true *(default = false)* to use the
tesseract ocr to read the text. The scripter has the option of using a custom
TTesseractFilter **Filter** .

.. note::

    - by Olly
    - Last Modified: 4 July 2015 by Thomas

Example:

.. code-block:: pascal

    var
      opts: TOptionArray;
    begin
      opts := chooseOption.getOptions();

      if opts[0].str = 'Walk here' then
        mouseBox(opts[0].bounds, MOUSE_LEFT);
    end;
*)
function TRSChooseOption.getOptions(useTesseract: boolean = false; Filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION): TOptionArray;
var
  bmp, wid, hei, i, oldTarget, t: integer;
  tpa: TPointArray;
begin
  if (not self.isOpen()) then
    exit();

  oldTarget := getImageTarget();
  bmp := bitmapFromClient(self.getBounds());

  thresholdAdaptiveBitmap(bmp, 0, 255, false, TM_MinMax, 0);

  getBitmapSize(bmp, wid, hei);
  setLength(result, (hei div 16));

  if (length(result) < 1) then
    exit();

  try
    setTargetBitmap(bmp);

    for i := 0 to high(result) do
    begin
      result[i].bounds := [0, (i * 16) + 1, wid - 1, min((i * 16) + 16, hei -1)];
      if not useTesseract then
        result[i].str := getTextAtEx(result[i].bounds, 0, 5, 5, clRed, 0, UpCharsEx)
      else
        result[i].str := Tesseract_GetText(result[i].bounds, Filter);
      result[i].bounds.offset(point(self.x1, self.y1));  // offset so its back on the mainscreen
      result[i].bounds.shrink(1);
    end;
  except
    print('TRSChooseOption.getOptions(): Exception encountered', TDebug.ERROR);
  finally
    t := getImageTarget();
    setImageTarget(oldTarget);
    freeTarget(t);
    freeBitmap(bmp);
  end;
end;

(*
optionsExist
------------

.. code-block:: pascal

    function TRSChooseOption.optionsExist(options: TStringArray): boolean;

Returns true if any of the options in **options** exist in the chooseOption menu.

.. note::

    - by Olly
    - Last Modified: 16 February 2014 by Olly

Example:

.. code-block:: pascal

    if chooseOption.optionsExist(['alk here']) then
      writeln('the option walk here exists!');
*)
function TRSChooseOption.optionsExist(options: TStringArray): boolean;
var
  optionArr: TOptionArray;
  i, j: integer;
begin
  result := false;

  if (not self.isOpen()) then
    exit();

  optionArr := self.getOptions();

  for i := 0 to high(optionArr) do
    for j := 0 to high(options) do
      if (pos(options[j], optionArr[i].str) > 0) then
      begin
        print('TRSChooseOption.optionsExist(): Succesfully found option "'+options[j]+'" in "'+optionArr[i].str+'"', TDebug.SUB);
        exit(true);
      end;
end;

{*
__select
--------

.. code-block:: pascal

    function TRSChooseOption.__select(txt: TStringArray; mouseAction: integer; closeAfter: boolean; matchPercent: extended; waitTime: integer; useTesseract: boolean;  filter: TTesseractFilter): boolean;

Returns true if an option in **txt** is interacted with successfully. Scripters
should use one of the overload methods below instead.

    * **txt**          : An array of text you want to find in any of the options
    * **mouseAction**  : The mouse action to perform on the option (MOUSE_MOVE, MOUSE_LEFT, MOUSE_RIGHT, MOUSE_NONE)
    * **closeAfter**   : Close the menu if no options are found?
    * **matchPercent** : The min percentage that will we count as match. If not using
                         the stringmatch method set this to 1.00
    * **waitTime**     : Max time to wait for the chooseOption menu to appear
    * **useTesseract** : Use the tesseract ocr to find the text?
    * **filter**       : Tesseract filter

.. note::

    - by Olly
    - Last Modified: 6 August 2015 by The Mayor

Example:

.. code-block:: pascal

    chooseOption.__select(['alk', 'lk To'], MOUSE_LEFT, true, 1.00, 150, true);
*}
function TRSChooseOption.__select(txt: TStringArray; mouseAction: integer; closeAfter: boolean; matchPercent: extended; waitTime: integer; useTesseract: boolean;  filter: TTesseractFilter): boolean;
var
  optionArr: TOptionArray;
  l, i, j: integer;
  s: TStringArray;
  a: extended;
  b: TBox;
begin
  print('TRSChooseOption.__select():', TDebug.HEADER);

  if (not self.isOpen(waitTime)) then
  begin
    print('ChooseOption menu never appeared', TDebug.ERROR);
    print('TRSChooseOption.__select() result = false', TDebug.FOOTER);
    exit();
  end;

  optionArr := self.getOptions(useTesseract, filter);

  if (length(optionArr) > 0) then
  begin
    for i := 0 to high(optionArr) do
      s.append(optionArr[i].str);

    print('Options found: ' + toStr(s));

    for j := 0 to high(txt) do
      for i := 0 to high(optionArr) do
      begin
        if (matchPercent = 1.00) then // If we're not using stringmatch
          if (pos(txt[j], optionArr[i].str) > 0) then
          begin
            print('Found option "' + txt[j] + '" in "' + optionArr[i].str + '"');

            if (mouseAction <> MOUSE_NONE) then
              mouseBox(optionArr[i].bounds, mouseAction);

            result := true;
            break(2);
          end else
            continue;

        // If we're using string match
        a := stringMatch(optionArr[i].str, txt[j]);

        if (a >= matchPercent) then
        begin
          print('Found option "' + txt[j] + '" @ accuracy ' + floatToStr(a));

          if (mouseAction <> MOUSE_NONE) then
            mouseBox(optionArr[i].bounds, mouseAction);

          result := true;
          break(2);
        end;
     end;
  end else
    print('Failed to find any text matches');

  // Close the menu
  if closeAfter then self.close();
  print('TRSChooseOption.__select() result = ' + boolToStr(result), TDebug.FOOTER);
end;

(*
select
------

.. code-block:: pascal

    function TRSChooseOption.select(txt: TStringArray; waitTime: integer = 250; useTesseract: boolean = false; filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION): boolean; overload;

Returns true if an option in **txt** is interacted with successfully.

    * **txt**          : An array of text you want to find in any of the options
    * **waitTime**     : Max time to wait for the chooseOption menu to appear *(default = 250)*
    * **useTesseract** : Use the tesseract ocr to find the text? *(default = false)*
    * **filter**       : Tesseract filter *(default = TESS_FILTER_CHOOSE_OPTION)*

.. note::

    - by Olly
    - Last Modified: 12 September 2013 by Olly

Example:

.. code-block:: pascal

    chooseOption.select(['Walk here']);
    chooseOption.select(['Walk here'], 250, True); // To use tesseract
*)
function TRSChooseOption.select(txt: TStringArray; waitTime: integer = 250; useTesseract: boolean = false; filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION): boolean; overload;
begin
  result := self.__select(txt, MOUSE_LEFT, true, 1.00, waitTime, useTesseract, filter);
end;

(*
select (overload) 1
-------------------

.. code-block:: pascal

    function TRSChooseOption.select(txt: TStringArray; matchPercent: extended; waitTime: integer = 250): boolean; overload;

Returns true if an option in **txt** is interacted with successfully. This overload
uses the 'stringmatch' method.

    * **txt**          : An array of text you want to find in any of the options
    * **matchPercent** : Minimum percent which counts as a match
    * **waitTime**     : Max time to wait for the chooseOption menu to appear *(default = 250)*

.. note::

    - by Olly
    - Last Modified: 12 September 2013 by Olly

Example:

.. code-block:: pascal

    chooseOption.select(['Walk here'], 0.80); // If 80% of 'Walk here' matches
*)
function TRSChooseOption.select(txt: TStringArray; matchPercent: extended; waitTime: integer = 250): boolean; overload;
begin
  result := self.__select(txt, MOUSE_LEFT, true, matchPercent, waitTime, false, TESS_FILTER_CHOOSE_OPTION);
end;

(*
select (overload) 2
-------------------

.. code-block:: pascal

    function TRSChooseOption.select(txt: TStringArray; mouseAction: Integer; waitTime: Integer; useTesseract: Boolean;  filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION): boolean; overload;

Returns true if an option in **txt** is interacted with successfully. In this
overload method you can adjust the mouseAction, which is useful if 'hovering'
an option in the menu.


    * **txt**          : An array of text you want to find in any of the options
    * **mouseAction** : The mouse action to perform on the option (MOUSE_MOVE, MOUSE_LEFT, MOUSE_RIGHT, MOUSE_NONE)
    * **waitTime**    : Time to wait for chooseOption menu to appear
    * **useTesseract** : Use the tesseract ocr to find the text?
    * **filter**       : Tesseract filter *(default = TESS_FILTER_CHOOSE_OPTION)*

.. note::

    - by The Mayor
    - Last Modified: 4 July 2015 by The Mayor

Example:

.. code-block:: pascal

    chooseOption.select(['Bank'], MOUSE_MOVE, 300, false); // Will move the mouse to the option but not click
*)
function TRSChooseOption.select(txt: TStringArray; mouseAction, waitTime: Integer; useTesseract: Boolean;  filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION): boolean; overload;
begin
  result := self.__select(txt, mouseAction, false, 1.00, waitTime, useTesseract, filter);
end;

(*
debugOptions
------------

.. code-block:: pascal

   procedure TRSChooseOption.debugOptions(useTesseract: boolean = false; filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION);

Debugs all the found options.

    * **useTesseract** : Use the tesseract ocr to find the text? *(default = false)*
    * **filter**       : Tesseract filter *(default = TESS_FILTER_CHOOSE_OPTION)*

.. note::

    - by Olly
    - Last Modified: 11 Novemeber 2013 by Olly

Example:

.. code-block:: pascal

    chooseOption.debugOptions(); // To use the traditional getTextAt method

    var
      myFilter: TTesseractFilter;
    begin
      myFilter := [3, 3, [True, 30, TM_Mean]];
      chooseOption.debugOptions(true, myFilter); // To use a custom tesseract filter
    end;
*)
procedure TRSChooseOption.debugOptions(useTesseract: boolean = false; filter: TTesseractFilter = TESS_FILTER_CHOOSE_OPTION);
var
  i: integer;
  options: TOptionArray;
begin
  print('TRSChooseOption.debugOptions()', TDebug.HEADER);

  if self.isOpen() then
  begin
    options := self.getOptions(useTesseract);

    for i := 0 to high(options) do
      print(intToStr(i)+') '+options[i].str);
  end else
    print('Menu isn''t open, unable to debug options', TDebug.ERROR);

  print('TRSChooseOption.debugOptions()', TDebug.FOOTER);
end;

{$f+}
