(*
Lodestone
=========

The lodestone file holds functions and procedures that are used in the
Runescape lodestone-teleport screen.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/lodestone.simba>`_.

*)

{$f-}

(*
const Locations
~~~~~~~~~~~~~~~

All possible locations to teleport on the lodestone network.

    LOCATION_LUNAR_ISLE
    LOCATION_EAGLES_PEAK
    LOCATION_TIRANNWN
    LOCATION_FREMENNIK
    LOCATION_SEERS_VILLAGE
    LOCATION_ARDOUGNE
    LOCATION_YANILLE
    LOCATION_OOGLOG
    LOCATION_BURTHORPE
    LOCATION_CATHERBY
    LOCATION_TAVERLEY
    LOCATION_KARAMJA
    LOCATION_WILDERNESS
    LOCATION_EDGEVILLE
    LOCATION_FALADOR
    LOCATION_PORT_SARIM
    LOCATION_VARROCK
    LOCATION_DRAYNOR_VILLAGE
    LOCATION_LUMBRIDGE
    LOCATION_BANDIT_CAMP
    LOCATION_AL_KHARID
    LOCATION_CANIFIS
    LOCATION_ASHDALE
    LOCATION_PRIFDDINAS
    LOCATION_PREVIOUS


Example:

.. code-block:: pascal

    lodestoneScreen.teleportTo(LOCATION_LUNAR_ISLE);
*)
const
    LOCATION_LUNAR_ISLE      = 0;
    LOCATION_EAGLES_PEAK     = 1;
    LOCATION_TIRANNWN        = 2;
    LOCATION_FREMENNIK       = 3;
    LOCATION_SEERS_VILLAGE   = 4;
    LOCATION_ARDOUGNE        = 5;
    LOCATION_YANILLE         = 6;
    LOCATION_OOGLOG          = 7;
    LOCATION_BURTHORPE       = 8;
    LOCATION_CATHERBY        = 9;
    LOCATION_TAVERLEY       = 10;
    LOCATION_TRAVERLEY       = 10;
    LOCATION_KARAMJA         = 11;
    LOCATION_WILDERNESS      = 12;
    LOCATION_EDGEVILLE       = 13;
    LOCATION_FALADOR         = 14;
    LOCATION_PORT_SARIM      = 15;
    LOCATION_VARROCK         = 16;
    LOCATION_DRAYNOR_VILLAGE = 17;
    LOCATION_LUMBRIDGE       = 18;
    LOCATION_BANDIT_CAMP     = 19;
    LOCATION_AL_KHARID       = 20;
    LOCATION_CANIFIS         = 21;
    LOCATION_ASHDALE         = 22;
    LOCATION_PRIFDDINAS      = 23;
    LOCATION_PREVIOUS        = 1337;

(*
type TRSLodestoneScreen
~~~~~~~~~~~~~~~~~~~~~~~~

A type that stores the lodestone interface properties.
*)
type
  TRSLodestoneScreen = type TRSInterface;

(*
var lodestoneScreen
~~~~~~~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape lodestone interface.

Example:

.. code-block:: pascal

    if (lodestoneScreen.isOpen() then
      writeln('Lodestone screen is open!');
*)
var
  lodestoneScreen: TRSLodestoneScreen;

{*
__init
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure lodestoneScreen.__init();

Initializes the TRSLodestoneScreen. Internal method.

.. note::

    - by Olly
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    lodestoneScreen.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSLodestoneScreen.__init();
begin
  with (self) do
  begin
    name := 'RS Production Screen';
    ID := ID_INTERFACE_LODESTONE;
    parentID := -1;
    static := false;
  end;
end;
{$ENDIF}

(*
__find
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function lodestoneScreen.__find(): boolean;

Returns true if the lodestone screen is detected, and sets the bounds. Internal method used by isOpen.

.. note::

    - by Ashaman88
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    if (lodestoneScreen.__find()) then
      writeln('The lodestone Screen is open, and the bounds are set!');
*)
{$IFNDEF CODEINSIGHT}
function TRSLodestoneScreen.__find(): boolean;
const
  TOP_COLOR = 855595;    //red color behind lodestone
  MENU_LENGTH = 165;      //length of large red background
  MENU_OFFSET_COLOR = 5333103; //p2p offset color on map
  MENU_OFFSET_COLOR_FTP = 6250064;  //f2p offset color on map
var
  tpa : TPointArray;
  atpa : T2DPointArray;
  i, hh: integer;
  b: TBox;
begin
  result := false;

  if (not findColors(tpa, TOP_COLOR, getClientBounds())) then
    exit();

  atpa := tpa.cluster(5);
  hh := high(atpa);

  for i := 0 to hh do
    if (length(atpa[i]) = MENU_LENGTH) then
    begin
      b := getTPABounds(atpa[i]);
      if (getColor(b.x2, b.y2 + 5) = MENU_OFFSET_COLOR) or (getColor(b.x2, b.y2 + 5) = MENU_OFFSET_COLOR_FTP) then
      begin
        self.setBounds([b.x1 - 13, b.y1 - 14, b.x2 + 304, b.y2 + 297]);
        exit(true);
      end;
    end;
end;
{$ENDIF}

(*
isOpen
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function lodestoneScreen.isOpen(waitTime: integer = 0): boolean;

Returns true if the lodestone sceen is open, has a optional parameter 'waitTime'
which is the max time of how long we will wait for the screen to appear. The default time is 0.

.. note::

    - by Olly
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    if (lodestoneScreen.isOpen() then
      writeln('Lodestone screen is open!');
*)
function TRSLodestoneScreen.isOpen(waitTime: integer = 0): boolean;
var
  cts: integer;
  t : LongWord;
begin
  t := (getSystemTime() + waitTime);

  cts := getToleranceSpeed();
  setColorToleranceSpeed(1);

  repeat
    result := self.__find();
    wait(20 + random(20));
  until (getSystemTime() >= t) or (result);

  setColorToleranceSpeed(cts);
end;

(*
close
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function lodestoneScreen.close(): boolean;

Closes the lodestone screen.

.. note::

    - by Olly
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    if lodestoneScreen.close() then
      writeln('The lodestone screen has been closed.');
*)
function TRSLodestoneScreen.close(): boolean;
var
  t: longWord;
begin
  result := false;
  t := (getSystemTime() + randomRange(6000, 8000));

  if (self.isOpen()) then
  begin
    mouseCircle(self.x2 - 4, self.y1 + 8, 4, MOUSE_LEFT);

    while (t > getSystemTime()) do
    begin
      if (not self.isOpen()) then
      begin
        result := true;
        break;
      end;

      wait(50 + random(50));
    end;
  end else
    result := true;

  if (result) then
    print('TRSLodestoneScreen.close(): Closed lodestone screen', TDebug.SUB)
  else
    print('TRSLodestoneScreen.close(): Failed to close lodestone screen', TDebug.WARNING);
end;

{*
_isLocationVaild
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function lodestoneScreen._isLocationVaild(location: integer): boolean;

Returns true if the location is vaild. Internal method used by _getTeleportBox.

.. note::

    - by Olly
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    if (lodestoneScreen._isLocationVaild(LOCATION_LUNAR_ISLE)) then
      writeln('vaild.');
*}
function TRSLodestoneScreen._isLocationVaild(location: integer): boolean;
begin
  result := inRange(location, LOCATION_LUNAR_ISLE, LOCATION_PRIFDDINAS);

  if (not result) then
    print('TRSLodestoneScreen._isLocationVaild(): Location isn''t vaild!');
end;

{*
_getTeleportBox
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function lodestoneScreen._getTeleportBox(location: integer): TBox;

Returns the TBox of the location. Used by __isLocked and teleportTo.

.. note::

    - by Olly
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    b := lodestoneScreen._getTeleportBox(LOCATION_CANIFIS);
*}
function TRSLodestoneScreen._getTeleportBox(location: integer): TBox;
const
  pnts: TPointArray = [[26, 48], [94, 117], [71, 194], [183, 53], [165, 100], [156, 144], [147, 209], [139, 262], [239, 87], [198, 130], [230, 124], [198, 198], [298, 60], [281, 99], [261, 146], [262, 188], [336, 131], [299, 162], [310, 199], [310, 243], [351, 193], [393, 105], [84, 298], [51, 139]];
var
  p: TPoint;
begin
  result := [-1, -1, -1, -1];

  if (self._isLocationVaild(location)) then
  begin
    p := pnts[location];
    p.offset([self.x1, self.y1]);

    result := [p.x -8, p.y -8, p.x +8, p.y +8];
  end;
end;

(*
_isLocked
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function lodestoneScreen._isLocked(location: integer): boolean;

Checks if the lodestone is unlocked (actually locked or members only). Used by teleportTo.

.. note::

    - by The Mayor
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    if (lodestoneScreen._isLocked(LOCATION_VARROCK) then
      writeln('You need to activate the Varrock loadstone!');
*)
function TRSLodestoneScreen._isLocked(location: integer): boolean;
var
  x, y, i: integer;
  b: TBox;
  DTMs: array[0..1] of integer;
begin
  DTMs := [DTMFromString('mbQAAAHicY2VgYKiA4mogrofiQEYGBm8gdoXSIP6kHccZppy+zbDu1lMwDeLzA9WiY0YsGAwA0uoPRA=='),
           DTMFromString('mWAAAAHicY2FgYHgNxC+B+B0QvwHiZUA8B4oXAfFvIP7/3Ifh/2c/MJsfDTOiYRAAAOaoDNs=')];

  b := self._getTeleportBox(location);
  b.expand(5);

  for i := 0 to high(DTMs) do
    if findDTM(DTMs[i], x, y, b) then
      result := true;
      
  freeDTMs(DTMs);

  if result then
    print('TRSLodestoneScreen._isLocked(): lodestone ' + toStr(location) + ' is not activated', TDebug.ERROR)
end;

(*
teleportTo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function lodestoneScreen.teleportTo(location: integer): boolean;

Will teleport to location 'location'. Use integer constants at the top of the file.

.. note::

    - by Olly
    - Last Updated: 1 August 2015 by Swag Bag

Example:

.. code-block:: pascal

    if (lodestoneScreen.teleportTo(LOCATION_LUMBRIDGE) then
      writeln('We just teleported to Lumbridge');
*)
function TRSLodestoneScreen.teleportTo(location: integer): boolean;
var
  b: TBox;
  options: TOptionArray
begin
  result := false;

  if (not self.isOpen()) then
  begin
    mouseCircle(minimap.button[MM_BUTTON_LODESTONE].center.x, minimap.button[MM_BUTTON_LODESTONE].center.y,
                minimap.button[MM_BUTTON_LODESTONE].radius, MOUSE_MOVE);

    if (location = LOCATION_PREVIOUS) then
    begin
      fastclick(MOUSE_RIGHT);
      Wait(Random(200, 300));

      Options := ChooseOption.__GetOptions();
      Result := Length(Options) = 3;
      if (Result) then
      begin
        mouseBox(Options[1].bounds, MOUSE_LEFT);
        print('TRSLodestoneScreen.teleportTo(): Succesfully teleported to previous destination', TDebug.SUB);
      end else
        print('TRSLodestoneScreen.teleportTo(): Failed teleport to previous destination (ChooseOption must have failed)', TDebug.SUB);

      exit();
    end;
  end;

  if (not self.isOpen()) then
    fastClick(MOUSE_LEFT);

  if (self.isOpen(4000 + random(1500))) then
  begin
    if not self._isLocked(location) then
    begin
      b := self._getTeleportBox(location);

      if (b.x1 <> -1) then
      begin
        mouseBox(b, MOUSE_LEFT);
        result := true;
        print('TRSLodestoneScreen.teleportTo(): result = true', TDebug.SUB);
      end;

    end else
      self.close();
  end else
      print('TRSLodestoneScreen.teleportTo(): lodestone screen never appeared', TDebug.ERROR);
end;

begin
  lodestoneScreen.__init();
end;

{$f+}
