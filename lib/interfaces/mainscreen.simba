(*
Mainscreen
==========

The mainscreen file holds functions and procedures that are used in the
Runescape lobby mainscreen.

*)

{$include_once interfaces.simba}
{$include_once actionbar.simba}
{$include_once ../utilities/pixelshift.simba}
{$include_once ../utilities/color.simba}

{$f-}

(*
const Angle
~~~~~~~~~~~

Constants that represent the possible angles of the mainscreen.
*)
const
  MS_ANGLE_HIGH  = 0;
  MS_ANGLE_LOW   = 1;
  MS_ANGLE_NONE  = 2;

(*
type TRSMainscreen
~~~~~~~~~~~~~~~~~~

A type that stores functions and properties of the Runescape main screen.
*)
type
  TRSMainscreen = record(TRSInterface)
    __placeholder: byte;
  end;

(*
var mainscreen
~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape mainscreen.
*)
var
  mainscreen: TRSMainscreen;

{*
TRSMainscreen.__init()
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.__init();

Initiates the mainscreen variable. Called at the end of this file.

.. note::

    by Coh3n
    Last updated: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    mainscreen.__init();
*}
procedure TRSMainscreen.__init();
begin
  with self do
  begin
    name := 'RS Mainscreen';
    ID := ID_INTERFACE_MAINSCREEN;
    parentID := -1;
    static := true;
    x1 := 4;
    y1 := 54;
    x2 := 515;
    y2 := 387;
    w := (x2 - x1);
    h := (y2 - y1);
    cx := self.getCenterPoint().x;
    cy := self.getCenterPoint().y;
  end;
end;

(*
TRSMainscreen.getBounds; override;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.getBounds(): TBox; override;

Returns the coordinates of the mainscree.  Takes into consideration whether or
not the action bar is open.

.. note::

    by Coh3n
    Last Updated: 31 May 2013

Example:

.. code-block:: pascal

    b := mainscreen.getBounds();
*)
function TRSMainscreen.getBounds(): TBox; override;
begin
  if (actionbar.isOpen()) then
  begin
    if (self.y2 > actionbar.y1) then
      self.y2 := (self.y2 - actionbar.h);
  end else
    self.y2 := actionbar.y2;

  result := intToBox(self.x1, self.y1, self.x2, self.y2);
end;

(*
closeWindow
~~~~~~~~~~~

.. code-block:: pascal

    function closeWindow(): boolean;

Closes any of the Runescape windows that could be open.

.. note::

    by
    Last Updated:

Example:

.. code-block:: pascal

    if (closeWindow()) then
      print('Window is closed');
*)
function closeWindow(): boolean;
begin
  result := true;
end;

(*
TRSMainscreen.getUptext()
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.getUptext(): string;

Gets the current uptext in the upper left corner of the mainscreen.

.. note::

    by Coh3n
    Last Updated: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    writeln('Current uptext: '+mainscreen.getUptext());
*)
function TRSMainscreen.getUptext(): string;
begin
  // Simba's rs_GetUptext get's text at (7, 7) which is in the navigation bar
  result := rs_GetUpTextAt(7, 57);
end;

(*
TRSMainscreen.isUptext
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.isUptext(txt: TStringArray; waitTime: integer = 50; tol: extended = 0.6): boolean;

Returns true if 'txt' is found in the RS uptext string. Optional parameter
'waitTime' to wait for the text to appear (default 50ms). Optional tolerance
parameter (default 0.6).

.. note::

    by Narcle
    Last Updated: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainScreen.isUptext(['Mine', 'rock'])) then
      writeln('Found uptext!');
*)
function TRSMainscreen.isUptext(txt: TStringArray; waitTime: integer = 100; tol: extended = 1.0): boolean;
var
  i, t: integer;
  s: string;
  acc: extended;
begin
  t := (getSystemTime() + waitTime);
  print('TRSMainscreen.isUptext()', TDebug.HEADER);

  repeat
    s := self.getUptext();
    print('Current uptext: "'+s+'"');

    for i := 0 to high(txt) do
    begin
      acc := stringMatch(txt[i], s);

      if (acc >= tol) then
      begin
        print('Found "'+txt[i]+'" in uptext string: "'+s+'" @ accuracy ' + floatToStr(acc));
        result := true;
        break(2);
      end;
    end;

    wait(10 + random(20));
  until (getSystemTime() > t);

  print('TRSMainscreen.isUptext(): '+toStr(result), TDebug.FOOTER);
end;

(*
TRSMainscreen.spiralUptext
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.spiralUptext(var p: TPoint; spiralBox: Tbox; upText: TStringArray; PpC, aInc: Integer): boolean;

Spirals the mouse in a circle from the center of the defined box. It will continue
to spiral until it finds a spiral completely outside the box, always skipping
points outside. Returns the occurance of the first occurance of UpText into p.
    * p: The first point that the uptext is found.  Set to (-1, -1) if not found.
    * spiralBox: The box to spiral in.
    * PpC: The number of pixels to increase per spiral.
    * aInc: The number of stops to make around each spiral.
Takes some testing to get the right combination of PpC and aInc.

.. note::

    by Nava2
    Last Updates: Mar. 16, 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.spiralUptext(p, depoisitAllBox, ['All'], 4, 4)) then
      mouse(p, MOUSE_LEFT);
*)
function TRSMainscreen.spiralUptext(var p: TPoint; spiralBox: Tbox; upText: TStringArray; PpC, aInc: Integer): boolean;
var
  aStep, a, rStep, rV, oB: extended;
  pX, pY, ms: integer;
  sP: TPoint;
  L2R: boolean;
begin
  result := false;

  ms := mouseSpeed;
  mouseSpeed := (25 + randomRange(-3, 3));
  sP := middleTPA([point(spiralBox.x1, spiralBox.y1), point(spiralBox.x2, spiralBox.y2)]);
  aStep := (pi / (aInc / 2));
  a := 0;
  rStep := (PpC / aInc);
  L2R := (random(2) = 0);

  repeat
    rV := rV + rStep;
    pX := round(rV * cos(a)) + sP.x;
    pY := round(rV * sin(a)) + sP.y;

    if (L2R) then
      a := (a + aStep)
    else
      a := (a - aStep);

    if (pointInBox(point(pX, pY), spiralBox)) then
    begin
      oB := 0;
      mouse(point(pX - 2, pY - 2).rand(5), MOUSE_MOVE);

      if (mainscreen.isUptext(upText, 300)) then
      begin
        getMousePos(p.x, p.y);
        result := true;
      end;
    end else
      oB := (oB + aStep);

  until(result or (oB > (2 * Pi)));

  mouseSpeed := ms;
end;

(*
TRSMainscreen.setAngle
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.setAngle(angle: integer);

Sets the mainscreen at highest\lowest angle, dependant on constant passed.

.. note::

    by Raymond, edit by Naum
    Last Updated: 10 May 2013 by Coh3n

Example:

.. code-block:: pascal

    // make the camera the highest
    setAngle(MS_ANGLE_HIGH);
*)
procedure TRSMainscreen.setAngle(angle: integer);
begin
  if (angle = MS_ANGLE_NONE) then
    exit;

  keyDown((angle * 2) + 38);
  sleep(1000 + random(300));
  keyUp((angle * 2) + 38);
  wait(500 + random(100));
end;

(*
TRSMainscreen.isPlayerAnimating
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.isPlayerAnimating(): boolean;

Uses an average pixel shift in a box around the middle of the mainscreen to check
if the player in animating.

.. note::

    by Coh3n
    Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    while (mainscreen.isPlayerAnimating()) do
    begin
      writeln('Waiting for the player to stop animating');
      wait(2000 + random(500));
    end;
*)
function TRSMainscreen.isPlayerAnimating(): boolean;
begin
  result := (getPixelShiftAverage(intToBox(self.cx - 10, self.cy - 25, self.cx + 15, self.cy + 15), 30, 180) > 75);
end;

(*
TRSMainscreen.clickObject
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.clickObject(var x, y: integer; cols, tols: TIntegerArray; colSettings: TColorSettings; objWidth, objHeight, minCount: integer; upText: TStringArray; searchBox: TBox; mouseAction: integer = MOUSE_LEFT): boolean;

A very general object finding function.  Will find and click an object in the specified box.
Will click ONLY the closest object to the player, no others that may be in the same area.
It is suggested to use this function on a very distint object.  In other words, use this
function only when there aren't similar colors to the object in the same area.
    * x, y: The coordinates of the object if found.
    * cols: The colors to be found.
    * tols: The tolerances on 'cols'.
    * colSettings: The color settings (i.e. color tolerance speed and modifiers). See lib/utilities/color.simba.
    * objWidth: The width (in pixels) of the object you're trying to find.
    * objHeight: The height (in pixels) of the object you're trying to find.
    * minCount: The minimum number of colors to be found on a single object.
    * uptext: The uptext of the object.
    * searchBox: The area to search in.
    * mouseAction: The action of the mouse. Default MOUSE_LEFT.

.. note::

    by Wizzup?, Torrent Of Flame & Coh3n
    Last Updated: 30 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.clickObject(x, y, [123457, 897637], [5, 10], colorSetting(2, 0.02, 0.13), 50, 25, 40, mainscreen.getBounds(), MOUSE_RIGHT)) then
      writeln('Right-clicked object!');
*)
function TRSMainscreen.clickObject(var x, y: integer; cols, tols: TIntegerArray; colSettings: TColorSettings; objWidth, objHeight, minCount: integer; upText: TStringArray; searchBox: TBox; mouseAction: integer = MOUSE_LEFT): boolean;
var
  i, l: integer;
  myPoint: TPoint;
  aPoints: T2DPointArray;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  cs: TColorSettings;
begin
  result := false;
  print('TRSMainscreen.findObject()', TDebug.HEADER);

  cs.retrieve();
  colSettings.apply();
  l := length(cols);

  setLength(ATPA, l);

  for i := 0 to (l - 1) do
    findColorsSpiralTolerance(x, y, ATPA[i], cols[i], searchBox, tols[i], colSettings);

  cs.apply();

  TPA := ATPA.merge();
  if (length(TPA) <= 0) then
  begin
    print('No colors found');
    print('TRSMainscreen.findObject(): False', TDebug.FOOTER);
    exit(false);
  end;

  print('Colors found: '+toStr(length(TPA)));

  aPoints := TPA.toATPA(objWidth, objHeight);
  aPoints.filterBetween(0, minCount); // removes objects that don't have enough colors
  print('Possible objects found: '+toStr(length(aPoints)));

  aPoints.sortFromFirstPoint(searchBox.getMidPoint());

  // loop through each possible object
  for i := 0 to high(aPoints) do
  begin
    myPoint := aPoints[i].getMiddle();
    mouse(myPoint.rand(randomRange(-5, 5)), MOUSE_MOVE);

    if (self.isUptext(uptext)) then
    begin
      getMousePos(x, y);
      mouse(point(x, y), mouseAction);

      print('Successfully clicked object');
      result := true;
      break;
    end;
  end;

  print('TRSMainscreen.findObject(): '+toStr(result), TDebug.FOOTER);
end;

(*
TRSMainscreen.clickObject; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.clickObject(var x, y: integer; col, tol: integer; colSettings: TColorSettings; objWidth, objHeight, minCount: integer; uptext: TStringArray; mouseAction: integer = MOUSE_LEFT): boolean; overload;

A very general object finding function.  Will find and mouse an object in the mainscreen.
    * x, y: The coordinates of the object if found.
    * col: The color to be found.
    * tol: The tolerance on 'col'.
    * colSettings: The color settings (i.e. color tolerance speed and modifiers). See lib/utilities/color.simba.
    * objWidth: The width (in pixels) of the object you're trying to find.
    * objHeight: The height (in pixels) of the object you're trying to find.
    * minCount: The minimum number of colors to be found on a single object.
    * uptext: The uptext of the object.
    * mouseAction: The action of the mouse. Default MOUSE_LEFT.

.. note::

    by Wizzup? & Torrent Of Flame
    Last Updated: 30 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.clickObject(x, y, 123457, 10, colorSetting(2, 0.02, 0.13), 50, 25, 40, ['ake'])) then
      writeln('Clicked object!');
*)
function TRSMainscreen.clickObject(var x, y: integer; col, tol: integer; colSettings: TColorSettings; objWidth, objHeight, minCount: integer; uptext: TStringArray; mouseAction: integer = MOUSE_LEFT): boolean; overload;
begin
  result := self.clickObject(x, y, [col], [tol], colSettings, objWidth, objHeight, minCount, uptext, self.getBounds(), mouseAction);
end;

begin
  mainscreen.__init();
end;
