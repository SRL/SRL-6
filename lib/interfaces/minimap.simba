(*
Minimap
=======

The minimap file holds all SRL's functions that interact with the Runescape
minimap.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/minimap.simba>`_.

*)

{$f-}

(*
const Direction
~~~~~~~~~~~~~~~

Constants that represent the NESW directions on the compass.  Meant to be used
with compass altering functions.

Example:

.. code-block:: pascal

    minimap.setAngle(MM_DIRECTION_EAST);
*)
const
  MM_DIRECTION_NORTH = 0;
  MM_DIRECTION_EAST  = 90;
  MM_DIRECTION_SOUTH = 180;
  MM_DIRECTION_WEST  = 270;

(*
const Minimap Dots
~~~~~~~~~~~~~~~~~~

Constants representing the different dots that appear on the minimap.  Each value
represents the difference between the two bottom colored pixels of each dot. DO
NOT modify these values unless you know what you're doing.

These constants are meant to be used with functions that take a minimap dot type
as a parameter (such as minimap.getDots).

Example:

.. code-block:: pascal

    tpa := minimap.getDots(MM_DOT_NPC, minimap.getBounds());

    if (length(tpa) > 0) then
      writeln('Found '+toStr(length(tpa))+' NPC dots on the minimap');

*)
const
  MM_DOT_NPC    = 714965;
  MM_DOT_ITEM   = 3023;
  MM_DOT_PLAYER = 13813713;
  MM_DOT_FRIEND = 5376;
  MM_DOT_TEAM   = 2171941;

(*
const Symbols
~~~~~~~~~~~~~

Constants representing all the Runescape symbols.  Each have a bitmap that can
be found in _getSymbol and are used in the symbol finding functions.

Example:

.. code-block:: pascal

    if (minimap.findSymbol(p, MM_SYMBOL_BANK, minimap.getBounds)) then
      writeln('Found bank symbol!');
*)
const
  MM_SYMBOL_SHOP_ARCHERY    = 0;
  MM_SYMBOL_SHOP_AXE        = 1;
  MM_SYMBOL_SHOP_CANDLE     = 2;
  MM_SYMBOL_SHOP_CLOTHES    = 3;
  MM_SYMBOL_SHOP_COOKERY    = 4;
  MM_SYMBOL_SHOP_CRAFTING   = 5;
  MM_SYMBOL_SHOP_FARMING    = 6;
  MM_SYMBOL_SHOP_FISHING    = 7;
  MM_SYMBOL_SHOP_FOOD       = 8;
  MM_SYMBOL_SHOP_HUNTER     = 9;
  MM_SYMBOL_SHOP_KEBAB      = 10;
  MM_SYMBOL_SHOP_MACE       = 11;
  MM_SYMBOL_SHOP_MAGIC      = 12;
  MM_SYMBOL_SHOP_PET        = 13;
  MM_SYMBOL_SHOP_PLATEBODY  = 14;
  MM_SYMBOL_SHOP_PLATESKIRT = 15;
  MM_SYMBOL_SHOP_SCIMITAR   = 16;
  MM_SYMBOL_SHOP_SHIELD     = 17;
  MM_SYMBOL_SHOP_MINING     = 18;
  MM_SYMBOL_SHOP_SWORD      = 19;
  MM_SYMBOL_SHOP_STAFF      = 20;
  MM_SYMBOL_SHOP_SUMMONING  = 21;

  MM_SYMBOL_STALL_SPICE     = 30;
  MM_SYMBOL_STALL_GEM       = 31;
  MM_SYMBOL_STALL_SILK      = 32;
  MM_SYMBOL_STALL_SILVER    = 33;

  MM_SYMBOL_TREE            = 40;
  MM_SYMBOL_FARMING         = 41;
  MM_SYMBOL_FISHING         = 42;
  MM_SYMBOL_RUNECRAFTING    = 43;
  MM_SYMBOL_HUNTING         = 44;
  MM_SYMBOL_HOUSE           = 45;
  MM_SYMBOL_POTTERY         = 46;
  MM_SYMBOL_MINING          = 47;
  MM_SYMBOL_JEWELERY        = 48;
  MM_SYMBOL_SLAYER_CONTRACT = 49;
  MM_SYMBOL_SLAYER_MASTER   = 50;
  MM_SYMBOL_HERBALIST       = 51;
  MM_SYMBOL_WHEEL           = 52;
  MM_SYMBOL_OBELISK         = 53;
  MM_SYMBOL_TANNER          = 54;
  MM_SYMBOL_TRAINING_DUMMY  = 55;
  MM_SYMBOL_STORE           = 56;
  MM_SYMBOL_SHORTCUT        = 57;
  MM_SYMBOL_WEAVE           = 58;
  MM_SYMBOL_COOK            = 59;
  MM_SYMBOL_AGILITY         = 60;
  MM_SYMBOL_FURNACE         = 61;
  MM_SYMBOL_ALTAR           = 62;
  MM_SYMBOL_ANVIL           = 63;

  MM_SYMBOL_APOTHECARY      = 70;
  MM_SYMBOL_ARROW           = 71;
  MM_SYMBOL_BAR             = 72;
  MM_SYMBOL_BANK            = 73;
  MM_SYMBOL_LODESTONE       = 74;
  MM_SYMBOL_CHURN           = 75;
  MM_SYMBOL_DUNGEON         = 76;
  MM_SYMBOL_TRADER_FUR      = 77;
  MM_SYMBOL_SPOT_REST       = 78;
  MM_SYMBOL_GUIDE           = 79;
  MM_SYMBOL_HAIR_DRESSER    = 80;
  MM_SYMBOL_MAKEOVER_MAGE   = 81;
  MM_SYMBOL_MILL            = 82;
  MM_SYMBOL_MINIGAME        = 83;
  MM_SYMBOL_OBELISK_MINI    = 84;
  MM_SYMBOL_PORTAL          = 85;
  MM_SYMBOL_QUEST           = 86;
  MM_SYMBOL_WINDMILL        = 87;
  MM_SYMBOL_SAND            = 88;
  MM_SYMBOL_SAWMILL         = 89;
  MM_SYMBOL_TRANSPORTATION  = 90;
  MM_SYMBOL_UNDERGROUND     = 91;
  MM_SYMBOL_WATER           = 92;
  MM_SYMBOL_DIVINATION      = 93;

(*
const Buttons
~~~~~~~~~~~~~

Constants representing the minimap buttons.

*)
const
  MM_BUTTON_COMPASS = 0;
  MM_BUTTON_RUN = 1;
  MM_BUTTON_LODESTONE = 2;
  MM_BUTTON_MAP = 3;

{*
type _TRSSymbol
~~~~~~~~~~~~~~~

A type that stores minimap symbol information. Used in the symbol finding functions.
*}
type
  _TRSSymbol = record
    name: string;
    bmp: integer;
    color: integer;
  end;

type
  TFoundSymbol = record
   ID: Integer;
   Pos: TPoint;
   Acc: Extended;
 end;
  TFoundSymbols = array of TFoundSymbol;

{*
type _TRSMMButton
~~~~~~~~~~~~~~~~~

A type that stores minimap button information.
*}
type
  _TRSMMButton = record
    bounds: TBox;
    center: TPoint;
    radius: byte;
  end;

{*
type TRSMinimap
~~~~~~~~~~~~~~~

A type that stores all the attributes and functions of the Runescape minimap.
*}
type
  TRSMinimap = record(TRSInterface)
    symbolAccuracy: extended;
    bmpMask: integer;
    button: array [0..3] of _TRSMMButton;
    CompassEdge, CompassEdge2: TPointArray;
  end;

(*
var minimap
~~~~~~~~~~~

The variable that holds all minimap information. It used when calling any functions
in this file.

Example:

.. code-block:: pascal

    while (minimap.isFlagPresent()) do
    begin
      writeln('Waiting for flag to disappear');
      wait(200+random(300));
    end;
*)
var
  minimap: TRSMinimap;

{*
TRSMinimap.__init
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMinimap.__init();

Initializes the TRSMinimap.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    minimap.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSMinimap.__init();
begin
  with self do
  begin
    name := 'RS Minimap';
    ID := ID_INTERFACE_MINIMAP;
    parentID := -1;
    static := true;
    symbolAccuracy := 0.65;
    bmpMask := BitmapFromString(224, 189, 'meJzt0olhpAAAw8D03/RdA+TbwEoYTQmWPz6SJEmSJEmSJ/qXH6ArPRSd/U7oVo9DB78futiD0Knviu72CHTke6PrjaPzLqAbzqLD7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr7qBLbqKr5jT0lS5Bj5ozdY/Idc7Idc7Idc7Idc7Idc7Idc7I9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y9c+Y/fyfXTRv9qtzdtG80wvn7KJ5j5fP2UVztT+es4vmOqecs4vmCiees4vmXKefs4vmLBeds3/mFP0zZv0zZv0zZv0zZv0zZv0zZv0zZv0zZv0zZv0zZv0zZm/4Z3/Oy67758voSXKh337g0qf9BbhhTke/6RL0qDkBfaJr0evmT+j7vAO9cV5EH+d96KXza/Rl3o3eO79An4VBr54foW+CoYfP9+iPwOj58w36IDB6/nyFfgePLpCv0O9QoCPkU/Q1FOgIOUb/woLukGP0LyzoDjlG/8KC7pBj9C8s6A45Rv/Cgu6QY/QvLOgOOUb/woLukGP0LyzoDjlG/8KC7pBj9C8s6A45Rv/Cgu6QY/QvFOgI+RR9DQU6Qr5Cv4NHF8hX6HfcDJ3rcejg90MXW0A3HEfnvTe63iPQke+K7vYgdOr7oYs9Dh38TuhWD0Vnvwe60qPR8e3oPk9H91ej4yRJkiRJkiSk/xotWe8=');
    setBitmapName(bmpMask, 'Minimap Mask');
    setBounds([577, 12, 798, 200]);
                                      (* Bounds | Center | Radius *)
    button[MM_BUTTON_COMPASS]   := [[582, 18, 614, 50], [598, 34], 15];
    button[MM_BUTTON_RUN]       := [[759, 18, 793, 52], [776, 35], 16];
    button[MM_BUTTON_LODESTONE] := [[586, 161, 613, 188], [599, 174], 13];
    button[MM_BUTTON_MAP]       := [[764, 162, 788, 187], [776, 174], 12];
    with (Button[MM_BUTTON_COMPASS]) do
    begin
      CompassEdge := TPAFromCircle(Center.x, Center.y, Radius);
      CompassEdge2 := TPAFromCircle(Center.x, Center.y, Radius - 1);
    end;
  end;

  addOnTerminate('__freeMinimapMask');
end;
{$ENDIF}

{*
__freeMinimapMask
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __freeMinimapMask();

Free's the minimap mask bitmap.

.. note::

    - by Olly
    - Last Updated: 09 October 2013 by Olly

Example:

.. code-block:: pascal

    __freeMinimapMask();
*}
procedure __freeMinimapMask();
begin
  if (bitmapExists(minimap.bmpMask)) then
    freeBitmap(minimap.bmpMask);
end;

(*
TRSMinimap.getAngleRadians
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.getAngleRadians(): extended;

Returns the compass angle in radians.

.. note::

    - by Olly
    - Last Updated: 16 September 2014 by Olly

Example:

.. code-block:: pascal

    ang := minimap.getAngleRadians();
*)
function TRSMinimap.getAngleRadians(): Extended;

  function AvgExtended(const tE: TExtendedArray): Extended;
  var
    i, h: Integer;
  begin
    h := High(tE);
    if h < 0 then Exit(0);
    for i := 0 to h do
      Result := (Result + tE[i]);
    Result := Result / (H+1);
  end;

const
  PI_OVER_2: Extended = PI / 2.00;
var
  tDial: TPointArray;
  aDial: T2DPointArray;
  Angles: TExtendedArray;
  i: Integer;
  Mid: TPoint;
  Bools: array [0..1] of Boolean;
begin
  with (Self.Button[MM_BUTTON_COMPASS]) do
  begin
    FindColorsTolerance(tDial, 9477483, Bounds, 25, ColorSetting(2, 2.20, 0.97));
    FilterPointsDist(tDial, 12, 15, Center.x, Center.y);
    Mid := Center;
  end;

  if (Length(tDial) = 0) then
    Exit(Print('TRSMinimap.getAngleRads(): Found no dial', 0.00));

  aDial := SplitTPAEx(tDial, 2, 2);
  SortATPAFromMidPoint(aDial, Mid);
  SetLength(tDial, 0);
  tDial := aDial[High(aDial)];

  SetLength(Angles, Length(tDial));
  for i := 0 to High(tDial) do
    Angles[i] := Degrees(FixRad(ArcTan2(tDial[i].Y - Mid.Y, tDial[i].X - Mid.X) + PI_OVER_2));

  Bools := [False, False];
  for i := 0 to High(Angles) do
    if (Angles[i] >= 0.00) and (Angles[i] <= 10.0) then
      Bools[0] := True
    else if (Angles[i] <= 360.0) and (Angles[i] >= 350.0) then
      Bools[1] := True;

  if (Bools[0]) and (Bools[1]) then
    Exit(Radians(180.0));

  Result := FixRad(Radians(AvgExtended(Angles)) - Radians(180));
end;

(*
TRSMinimap.getAngleDegrees
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.getAngleDegrees(): extended;

Returns the compass angle in radians.

.. note::

    - by Wizzup?
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    ang := minimap.getAngleDegrees();
*)
function TRSMinimap.getAngleDegrees(): extended;
begin
  Result := Degrees(Self.getAngleRadians());
  if (Result = 360.0) then
    Result := 0.00;
end;

(*
TRSMinimap.setAngle
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.setAngle(angleDegrees: integer): boolean;

Rotates the compass angle to "angleDegrees". Returns true if rotating was
successful.

.. note::

    - by nielsie95 & Nava2
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    minimap.setAngle(MM_DIRECTION_SOUTH);
*)
function TRSMinimap.setAngle(Angle: Extended; Accurate: Boolean = False): Boolean;
  function Compass_Distance(Angle, Target: Extended): Extended;
  begin
    if (Abs(Target - Angle) < 180) then
    begin
      Result := Target - Angle;
      Exit;
    end;

    if (Target > Angle) then
      Result := Target - Angle - 360
    else
      Result := Target - Angle + 360;
  end;
  procedure Key(Left: Boolean);
  begin
    case (Left) of
      True:
        if (not isKeyDown(VK_LEFT)) then
        begin
          if (isKeyDown(VK_RIGHT)) then
            KeyUp(VK_RIGHT);
          KeyDown(VK_LEFT)
        end;
      False:
        if (not isKeyDown(VK_RIGHT)) then
        begin
          if (isKeyDown(VK_LEFT)) then
            KeyUp(VK_LEFT);
          KeyDown(VK_RIGHT)
        end;
    end;
  end;
var
  Left: Boolean;
  AngleDistance, CurrentAngle: Extended;
  Tries, Tolerance, MaxTries: Integer;
  Time: UInt64;
label
  Retry;
begin
  Tries := 0;
  MaxTries := Random(10, 13);
  Tolerance := 5;
  Angle := FixD(Angle);

  Retry:
  Inc(Tries);
  CurrentAngle := Self.getAngleDegrees();
  Time := GetTickCount64() + Random(5000, 6000);

  while (Abs(Compass_Distance(CurrentAngle, Angle)) > Tolerance) and (GetTickCount64() < Time) do
  begin
    AngleDistance := CurrentAngle - Angle;
    Left := ((AngleDistance > 0) and (abs(AngleDistance) <= 180)) or ((AngleDistance < 0) and (abs(AngleDistance) > 180));
    Key(Left);

    CurrentAngle := Self.getAngleDegrees();
    Result := Abs(Compass_Distance(CurrentAngle, Angle)) <= Tolerance;
    if (Result) then
      Break();

    Wait(Random(5, 10));
  end;

  if (Left) then
    KeyUp(VK_LEFT)
  else
    KeyUp(VK_RIGHT);

  if (not Accurate) then
    Exit();

  Wait(Random(270, 420));
  CurrentAngle := Self.getAngleDegrees();
  Result := Abs(Compass_Distance(CurrentAngle, Angle)) <= Tolerance;

  if (not Result) and (Tries < MaxTries) then
    goto Retry;
end;

(*
TRSMinimap.clickCompass
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMinimap.clickCompass();

Clicks the Runescape compass, resulting in the mainscreen camera angle to be set
to low, and the minimap compass angle set to north.

.. note::

    - by Olly
    - Last Modified: 1st February 2014 by Olly

Example:

.. code-block:: pascal

    minimap.clickCompass();
*)
procedure TRSMinimap.clickCompass();
begin
  mouseCircle(self.button[MM_BUTTON_COMPASS].center.x, self.button[MM_BUTTON_COMPASS].center.y,
              self.button[MM_BUTTON_COMPASS].radius, MOUSE_MOVE);

  if (random(4) = 2) then
  begin
    fastClick(MOUSE_RIGHT);
    if (not chooseOption.select(['Face North', 'Face', 'ace north', 'orth'])) then
      fastClick(MOUSE_LEFT); // failsafe
  end else
    fastClick(MOUSE_LEFT);

  wait(150 + random(300));

  print('TRSMinimap.clickCompass(): Clicked compass', TDebug.SUB);
end;

(*
__createSearchAngles
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __createSearchAngles(angle, range: extended): T2DExtendedArray;

Creates start and end search angles for minmap.findDTM/DTMs. Used because we
will need multiple searches if the range is greater than 360 or less than 0

Example:
  if angle is 0.00 and range is 30 will need to search (345..360) and (0..15).

.. note::

    - by Olly
    - Last Modified: 1st February 2014 by Olly

Example:

.. code-block:: pascal

    searches := __createSearchAngles(90.0, 25.0);
*)
function __createSearchAngles(angle, range: extended): T2DExtendedArray;
var
  startA, endA: extended;
begin
  startA := (angle - range);
  endA := (angle + range);

  if (startA < 0) then
  begin
    insert(TExtendedArray([360 + startA, 360]), result);
    insert(TExtendedArray([0, 0 + endA]), result);
  end;

  if (endA > 360) then
  begin
    insert(TExtendedArray([startA, 360]), result);
    insert(TExtendedArray([0, 0 + abs(endA - 360)]), result);
  end;

  if (length(result) < 1) then
    insert(TExtendedArray([startA, endA]), result);
end;

(*
TRSMinimap.isPointOn
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.isPointOn(p: TPoint): boolean;

Returns true if the point 'p' is on the minimap.

.. note::

    - by Olly
    - Last Updated: 09 October 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.isPointOn(someRandomPoint)) then
      writeln('Point is on the minimap!');
*)
function TRSMinimap.isPointOn(p: TPoint): boolean;
begin
  result := false;

  if (pointInBox(p, self.getBounds())) then
    result := (fastGetPixel(self.bmpMask, p.x - self.x1, p.y - self.y1) = clWhite);
end;

(*
TRSMinimap.findDTM
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.findDTM(dtm: integer; var x, y: integer): boolean;

Attempts to find a dtm on the minimap, will search for the dtm +/- 15 degrees of the
current minimap angle.

.. note::

    - by Olly
    - Last Updated: 15 August 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.findDTM(dtm, x, y)) then
      writeln('found the dtm');
*)
function TRSMinimap.findDTM(dtm: integer; var fx, fy: integer): boolean;
var
  a: extended;
  i: integer;
  searches: T2DExtendedArray;
begin
  result := false;

  searches := __createSearchAngles(self.getAngleDegrees(), 15);

  for i := 0 to high(searches) do
    if (findDTMRotatedSE(dtm, fx, fy, self.getBounds(), searches[i][0], searches[i][1], 1.00, a)) then
    begin
      result := (self.isPointOn(point(fx, fy)));

      if (result) then
        break();
    end;

  if (result) then
    print('TRSMinimap.findDTM(): Succesfully found dtm at '+copy(floatToStr(a), 0, 5)+' degrees');
end;

(*
TRSMinimap.findDTMs
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.findDTMs(dtm: integer; out points: TPointArray): boolean;

Attempts to find dtm matches on the minimap, will search for the dtm +/- 15 degrees of the
current minimap angle.

.. note::

    - by Olly
    - Last Updated: 15 August 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.findDTMs(dtm, tpa)) then
      writeln('Found DTM Matches!);
*)
function TRSMinimap.findDTMs(dtm: integer; out points: TPointArray): boolean;
var
  searches, angles: T2DExtendedArray;
  i, hi: integer;
  tpa: TPointArray;
begin
  searches := __createSearchAngles(self.getAngleDegrees(), 15);
  hi := high(searches);

  if (hi = -1) then
    exit(false);

  for i := 0 to hi do
    if (findDTMsRotatedSE(dtm, tpa, self.x1, self.y1, self.x2, self.y2, searches[i][0], searches[i][1], 1.00, angles)) then
      appendTPA(points, tpa);

  self.filterPoints(points); // remove points off minimap
  result := (length(points) > 0);

  if (result) then
    print('TRSMinimap.findDTMs(): Succesfully found '+intToStr(length(points))+' DTMs', TDebug.SUB);
end;

{*
TRSMinimap._isValidDot
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap._isValidDot(dotType: integer): boolean;

Returns true if "dotType" is valid.  Compares to the minimap dot constants.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (not minimap._isValidDot(MM_DOT_NPC)) then
      exit(false);
*}
function TRSMinimap._isValidDot(dotType: integer): boolean;
var
  arr: TIntegerArray;
begin
  arr := [ MM_DOT_NPC, MM_DOT_ITEM, MM_DOT_PLAYER,
           MM_DOT_FRIEND, MM_DOT_TEAM ];

  result := inIntArray(arr, dotType);
end;

function TRSMinimap.getAllPossibleDots(const Bitmap: Integer): T2DPointArray;
const
  BORDER_COL = 65536;
var
  i, j, Hi: Integer;
  TPA: TPointArray;
  Rows: T2DPointArray;
  p: TPoint;
begin
  if (not FindColorsBitmap(Bitmap, TPA, BORDER_COL)) then
    Exit();

  Rows := FindTPARows(TPA);
  for i := 0 to High(Rows) do
  begin
    Hi := High(Rows[i]);
    for j := 0 to Hi do
    begin
      p := Point(Rows[i][j].x - 3, Rows[i][j].y);
      if (PointInTPA(p, Rows[i])) then
        Insert(TPointArray([p, Rows[i][j]]), Result)
      else begin
        p := Point(Rows[i][j].x + 3, Rows[i][j].y);
        if (PointInTPA(p, Rows[i])) then
          Insert(TPointArray([p, Rows[i][j]]), Result);
      end;
    end;
  end;

  // Sort left to right
  for i := 0 to High(Result) do
    if (Result[i][0].X > Result[i][1].X) then
      Swap(Result[i][0], Result[i][1]);
end;

function TRSMinimap.getDots(const dotType: Integer; const SearchBox: TBox; const Tol: Byte = 55): TPointArray;
var
  Bitmap, i, Col: Integer;
  Dots: T2DPointArray;
{$IFDEF GETDOTS_DEBUG}
  Found: Boolean;
  T: Integer;
{$ENDIF}
begin
  Bitmap := BitmapFromClient(SearchBox);

  try
    Dots := Self.getAllPossibleDots(Bitmap);
    if (Length(Dots) = 0) then
      Exit();

    for i := 0 to High(Dots) do
    begin
      if (Dots[i][1].Y <= 0) or (Dots[i][1].X <= 0) then
        Continue();

      Col := FastGetPixel(Bitmap, Dots[i][1].X, Dots[i][1].Y - 1);
      if (Col = FastGetPixel(Bitmap, Dots[i][1].X - 1, Dots[i][1].Y)) then
      {$IFDEF GETDOTS_DEBUG}
      Found := False;
      for T := 1 to Tol do
        if (SimilarColors(Col, dotType, T)) then
        begin
          Found := True;
          Print('TRSMinimap.getDots(): Tolerance = ' + toString(T));
          Break();
        end;
      if (Found) then
      {$ELSE}
      if (SimilarColors(Col, dotType, Tol)) then
      {$ENDIF}
        Insert(Dots[i][0], Result);
    end;

    OffsetTPA(Result, Point(SearchBox.X1, SearchBox.Y1));
  finally
    FreeBitmap(Bitmap);
  end;
end;

(*
TRSMinimap.getColorPercent
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.getColorPercent(color, tolerance: integer): extended;

Returns the percentage of the minimap occupied by "color".
    * color: The color to look for.
    * tol: The tolerance on "color".

.. note::

    - by Olly
    - Last Updated: 08 August 2013 by Olly

Example:

.. code-block:: pascal

    // will return true of 60% or more of the minimap is black
    if (minimap.getColorPercent(minimap.getBlackBackground(), 0) > 60.0) then
      writeln('more than 60% of the minimap is black');
*)
function TRSMinimap.getColorPercent(color, tolerance: integer): extended;
var
  tpa, tpaMaxPixel: TPointArray;
begin
  findColorsBitmap(self.bmpMask, tpaMaxPixel, clWhite);
  findColorsTolerance(tpa, color, self.getBounds(), tolerance);

  self.filterPoints(tpa);

  result := (length(tpa) / length(tpaMaxPixel) * 100);
end;

(*
TRSMinimap.getBlackBackground
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.getBlackBackground(): integer;

Get's the most common black color that appears on the minimap.  Useful for dungeons
and second+ stories of buildings.

.. note::

    - by ZephyrsFury
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    blk := minimap.getBlackBackground();
*)
function TRSMinimap.getBlackBackground(): integer;
var
  i, currentCount, max, hi: Integer;
  tpa: TPointArray;
  cols: TIntegerArray;
begin
  result := -1;

  print('TRSMinimap.getBlackBackground()', TDebug.HEADER);

  findColorsTolerance(tpa, clBlack, self.getBounds(), 3, colorSetting(2, 100, 100));
  self.filterPoints(tpa);

  if (length(tpa) < 1) then
  begin
    print('Failed to find any shades of black', TDebug.ERROR);
    print('TRSMinimap.getBlackBackground(): '+toStr(result), TDebug.FOOTER);
    exit();
  end;

  cols := getColors(TPA, true);
  print('Found '+toStr(length(cols))+' shades of black, finding the most common one...');

  hi := high(cols);
  for i := 0 to hi do
  begin
    currentCount := countColor(cols[i], self.getBounds());

    if (countColor(cols[i], self.getBounds()) > max) then
    begin
      result := cols[i];
      max := currentCount;
    end;
  end;

  print('TRSMinimap.getBlackBackground(): '+toStr(result), TDebug.FOOTER);
end;

(*
TRSMinimap.filterPoints
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMinimap.filterPoints(var tpa: TPointArray);

Filters all the points in the tpa that are not on the minimap (the actual map area).

.. note::

    - by Olly
    - Last Updated: 09 October 2013 by Olly

Example:

.. code-block:: pascal

    begin
      findColors(tpa, clWhite, minimap.getBounds());
      minimap.filterPoints(tpa);

      writeln('We found ' + intToStr(length(tpa)) + 'points on the map!');
    end;
*)
procedure TRSMinimap.filterPoints(var tpa: TPointArray);
var
  tpaMask: TPointArray;
begin
  findColorsBitmap(self.bmpMask, tpaMask, clBlack);
  offsetTPA(tpaMask, point(self.x, self.y));

  tpa := clearTPAFromTPA(tpa, tpaMask);
end;

(*
TRSMinimap.isFlagPresent
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.isFlagPresent(var p: TPoint): boolean;

Returns true if the flag is present on the minimap. Returns it's coordinates in
"p".

.. note::

    - by Home
    - Last Updated: 29 July 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.isFlagPresent(p)) then
      writeln('Flag is present');
*)
function TRSMinimap.isFlagPresent(var p: TPoint): boolean;
var
  i, bmp, l: integer;
  tpa: TPointArray;
begin
  result := false;
  bmp := bitmapFromClient(self.getBounds());

  findColorsBitmap(bmp, tpa, 65536);

  l := length(tpa);

  if (l < 1) then
  begin
    freeBitmap(bmp);
    exit();
  end;

  for i := 0 to (l - 1) do
  begin
    // to avoid out of range errors
    if (tpa[i].x < 1) then
      tpa[i].x := 1;

    if (tpa[i].y < 1) then
      tpa[i].y := 1;

    if ((fastGetPixel(bmp, tpa[i].x - 1, tpa[i].y - 1) - fastGetPixel(bmp, tpa[i].x, tpa[i].y - 1)) = 6381921) then
    begin
      result := true;
      p.x := tpa[i].x + self.x;
      p.y := tpa[i].y + self.y;
      break;
    end;
  end;

  freeBitmap(bmp);
end;

(*
TRSMinimap.isFlagPresent
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.isFlagPresent(): boolean; overload;

An overload function.  Returns true if the flag is present on the minimap, has
a optional waitTime parameter.

.. note::

    - by Coh3n
    - Last Updated: 1 August 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.isFlagPresent(2000)) then
      writeln('Flag is present');
*)
function TRSMinimap.isFlagPresent(waitTime: integer = 0): boolean; overload;
var
  p: TPoint;
  timeOut : LongWord;
begin
  timeOut := getSystemTime() + waitTime;
  result := false;

  repeat
    result := (self.isFlagPresent(p));

    if (result) then
      exit(true);

    if (waitTime > 0) then
      wait(15 + random(25));

  until (getSystemTime() >= timeOut);
end;

(*
TRSMinimap.getFlagDistance
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.getFlagDistance(): integer;

Returns the distance from the player (i.e. the center of the minimap) to the flag.
Returns -1 if the flag isn't present.

.. note::

    - by weequ
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    dist := minimap.getFlagDistance();
*)
function TRSMinimap.getFlagDistance(): integer;
var
  p, c: TPoint;
begin
  result := -1;

  if (self.isFlagPresent(p)) then
  begin
    c := self.getCenterPoint();
    result := distance(c.x, c.y, p.x, p.y);
  end;
end;

(*
TRSMinimap.waitFlag
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.waitFlag(dist: integer = 0): boolean;

Returns true the player is within "dist" of the flag.

.. note::

    - by Nava2
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    minimap.waitFlag(10);
*)
function TRSMinimap.waitFlag(dist: integer = 0): boolean;
var
  m, t : LongWord;
  d1, d2: integer;
  p, c: TPoint;
begin
  result := false;
  m := getSystemTime();
  t := (m + 20000);

  repeat
    if (not self.isFlagPresent(p)) then
    begin
      result := true;
      break;
    end;

    c := self.getCenterPoint();
    d1 := distance(p.x, p.y, c.x, c.y);

    if (d1 <= dist) then
    begin
      result := true;
      break;
    end;

    if (d1 > (dist + 12)) then
      wait(450 + random(70))
    else
      wait(50 + random(50));

    if (getColor(6, 56) <> 13092807) then // border of the loading message
      if (getSystemTime() - m > 5000) then
      begin
        if (d1 = d2) then
          break();


        d2 := d1;
        m := getSystemTime();
      end;

    if (SRL_Events[EVENT_ANTIBAN] <> nil) then
      SRL_Events[EVENT_ANTIBAN]();

  until (getSystemTime() > t);
end;

(*
TRSMinimap.isPlayerMoving
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.isPlayerMoving(shiftInterval: integer = 500): boolean;

Returns true if the player is moving (i.e. walking or running).

.. note::

    - by marpis
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (minimap.isPlayerMoving()) then
      writeln('Player is moving!');
*)
function TRSMinimap.isPlayerMoving(shiftInterval: integer = 500): boolean;
var
  shiftBox: TBox;
  c: TPoint;
begin
  c := self.getCenterPoint();
  shiftBox.setBounds(c.x - 30, c.y - 30, c.x + 30, c.y + 30);
  result := (getPixelShift(shiftBox, shiftInterval) > 200);
end;

(*
TRSMinimap.waitPlayerMoving
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.waitPlayerMoving(waitFlagGone: boolean): boolean;

Waits while the player is moving.  Returns true if the player is not moving.

.. note::

    - by marpis
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (minimap.tpaWalk(5647837, 10, point(minimap.x2, minimap.y1), 10)) then
    begin
      wait(500 + random(500));
      minimap.waitPlayerMoving();
    end;
*)
function TRSMinimap.waitPlayerMoving(shiftInterval: integer = 500): boolean;
var
  t: LongWord;
begin
  result := false;
  t := (getSystemTime() + 20000);

  print('Waiting while the player is moving...', TDebug.SUB);

  while (getSystemTime() < t) do
  begin
    wait(randomRange(50, 100));

    if (not self.isPlayerMoving(shiftInterval)) then
      exit(true);

    if (SRL_Events[EVENT_ANTIBAN] <> nil) then
      SRL_Events[EVENT_ANTIBAN]();
  end;
end;

(*
TRSMinimap.radialWalk
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.radialWalk(theColor, tol, radius, startRadial, endRadial: integer; flagDist: integer = 0): boolean;

Walks the player to the furthest point found within the given parameters.
    * theColor: The color to look for.
    * tol: The tolerance on "theColor".
    * radius: The maximum radius to look for the color. Should be less than MM_RADIUS.
    * startRadial: The degree value to start looking for the color.
    * endRadial: The degree value to stop looking for the color.
    * flagDist: Optional. The minimum flag distance from the player. Default set to 0.

.. note::

    - by nielsie95 & NCDS
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    minimap.radialWalk(834782, 10, 100, 45, 135, 10);
*)
function TRSMinimap.radialWalk(theColor, tol, radius, startRadial, endRadial: integer; flagDist: integer = 0): boolean;
var
  sd, ed, direction, i: integer;
  linear: boolean;
  tpa: TPointArray;
  c: TPoint;
begin
  result := false;
  print('TRSMinimap.radialWalk()', TDebug.HEADER);

  sd := startRadial;
  ed := endRadial;

  if (sd = ed) then
  begin
    print('Start and end raidal are equal, using linear walk algorithm');
    linear := true;
    direction := sd;

    if (direction < 50) then
      sd := ((direction + 360) - 50)
    else
      sd := (direction - 50);

    ed := (direction + 50);
    sd := trunc(FixD(sd + 0.0));
    ed := trunc(FixD(ed + 0.0));
  end else
    if (sd > ed) then
      swap(sd, ed);

  c := self.getCenterPoint();

  findColorsTolerance(tpa, theColor, self.getBounds(), tol);
  filterPointsPie(tpa, sd, ed, 10, radius, c.x, c.y);

  if (linear) then
    linearSort(tpa, c.x, c.y, direction, false)
  else
    sortCircleWise(tpa, c.x, c.y, startRadial, false, startRadial > endRadial);

  if (length(tpa) > 0) then
  begin
    print('Found '+toStr(length(tpa))+' instances of color '+toStr(theColor));

    for i := 0 to high(tpa) do
    begin
      mouse(tpa[i], MOUSE_LEFT);
      wait(200 + random(100)); // wait for the flag to appear

      if (self.waitFlag(flagDist)) then
      begin
        result := true;
        break;
      end;
    end;

  end else
    print('Failed to find color '+toStr(theColor)+' with tolerance '+toStr(tol), TDebug.ERROR);

  print('TRSMinimap.radialWalk(): '+toStr(result), TDebug.FOOTER);
end;

(*
TRSMinimap.tpaWalk
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.tpaWalk(color, tol: integer; sortFrom: TPoint; flagDist: integer; offset: TPoint = point(0, 0)): boolean;

Uses a simple TPA sorting method to walk to a spot on the minimap. Returns true if walked
successfully.

    * color: The color to be found on the minimap.
    * tol: The tolerance on color.
    * sortFrom: The point on the minimap to sort found colors from.
    * flagDist: The minimum flag distance from the player.
    * offset: Optional. The offset coordinates on the point that's clicked.

.. note::

    - by Coh3n
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    minimap.tpaWalk(288937, 10, point(minimap.x2, minimap.y1), 10);
*)
function TRSMinimap.tpaWalk(color, tol: integer; sortFrom: TPoint; flagDist: integer; offset: TPoint = point(0, 0)): boolean;
var
  i, t: integer;
  tpa: TPointArray;
  p: TPoint;
begin
  result := false;
  print('TRSMinimap.tpaWalk()', TDebug.HEADER);

  if (findColorsTolerance(tpa, color, self.getBounds(), tol)) then
  begin
    self.filterPoints(tpa);

    print('Found color '+toStr(color)+' on minimap');
    sortTPAFrom(tpa, sortFrom);

    for i := 0 to high(tpa) do
    begin
      p := tpa[i];
      incEx(p.x, offset.x);
      incEx(p.y, offset.y);

      if (not self.isPointOn(p)) then
        continue;

      mouse(p.rand(3), MOUSE_LEFT);

      result := self.waitFlag(3000);

      if (result) then
        break();

      wait(15 + random(50));
    end;

  end else
    print('Failed to find color '+toStr(color)+' with tolerance '+toStr(tol)+' on the minimap', TDebug.ERROR);

  print('TRSMinimap.tpaWalk(): '+toStr(result), TDebug.FOOTER);
end;

{*
TRSMinimap._getSymbol
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap._getSymbol(sym: integer): _TRSSymbol;

Symbol bitmap should be the whole symbol without the transparent parts of the blue outline.
The color should be the most common color in the symbol, most of the time this
is the background color.

.. note::

    - by The SRL Development Team
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    sym := minimap._getSymbol(MM_SYMBOL_BANK);
*}
function TRSMinimap._getSymbol(sym: integer): _TRSSymbol;
begin
  case sym of
    MM_SYMBOL_BANK: // 10 September 2014
      with result do
      begin
        name := 'Bank';
        color := 594228;
        bmp := BitmapFromString(14, 17, 'meJz7eX7bj3Nbv53ZjAcBFfw8v+37ibV1WTlRfhFQ5BsSX1SdtftoVEAEXBCoAKjsy9HVFibuLNzaQMQmaiJfNEVn+RmdrXfk8idwKthDxC1N3L8eX/PlyCqISnZRE+W2Nca7HutvuKW39Z7htvvaC07yaHgApYAKgMo+HFhmYewG5ApYROutvqo184iAf6HkjENSia2y2RPZhI1BKo3dPh5Y9nrfEnMjVyBX0C5Rf/09jcn7BF3TNJedZ+XXYxc1hdgOVPBm35JXu+ZbGHuw8+lzyztozTxpvPuD5pIrohP3sPDrs/LoAMWBCKgAqOzF1tlWpl4c/EacAsZ8ql7aM44Z7fxkuu+H/rr7wmYxnEKmQClLYw+gsscbplqaeHIKmoCQgDGHkKFk2ybl1k0mm97rzrvMrxUAFAcqeLxh2sO1kyyMoSp5FVw4RYxUW9YIW8dqtOw0WvtCzCkbKA5UAFR2d2WflakPt4glj6yjRuMWtdp1vOkTBd2zDeZdN5h7XdgsDigFVABUdnNxp6WJN4+olZB2kFbTdsP5N42XPTBe9tBw7nXV3Hm84jZAKaACoLLr89sswCqBiF/eRdqnXLVxs3LBAhmfCl4pO4g4UMG1+W1X57bMrSzqLSwEoorEdGEpOz6jCB45JxEpeyAXIg5UcHVu69H+imP95cf6K05Mqjo7vX5KcaGojCMQARlALlDwGFgBUBkDKjgzuaYtIxOIgAwGQgBsCLoJQAAAS+YFpA==');
      end;

    MM_SYMBOL_OBELISK_MINI:
      with result do
      begin
        name := 'Mini Obelisk';
        bmp := BitmapFromString(15, 5, 'meJxjYGDYjwTO75ymWJUpaO7FKyw' +
          '7f/58ZCkGMEAW0QrM8q3vAapPz/AgqFg2wguoGEhyKfHhVwx0w4NH' +
          'D4AIaL5TQh4Q4VEMcQNQDVA90HAeRStkw4EqAbnwdxs=');
        color := -1;
      end;

    MM_SYMBOL_MINING: // 21 September 2014
      with result do
      begin
        name := 'Mining Site';
        bmp := BitmapFromString(16, 19, 'meJyNkvluElEYxXkJ/7BBlimUgb' +
        'INqxS1gKCFYqslQUoBSdlqoAyFAkFZyjoUyjKURFNQmhisywMYE5s' +
        '0MSUxafSV/NJJ1DREPTmZ3HvOL/fOnbk02m/1e6NW6yVJDtrto05n' +
        'AO52h/3DEW2aisX2yord5wsGgiGFUqtS36G8uuooFTtXYKLW39pKz' +
        'HL5Hz+McTxCZyIMNocyjy8KBfF8rvkLdgWy1Qqp092nM9jff3yrE6' +
        'UbTISFcJmXPEuA3TTbrbHG7dSQ4itl0r8ZQbgowkEvLiYnJ8ewPiq' +
        '/JbG6UUcc8Td4kR7LXdL6ywD7QplSvikSy2BnhVJ5evrpfPLVUxtw' +
        'Mm9nEmO6M3d94cGMUI0IpOlk0eMO7tf6y+ZH8OZggyf8+ezL+eQs1' +
        'h5cM7gYHD57do6qwIDVaz2iQmo0i3OokMubVxsteDb//t0o9zyNCk' +
        'QQwmEpQwsYUe7uJkqJ2DNIUIEYAJEY2w77j150TCYjhAKhFMyfl0A' +
        'FWDyWgyO06v21h48hnBdh0EoxeTwaikVCQjEGCRgqAFpEn/o+8Z0C' +
        'UW4r1VqoxFIFPDG5atPr1ut1FA8VsdfcuVyc0kGlE/A+lWBKsEy9q' +
        'Lm3rrprV2n1VAIVAH/+X493m8jvm4wWuXZJYw0vrKXBMIAphFA92Q' +
        'hcuRLVHPHq8PWb4djqTGHWXaklbnUmYQphNUtMvXLrNlc5Uy5mG7K' +
        'lKLiUb8PUYduYClMyGZa7NdLmToNhYNSb/wJTKqT2KvkDcCFZ+CdM' +
        'qVvtgv8TBuEhPBrEp1Y/AQCS2Ls=');
        color := 2390438;
      end;

    MM_SYMBOL_TRANSPORTATION:
      with result do
      begin
        name := 'Transportation';
        bmp := BitmapFromString(15, 5, 'z78DA33303534347074353' +
          '4B73032219E34763173348592A62E666E66A6C8B20660330D904C' +
          '86A841D6858BC454896C3EA6C9C498899FC465B291A3B193910B3' +
          '124A69910715C269317CEC866229B0C00B3496273');
        color := -1;
      end;

    MM_SYMBOL_SHOP_MAGIC:
      with result do
      begin
        name := 'Magic';
        bmp := BitmapFromString(7, 6, 'meJy7lu5+NszYqXYGBAHZ19LdL2f5' +
        'nEvxOBFqcSjYDEgC2UARRXndMDOTCnuzGgdjIAlkA0WkpY0w0ZaeO' +
        'hVlCzk5KAKygSKXZjdubKsAsoEKgCSQDRQBAE/LKiY=');

        color := -1;
      end;

    MM_SYMBOL_WATER: // 21 September 2014
      with result do
      begin
        name := 'Water';
        bmp := BitmapFromString(16, 19, 'meJyNkv9rEmEcx/1LaurpnVNPd+' +
        'cX3HW25la4Su1a6NgvrRgorbJ0LZSp7TzPDfVuuwXRrEbZF4IgKGJ' +
        'QbT9s0KAgoqJBP/VT0V/Re11YLKN9ePPw+bzfr+Oe57kzGH7Xoras' +
        'qk1FWWoLo6YtGzrVlVI9Gkv4/EGot3dbeh+NJkql+g64ImnJ5EXS5' +
        'tzTRUCRfjuk9zARSdLCn3xZnN/fd2ivkegyWWyUVcn4qhMsSVqMZi' +
        'tMRADasFiqnT41YSIoo5kEH+53bLTCT2rcAGczESR8CACwXzsvzDl' +
        'pBqbZYgOvTfPvnwkvr/HSORYjTEQAgAGWpfnD4WMwLaQdq5ehttZG' +
        'Pq3G15rB1es846IIazeECJgsLVRENRAIAsa54E+Os18/JL+8Htt8e' +
        'HC91ZceY2AislIOYLKoXJ4sZtN5jDa7C+tdZd+3j6nvW2fercQ2Hh' +
        'y4NcvpER4BVi03sKW6vCjE4lQ3Dd1W+LcrRz6vj7x5Gt58FLo5x+s' +
        '+gHr1qn7ebDonzzR8fs7u7DkRY1/cD716PAg9vxcSIgxMRACmMoX2' +
        'ldbKjfGTKdrtcdCMEPEUs1whwx0dYp0u1uX2IKqXlR2fWC5UBweGH' +
        'HQP7d5mIDS4RpiIzqYu/M03tRt3llrDQpxh/RAajDCrxdmOvxxKyk' +
        'szOdHjDXi9ATRSvvIvsl2qpMaPjyaGR9H8F0aVcyL2Jk/LaHbD/3y' +
        'FAu0SRk2dvwR1jH4ANBvVhQ==');
        color := 13744208;
      end;

    MM_SYMBOL_FURNACE:
      with result do
      begin
        name := 'Furnace';
        bmp := BitmapFromString(15, 5, 'z78DA3334353435B470' +
          '3101423308696A028466E6C6A6A626E66E6E1640062E12A206A2D' +
          'EC90408A1261882CD3424CA6427472320DBCDCDC810C61EFC2653' +
          '3F34882171990C0058F36390');
        color := -1;
      end;

    MM_SYMBOL_ANVIL: // 21 September 2014
      with result do
      begin
        name := 'Anvil';
        bmp := BitmapFromString(14, 20, 'meJxjYEABl7YvfXdo1dtDK/fO7w' +
        'Fy2djZGFmYIQiuZvnE5leHVl1eMyXMzTrS3fbO2ikv9i9jwADvj62' +
        '7v3l2T2EiHw83IxgAGX3FyY+2z3t3dC1QATsnO5B8tGvx8tZiFwsD' +
        'djY2RiTAyc7maWW0or302e5FQGXvDiwviPKTkxJjZ2fDiuSlxUvjg' +
        '17vWfx672JLfU0uLk48yNZY59WeRU93LrDQ09i+buXODauBaBcMLZ' +
        'szVVVFWV5ORkZa0tZE78mO+U+3zrHQVU+Ni2qrLV84fQJQARAtnTU' +
        'ZSK6cP3P+tP7i7FRXK5PHm2cBka2RtqioiI6WemFmytxJPbMndHbW' +
        'V2Qnx8eEBTnaWgHNdDI3fLRp5v110+2MdUVEhIHIy81paldLS3WJp' +
        'ZmxtJSkpIQ40ASguLOl0YP10+6smWJvoictJaWmrFSUk97TUtNQXu' +
        'Dl4qikIC8pIQFUDiSBZt5ePenumsllsYEGWhq2lmYRQb5hfl5h/t4' +
        'RAT4uDrZA7UCkr6Venhh2Y3nf4ob8c3NalzYWhLvbK8jJAqWA3oUg' +
        'IDfCy3l5a8mZ2S3w2Dwzvf7snJby2AB5OVllRQVlBTmgsurk8DNz2' +
        '45NqUGL+tllaccmV+toqKooKQKRrqb6yekNk/MTMBMJEKxvzm9NCV' +
        'VVVgKinrzEFXXZWJVBwJH+ciczQxcrU6CBeJQBwanJ1U1JIe1ZsUf' +
        '7SvGrrI72OdRXfqCnLD/QBb9KINjVUbihLhNTHACPw9VG');
        color := 12234923;
      end;

    MM_SYMBOL_TREE: // 21 September 2014
      with result do
      begin
        name := 'Tree';
        bmp := BitmapFromString(16, 19, 'meJxjYECAgkn9lXUt6XXVQa2lwa' +
        '1lzpPKXSaURrfVMGADHh1VttvnOa6YbjApT216vtL0fNmGWPm6aK3' +
        'uTKfCZDTFJjvn6s0qkZtdJDY5Q3hqFt/GfvaJWSxZrqxZLvzVQcoT' +
        'M/UaU+CKJdf0iG+ZyD0xhaXaj7HKm6nQi7kjgWVGPnOmK1OaI0uhB' +
        '29DiExRsHyMO1CxqLsZz/xynhUNbB1xTLmuzNnOQPVMlQHM+R5MgR' +
        'aMoWYMKfZMGY5c8Q7iKV4iTsYiecE8C8tY2mJ4/a15bHS5bbW4A+w' +
        'Y85IZ42wZ3fW4zZUZ450YizyY053Ys1y5irwMciI5W0OYClL4DfX4' +
        'NeRYHLR4XS0YAoOYvPQ57JQ5bWNY3VLZIi1ZQqwYw03YczzcE2L4Y' +
        'xyZsmO47Px5LY0EDY04XHyZvfvZfaNZPbI5bPP49U3YnEwYHc25LV' +
        'Q53fWTU7JVPG05gm25rYFaQvgsnHksE1jDZrOHTuF2yOczceY2suc' +
        'y8eIyMOWy0lCwM40Ki8/IzJd1Neez0uDVVeXVUeMxNGOPms8Vt5Tb' +
        'LofNKonLPJpP34VV30nIQMPWzjkuKq2suLaquEZVX09YT53fWFVQz' +
        '5I7cRlPSD+/voOAjhS/upyArpqErqqWhUV4SNyZ05d6uif2t01ISk' +
        'jX1DdU19ETN7LjCJ/J4VHDbRQgri0nq63qFRiYkVOYm1U4qW8mMAq' +
        '8/QJzMwra6jtdXT21dPRFjby4PGvYHPK4jfyVlVRdnNzb6jrqKptm' +
        'zZ6PnCRaatvnTpm/cOYia7cQftsUbrNoHRufhTMWAQVbatqxJrnw4' +
        'KimyubKkgYpUx9pY/fKknogFyiIVTEEODu69TT1unhHOvrF9TT3OT' +
        'm74lEMAXXl9bUVzbWVLbWV9QQVQ0BfSx8QEakYCHJy83Jy87FKAQC' +
        '4ZMIO');
        color := 231520;
      end;

    MM_SYMBOL_FISHING: // 10 September 2014
      with result do
      begin
        name := 'Fishing Spot';
        bmp := BitmapFromString(16, 19, 'meJxjYICC9pbOnu7pHe2TOjum9PTM6Oud2d83q79/9uRJ8xprmhlQQV5qallpvYuLt6GRuYmJlbm5rYWVg7WNk42tU1h4fGvTBDT1zS19c9bs6p69Ut/ITFhETExcUkJSRlpOEYi0dQzy86o6mhFaygpLi0vqNx6/tGzHkWXbj/bMWmlu4yQpLS8tIy8lqyAjr+Tm5tPa3A9X31DX6R8Q0TBhxqkHLw5cfThv7Y6umSsiU0qdfeJExSSkgBpU1DPTCttbQFY01TSWFNWqqmuHxCadefr2+qc/K3cfm750U8f0VUWN8/kFhETFJWXkFIH+amuZUFFc2dczw8c7SE5eSVlNc8qq9Rfe/Tp65+WybYemL9ta1DKPl5dPRFRCFiirqhEcFN3ZNqWnfZKtrbOyqibQXkev4Hnbju6+8mDrqeuLN+3tmbUc6B4hYRFZOUUlVQ1HR/eutskdTd2FueVaOgYKiqp6RjbGVk5hiekTlqxdve/kgnU7/UKi+QUEgX5QUtEoziuvq2jMSkjob58c4B8O9IKcooq4pLSQsKi0rLyTl9/kBasnzVth6+QODGELc5v8nNLooCCglzvq2xtrO80tbIBaFJXVgeEhKSUrIioOjIKW/pmzV+0obZqRlNMc4BcGD9L+9olJ8ekGhqZAh2lo6QE1yiuqAJ1hbG7TNXtjZdfyvPoFIYEI9R01ja11nZ6e/oZGZgZGZvoGJkCNQDcrqmjm1k1LKuwK8AtHSxITOiZP6589d+r80JAYI1MLI2NzP9+Q/IzC5OzqrNwKBmwgJzmtu7GrrrzB2sbBxs6xtaalJLckLiwSq2IIKM/Omdg2MS4qMS0pc0Jbf0FKCh7FEDC1Y0J3Q2dfS29XXRtBxRAwrWtqb0sfkYqBoKu2pbGsBqsUAAD08vg=');
        color := 1842978;
      end;

    MM_SYMBOL_COOK:
      with result do
      begin
        name := 'Cook';
        bmp := BitmapFromString(9, 6, 'meJwBogBd/8TBv8zIxsfCwc3Jx6Sd' +
        'mmNVTcigiem/ppSGdm1mZldfZlpfZNrOyIeBfWxnZzAoJJJ2Z/LCp' +
        '1uetFSauaa1u3WkukNjepePjRgWFj0yLO29ok+ixjCJuCN+sD2GsL' +
        '++w7ewqxoYGD0yLOy8oeHa1+PW09/SztbLxa2qp6WfmSMhID4yLOm' +
        '3nLm5tq6tqaakoZ6bl56alaafmSclJEE2MOa0mfKWWXk=');
        color := -1;
      end;

    MM_SYMBOL_QUEST: // 10 September 2014
      with result do
      begin
        name := 'Quest';
        bmp := BitmapFromString(14, 17, 'meJxjYECAzTM73h7f8OXMlo8nN746vGbDtFYGbODN4dVnVkzvLCrOiE4Fop6yivOrZ78+vBpN2adja2Y1VOnoeIpK24d6x4Z6RYnJOOjp+y9ub/l8bA1c2bsjq1d0N5gY+6lqeEnJOmWHxGUGRUnJ2Kqqe1mYBm6e3P18zyKgsgvbll9cMU1D0zM2IKE/P3typN/l1tT9lbGTIv0m5OVG+0Rq6fje2jgPqPLVgRXN2YWCUh6G2p6biuPuTsq/1pF+ujHpzqT8DUWx2qoOfOIO3aU119dOf7Zzgb97rKC0V4C5575075NVUc8WNzyZV723OGR5tKObgZOAlEeob/rjrXMeb5nlYBN1urf4YnfOnQnZ96cVPZlVendS3uXujBu9mRe6c463Zzs5xD3eNPPu2ikRvqlCMj422o5zgm335/mdqok6VB6+Id1zsq+5laaDgJRbVEDqzdWTTs1t7yspE5EP0dUOXJESvCvLa32C87Jo+61pHovi/bTUfYRk/SdX1R+aAYqFKws6TUwTMjzCC70CEyxtlkU5zwu1T7GyzfMISHIKMDGNv7ZsMiQ8j02r29rdaGwUJaXgKyTjG2obGmTpKywXJKMcamwYtnNqz6GJ1fDAvzSnZUppubZBvJhSjI1hhKWun4h8qI5R8vTq+jMzGtAi9MTk2r6Ccln1BHHleFHFaCBjUkXDsSl1WBPJmWn108sqZTWSgGhWXcvJqdiVQcCpSVVdeeW9xfVnptTgUQYBRydUHO4rwxQHAMx/6QM=');
        color := 14520942;
      end;

    MM_SYMBOL_MILL:
      with result do
      begin
        name := 'Mill';
        bmp := BitmapFromString(15, 5, 'z78DAB58F3B0AC0300C43AF24A' +
          '75D3CD621BEFF9102D52228822C5D1EC69F878C8140CCA8AEE5D8' +
          'DD0BA97C223BED3E5E27C48CBAE7B878ABF54987B5337FB3E995D' +
          '26DF2973F323B33C9A9D26573A47303B52569D1');
        color := -1;
      end;

    MM_SYMBOL_DUNGEON: // 10 September 2014
      with result do
      begin
        name := 'Dungeon';
        bmp := BitmapFromString(14, 17, 'meJxjYEABV7YufHl43YvD6y5uWcCAA9zcvvD8iolTqrKLYwNLYgOnVudcWjX5xvaFaMreHlu/qLnYxVw/Pjq6pqqhurIhNirSzdJgaVPBo52L4Mru716ycUK9lbFhbm5JSWldbHRMXExsWVl9Rka+jYnpkqb6qROhJl9dM83RzDAqMjYuNkFFSVmQX1iAl19VRSUmuiA+fll47K2gqCf+YbcPze+aVJampaqanZWvp63NxMikohqmqOgjJqYfErE/JPqpo+dVV8/dPj4Lb6+fnuTnZKStnp2RIysjw8zEam41IyTqbnDkZXf/+3auZ7R1suyMzOvTEx5unBniYmWko56dmiIrJcHMzGFht8kj8AUQufpcNjXNEBcRsTfSXtWcf21ZX3aYl5GOWmJSopSkJAsLt7P3bZjKC9a22TISEoneDrsn1qzvKp9Xk2WorRYTFSMtKcnPp2Dr8gSIHDyuWDlssLHv0FRWml6StLy1GOj360v7fOzNPd08ZSUlRYXVVNTSxUUNODgkxcWUTE1sgIF8cX4bJJS29ZbvnVzvZmMmKSrCycYCRxIiwrZGOlv7a9a3FMAD/8iMpnk12U6mutKignxcHEAkKSLoYKwzvzL96IRKtAg9NKFqZmmKvZGWirSYioyYrZHWnPK0A73lWBPJicnVi2pzgCY7m+kua8w/NqkKV3ICgqP9FdNLU2dXZBzrr8CjDAL29Jbv7sFiKQBz/cAx');
        color := 7039084;
      end;

    MM_SYMBOL_WEAVE:
      with result do
      begin
        name := 'Weave';
        bmp := BitmapFromString(15, 5, 'z78DA33303230343074367472' +
          '73724526CD0C4C0C8CDC1C0D2DDD2C5D8DDD8C4C0CA0E2103644D' +
          'CDCD1CCD4C40CC246D66B0036D300AFC9986622B3293119979B21' +
          'ECC1E966649793EA6600F03E685F');
        color := -1;
      end;

    MM_SYMBOL_POTTERY:
      with result do
      begin
        name := 'Potter''s Wheel';
        bmp := BitmapFromString(8, 4, 'meJwzjd6k7bZY03fOnN4pGxatFxYS' +
        'AqK9k2oUHWYrO02pLWlYPGXRshnL4OLNpU3T27uBgkDU19AHEd/VV' +
        'wER6a3pLUwuBJJAQWlJ8W29lQB8SCe8');
        color := -1;
      end;

    MM_SYMBOL_WHEEL:
      with result do
      begin
        name := 'Spinning Wheel';
        bmp := BitmapFromString(15, 5, 'beNpjYGRgYDwABtn' +
          '+gvPnz28I1wGygSQaG8gAqoQoDrIQAJIQQbgauMiEWGs0xenWokAE0QVXD0dA' +
          'XciK58MAUAvIVcHaEJMh7kFWDAQQNZgk3D0MAH8HZ/A=');
        color := -1;
      end;

    MM_SYMBOL_GUIDE:
      with result do
      begin
        name := 'Guide';
        bmp := BitmapFromString(15, 5, 'z78DA33303400424717470B27' +
          '33086961E168E4EC64E866E264EE0C614349170B0B4B336411143' +
          '56059880906860848C06488995432193F89CB47F84D869A8FE14E' +
          '8869F8CD24C664E2431E533DC44C00EBA66771');
        color := -1;
      end;

    MM_SYMBOL_STORE:
      with result do
      begin
        name := 'General Store';
        bmp := BitmapFromString(15, 5, 'z78DA95D0410EC4200' +
          '840D12B2102C25290DEFF486DCA2C4C9A6666363F46E2D308020D' +
          '32D83DA2AA3E6804276633B66B7AB4006E7D5F57E9406E51DD05B' +
          '84D78C8435849DD5970E9EC0629AB13B692ABB5B34F279BCF6F32' +
          '12A15CE3E8B9B7EE3265C52C73EFF0818A6FB2CA085D4FF317598' +
          '484FA9B6C69689FB37FBFF9FEC35D3E01559765AB');
        color := -1;
      end;

    MM_SYMBOL_SHOP_SHIELD:
      with result do
      begin
        name := 'Shield Shop';
        bmp := BitmapFromString(15, 5, 'z78DACDCC3112C0200844D12' +
          'B611484920DE4FE47CA8CA63085BDCD9F6DF6511614BE233CEADA' +
          '16ECFC9553204DD36055D92EF56E2AFD99DB038EDF97864927C8C' +
          '339595EFD9D3CCD9DFC02CAE26976');
        color := -1;
      end;

    MM_SYMBOL_ALTAR:
      with result do
      begin
        name := 'Altar';
        bmp := BitmapFromString(15, 5, 'z78DA33703574323475767171' +
          '7431B670B574B2A4888498630036D300C96464F3DD880610F58E2' +
          'E4E8E4E501297C9C49B8F69267E37936732B25EFC26131F1AB84C' +
          '06006E357035');
        color := -1;
      end;

    MM_SYMBOL_ARROW:
      with result do
      begin
        name := 'Arrow';
        bmp := BitmapFromString(15, 5, 'z78DA33303570333470353437' +
          '3372249E343633B33475829026161646E626C8B20660330D904C8' +
          '6A841D6858BC454896C3EA6C9C498899FC465B2919BB1A5B12931' +
          '24A69910715C269317CEC866229B0C001E5A61CB');
        color := -1;
      end;

    MM_SYMBOL_BAR:
      with result do
      begin
        name := 'Bar';
        bmp := BitmapFromString(15, 5, 'z78DAB5CC310EC0200C43D12B41' +
          'E3001D0389EF7FA44ACD82D4952E5F968757B5B4E28EA56B66E33' +
          '685908EEEA4115736FF1523A016BD8113A636079B0877A1BE663D' +
          '24E73E25A7F99F9CE659F96BEEF2031A5D69A8');
        color := -1;
      end;

    MM_SYMBOL_UNDERGROUND:
      with result do
      begin
        name := 'Underground';
        bmp := BitmapFromString(15, 5, 'z78DA33303400422743' +
          '272727134CD2D5C2C8D4D01993B47033303630B434B474B2C4A2C' +
          'BC01001E96FB28B9BA3A10516335D5DCC8C4D9D293119D97C62CC' +
          '24D5646412622631260300830265FA');
        color := -1;
      end;

    MM_SYMBOL_TANNER:
      with result do
      begin
        name := 'Tanner';
        bmp := BitmapFromString(15, 5, 'z78DA8D904B0EC0200805AF0' +
          '4F85F4ABDFF991AFB162521D26E26462703919898BAAACEAB82B5' +
          'E5C4ABB52289FED316E8699229DBE63ECB8AA7F8D75319843374C' +
          'C594B4FC2C5177003C7FAE0A90CC2C92ACA392E5B3FDED9F22DCB' +
          '47D9FFF30DFAEB6308');
        color := -1;
      end;

    MM_SYMBOL_CHURN:
      with result do
      begin
        name := 'Churn';
        bmp := BitmapFromString(15, 5, 'z78DA9590410A00210845AFA4' +
          'A5FE5A564CF73FD240CE40502DDA3C5CE8031F318150D1ACE94C4' +
          '104C7D04365F159253E2C16A5737342B5735F6F6938E960D66430' +
          '9B0D1B5292146ECD92156ABF1F013CD39DBE736D1E05FCF644FFE' +
          '8BAC6A8FAF927AEB5338A958DF905A105631F');
        color := -1;
      end;

    MM_SYMBOL_HOUSE:
      with result do
      begin
        name := 'House';
        bmp := BitmapFromString(15, 5, 'z78DA9D90410AC0300804BF6' +
          '41B2DF66863F3FF2715BA978560A0BD0C32E2B228F766123D53BB' +
          '33E5F5A08DC3ECD434550779BBBE9D3D1290C9846FDEC63EC02A8' +
          '13D9B7F5C77AE9AF337B86DE4A5E1E0D7649EABE4F9F601C37765' +
          'F5');
        color := -1
      end;

    MM_SYMBOL_SHOP_AXE:
      with result do
      begin
        name := 'Axe Shop';
        bmp := BitmapFromString(15, 5, 'z78DA95D04B0EC3300804D02B91' +
          '0033F6127F72FF23A52A1BA4AA55BA1959483C036202E953A74F7' +
          'EA6BBC35B260C403335377680767CEB92B7293FE59A71BEBE187D' +
          '1136D2C7C583CAC6E0CCCABF7235B9A13A728B34EB2EA1E1F148E' +
          'E8D8655CDECADF7C977D69FC8B1BA0269E2B27DEEDA9B13D63933' +
          'EB356E4B7C6439');
        color := -1;
      end;

    MM_SYMBOL_COOK:
      with result do
      begin
        name := 'Cooking Shop';
        bmp := BitmapFromString(15, 5, 'z78DA8DCE410AC0300804C0' +
          '2F194CDCE42896FCFF49856E0F421072D983BA83D2C56485C608E' +
          '4C484236CA341999CBBFA7020A6CEFEDF74339B9CF3463E530A99' +
          '4993ADDCA55C6D6F647E955B959CB757F22754F2F9ED8DBCCCD01' +
          'B137B3CDAB290E76797E60B5A736560');
        color := -1
      end;

    MM_SYMBOL_WINDMILL:
      with result do
      begin
        name := 'Windmill';
        bmp := BitmapFromString(15, 5, 'z78DA3330313033B074367' +
          '6367536C745BA0181A11132E968EC68EA8853BD01D84C0324930D' +
          '5C4C8D8C9C217A91D9C48840D8B84CC6741BB22E6412974A885F6' +
          '8E1665C264348882C3289CB6DB848889900AC8467DB');
        color := -1;
      end;

    MM_SYMBOL_MINIGAME:
      with result do
      begin
        name := 'Minigame';
        Bmp := BitmapFromString(14, 17, 'meJxjYEAB745v/Hx6y8cTG18fWceAA7w9subM8umdJaXpUWlA1FNecX717DdH1qIp+3Rszaz6ah0dT1EZBzXjUjWjYjEZRz19n0XtLZ+PrYEre3NwxYquRgXNCFGFIEEpd3XTJjWTegEJZyBXUTNm06TuF3sWQ1ReWj1dXcNTzaTWwHGBjlmnre9Oc7eVWiZNhk4LlfQrNLV9b66fA1R2d/Ps1vwCoFHiihHGjsvdok47BO619t5sH3jG0GGxsIwPv4Rjd2nNjbXTn+yYH+AeKyjtJauebmQ7y9prnW/Kfdeou0b2i7RMWqWUowWlPUJ80x9umvF482wHmyjbwPNWPhftg646ht5wCLlv5X3VxPWoufspc48zJi6HnezjHm+aeW/9tAi/VCEZH3HFcA3Den3r5QZ2O3UsVqubTFHVrRBXCBWQcosKSL21atKZ+Z19xWXC8sESynF61st1LRdpGk9RM+jSMp2paTZfVCFSWC5wclX9kRktQE9dXtBpZJKgbNClqNstrZqsaTJJ3ahHVi1NQaddTqvB0CTh5srJ8CDd2t2oqZ8qIhciLB8kq1UnrVYGNEpUMVJNN27n1N7Dk2vgKi/ObZ1SWq6lHyemFCOlViihnC6qGK5jlDy9uv7srGa0CD0+ua6voFxWPUFCOUFUMRrImFTRcHxKPdZEcmZ6/fSySnmNZDmNpNn1LSen1eFKTkBwdkpNV15FT3HdmSnVeJRBwLEJFYd7SzHFAUr3y8A=');
        color := -1;
      end;

    MM_SYMBOL_TRADER_FUR:
      with result do
      begin
        name := 'Fur Trader';
        bmp := BitmapFromString(15, 5, 'z78DA3330313033B0743' +
          '67636753647262D2C4C8C0D2C31497357A07A0B64D2D1D8D1D4D1' +
          '1C4242F41A80CD34C06132A6F9C49849BCC9B8CCC76526792623B' +
          'B16BF7A52438378F321660200DE126419');
        color := -1;
      end;

    MM_SYMBOL_SHOP_ARCHERY:
      with result do
      begin
        name := 'Archery';
        bmp := BitmapFromString(15, 5, 'z78DAA5CE490AC0201' +
          '044D12BB5560F71E910EF7FA4403A0B8318846CFEAA78143129A5' +
          '8A2AD5769A9A29172F8385CD9B91253F1BBA4DDA964733A91A07D' +
          '7FEC8A366A702C59D51DB9215140BF77804BCCC2E0D6136E7AE64' +
          '37477FF5F35BBE0049C36545');
        color := -1;
      end;

    MM_SYMBOL_SHOP_STAFF:
      with result do
      begin
        name := 'Staff Shop';
        bmp := BitmapFromString(15, 5, 'z78DAA5D03B0AC0300C0' +
          '3D02BD9F1AF198D83EF7FA442BCB6C1B48B26F110020685191412' +
          'D6C9A96A8C96B2089D5CFCA103DB84B65CA60F49CC32FFCBA55D8' +
          'B7DD0D9ECCBFD9DDFE4F3AB6FF20D38E96664');
        color := -1;
      end;

    MM_SYMBOL_SHOP_CLOTHES:
      with result do
      begin
        name := 'Clothes Shop';
        bmp := BitmapFromString(15, 5, 'z78DA8DD04B0AC0200' +
          'C45D12D3DF2D13A0CE9FED754681CA4484A267720CF8308C1C072' +
          '76F51925BE2023CAB2A0D66916F09A487236CF66A73AAFE4686C8' +
          'C4D6DE25622AFE4D8E4FDBE55C8D1BE9CF7FF6FFEFC585B3EFFF9' +
          '012BE4618A');
        color := -1;
      end;

    MM_SYMBOL_FARMING:
      with result do
      begin
        name := 'Farming Spot';
        bmp := BitmapFromString(15, 5, 'beNpjYGRgYDyAAwRZC' +
          'Lir87iJ8c2fPx/IBarEpRiicj4M4FGMrBIuiKm4rKw0PSMDqBhNJaZiiEoIQl' +
          'MJUgwAOf97Lg==');
        color := -1;
      end;

    MM_SYMBOL_APOTHECARY:
      with result do
      begin
        name := 'Apothecary';
        bmp := BitmapFromString(15, 5, 'z78DA9DD0310AC030088' +
          '5E12B69A3A68ED6D6FB1FA9D02C4230942CFF241F0F814040BD39' +
          '7BAFAA8748C46847C2A75B33B6F21E3E13967236B33CBA2767CDD' +
          '5EFE05926C5F3D23DB932B33C7FE6FFE66AED5A7E01E72B65AE');
        color := -1;
      end;

    MM_SYMBOL_SHOP_SWORD:
      with result do
      begin
        name := 'Sword Shop';
        bmp := BitmapFromString(15, 5, 'z78DA95D0410AC030080' +
          '4C02FD9C66CE25125FFFF524BBD08A5C520EC41964124269078F3' +
          'EEE33FC5EF918535971A1B0C6000539B761D91D1A4C7A4829CCD1' +
          '06293E5DCFF929BF231CEBAB92B47EE9A956FBC2FAF9859BE0057' +
          'DB6637');
        color := -1;
      end;

    MM_SYMBOL_SHOP_PLATEBODY:
      with result do
      begin
        name := 'Platebody Shop';
        bmp := BitmapFromString(15, 5, 'z78DA8DD0410AC02' +
          '00C44D12BA56832761902BDFF910A9DCD8055DCFC850C4FD1BA85' +
          'DDD5CA0B6CF48818F1E042633190A87D55B0CF349167534FD459D' +
          'DBB92596EB2A527DC3DFC4FFE6EE446F7EC4A66CF65DDEFDFAC3D' +
          '97E77F7E014609646B');
        color := -1;
      end;

    MM_SYMBOL_SHOP_SCIMITAR:
      with result do
      begin
        name := 'Scimitar Schop';
        bmp := BitmapFromString(15, 5, 'z78DA9DD04D0AC340' +
          '0805E02B8D7FCF71399349EF7FA4A6B8A825109A203C5CE887D8A' +
          '81D356962CA3FD9475FDD96AE581012880405E267A6D1B7CE0277' +
          '61DBAB56CDEC6963A2F14CAE5AA69B0FF76ADE95315CBDA59FBB2' +
          'AEAAAF50367F35A0630711C0AB697B1B9E9678223F3DAACF21B5C' +
          '65625E');
        color := -1;
      end;

    MM_SYMBOL_STALL_GEM:
      with result do
      begin
        name := 'Gem Stall';
        bmp := BitmapFromString(15, 5, 'z78DAA58E4B0AC0300844' +
          'AFA4F96719F3B9FF919A640A154A3729836F21FA18629A1196201' +
          '6ECCD772FE0E03AAA057B32F350338DF50B6A03F1932FF34DEDDC' +
          '1BED0433E7900FCD835C76011B89BFCDAFB6AEAEFB504FCC6013F' +
          '6C4DA8C9E306B1653E29C4D6DBE0027B7630B');
        color := -1;
      end;

    MM_SYMBOL_STALL_SILK:
      with result do
      begin
        name := 'Silk Stall';
        bmp := BitmapFromString(15, 5, 'z78DA333034004227432' +
          '733276364D2C2C4C0D0D488181253AF81210262CA42484B67030B' +
          '33476248DA996C696869664994C9C48706B299F84D36733630347' +
          '62486849889CB6400B4306127');
        color := -1;
      end;

    MM_SYMBOL_SHOP_PLATESKIRT:
      with result do
      begin
        name := 'Plateskirt Shop';
        bmp := BitmapFromString(15, 5, 'z78DA3330340042' +
          '2743273327634CD2D9D8CCC2D9009974323235763282909686966' +
          '696587419182220F126239B4F9EC9B8DC8929423B93315D4E2034' +
          '709843BCC900457662CC');
        color := -1;
      end;

    MM_SYMBOL_AGILITY:
      with result do
      begin
        name := 'Agility';
        bmp := BitmapFromString(15, 5, 'beNpjYGRgYDwABkAGEM2fPx' +
          '+NAWHDFRyAAbgssgIIA1Mxsnq4GjyK0czHFMcUmQ8G6I4EAIrAWyc=');
        color := -1;
      end;

    MM_SYMBOL_TRAINING_DUMMY:
      with result do
      begin
        name := 'Training Dummy';
        bmp := BitmapFromString(15, 5, 'z78DAA5CC5B0AC43' +
          '00805D02D69468DF9BC6DEAFE97D401032384F92845B8888F434C' +
          'DF0210386A6A6B9D3833270E0F5F5B7371D2FD2B93F857FFE4D4A' +
          'AE962D402E738ED1A0768E08D5CE743FA14A49CB9DF3C95CDA4B3' +
          'A6EC1FB73E6BBE974D6572403C74F9AB2F9769DEA32D69B5');
        color := -1;
      end;

    MM_SYMBOL_SHOP_FOOD:
      with result do
      begin
        name := 'Food Shop';
        bmp := BitmapFromString(15, 5, 'z78DAA5D0610AC0200806' +
          'D02B559ADA4F37DAFD8F3499C11C6D63B02F900A79882959B28AC' +
          'A825E09908A0893A0B4C25441ED49A0DA2AB3DFFDDF7B467FE64D' +
          'C88594CF13E56651A08C1DD66146F9A82E47532C0DDFE531F92C8' +
          '77A9183F945BED9C66F396EC385D91F321AD29FE41DF6B66191');
        color := -1;
      end;

    MM_SYMBOL_SHOP_FISHING:
      with result do
      begin
        name := 'Fishing Shop';
        bmp := BitmapFromString(15, 5, 'z78DA3330340042470B470B' +
          '27134CD2D2C2C4C8C010425A0081A509844456832962608880E49' +
          '9099431773425DE64E2CD4426F19B8C6CA6990950812BAE50C234' +
          '19D9765C6E8698894C62BA193334304D0600DE086263');
        color := -1;
      end;

    MM_SYMBOL_JEWELERY:
      with result do
      begin
        name := 'Jewelery';
        bmp := BitmapFromString(15, 5, 'z78DA9D904B0AC0300844A' +
          'F646843E2D24FBCFF911A6217820DB4DD0C32EA43070A28B08088' +
          '6054AB664DB46B07E64276220109A1D7EEFB4CDE85C5840D79E0E' +
          '05223D3D5BBEEFB4CF4DF933333AA5FFE957CFFDB95DB5356CBFF' +
          '479E471FB395F2DCE59FC917FB9B6AAB');
        color := -1;
      end;

    MM_SYMBOL_SHOP_CRAFTING:
      with result do
      begin
        name := 'Crafting';
        bmp := BitmapFromString(15, 5, 'z78DA95CEC10AC020' +
          '0C03D05F8AD3D979AC71FFFF4BC27A29C8A45E420EE111240C748' +
          '2648B24BEFDD5B36414149626F793E45D3708CBDEACA98EAA662A' +
          '94DA2C4FE5D5F49A374FE53F73FF642F9B693D627A79020EC868E' +
          'C');
        color := -1;
      end;

    MM_SYMBOL_PORTAL:
      with result do
      begin
        name := 'Portal';
        bmp := BitmapFromString(15, 5, 'z78DAA5D04B0AC0300805' +
          'C02B69D2D6B8D47CEE7FA4045CD442ED22457848D0410208AB549' +
          '4942D2F4858DAA9B05A6A4895251DB93FD2DE6DC6E6BD0078D7B7' +
          'A98374A0CFC86761E2173977C052F764DB8DE43F375B46F2DE3F7' +
          'BD3CB13F26764CE');
        color := -1;
      end;

    MM_SYMBOL_MAKEOVER_MAGE:
      with result do
      begin
        name := 'Makeover Mage';
        bmp := BitmapFromString(15, 5, 'z78DA333034703170' +
          '7236707676B68490066011571367734B174CD2D2D8CCD5C418993' +
          '4C06182015E9391D5608A209BEC68E0E8EC4882C9C4BB99129391' +
          'DD499EC9F8CDC76526A6C9003E5F6688');
        color := -1;
      end;

    MM_SYMBOL_SHOP_MACE:
      with result do
      begin
        name := 'Mace Shop';
        bmp := BitmapFromString(15, 5, 'z78DA9DD14B0A80300C04' +
          'D02B4D4CF3E93226DEFF4A82155404296EB21A1E330484C29AC8C' +
          'CFE7DAD7BB89A38D9A6696EA2A4A511888C4712878909D9521BB3' +
          'A6086368B248C969FE932F7381546BE477ED6DCEC80F135C64DFD' +
          'A8C7CDFFEEE39F39161EE1ADD6893');
        color := -1;
      end;

    MM_SYMBOL_HAIR_DRESSER:
      with result do
      begin
        name := 'Hair Dresser';
        bmp := BitmapFromString(15, 5, 'z78DA33303470317072' +
          '36707676B68490066011030C71E2D5E0977534707476C4A206998' +
          'DAC8654B7E1B2059984C84248F27C8D6C3EB269C4BB19531CD91C' +
          '4CF7E37233005E916796');
        color := -1;
      end;

    MM_SYMBOL_SHOP_MINING:
      with result do
      begin
        name := 'Mining Shop';
        bmp := BitmapFromString(15, 5, 'z78DA33B03430313074' +
          'B670367672C5241D2D1C8D2DA1A40158258474737473333285909' +
          '8BA9055E232199944360DBFF9C49B8C6926B22F20E21011FC263B' +
          '5998BAC0447099499EC9C498896C022E9301172B6823');
        color := -1;
      end;

    MM_SYMBOL_STALL_SILVER:
      with result do
      begin
        name := 'Silver Stall';
        bmp := BitmapFromString(15, 5, 'z78DA958E410AC0400' +
          '803BF14D1823D6E6DF3FF2715EA4510A17B09C198211008347031' +
          'A4AB4169E2E6EA071F06EFF4F5DE5BF89818C8D9ADB4AE13FF0FB' +
          '976FBF2F4F9B370726D90FBB64977C913BFA6D3E61755066363');
        color := -1;
      end;

    MM_SYMBOL_STALL_SPICE:
      with result do
      begin
        name := 'Spice Stall';
        bmp := BitmapFromString(15, 5, 'z78DA9DD0C10E80200C' +
          '03D05FEA06883B22D2FFFF2413F140B240D44BD3C3FA0E8340102' +
          'A0E5619D3984CAC714B50B224D1A72B9BEEBDF71BBFC56DC2C96F' +
          'CCB5EFE5A9F9D1F77244609C66B67CE6B6CE0263997EE39FDFCD5' +
          '1BE002BE06493');
        color := -1;
      end;

    MM_SYMBOL_SHOP_FARMING:
      with result do
      begin
        name := 'Farming Shop';
        bmp := BitmapFromString(15, 5, 'z78DA95CE410E80200' +
          'C44D12B4D5B405C160CF73F92C461D1C498E0E6D374F1280402EB' +
          '68A30B6B559340150D25F5F95ED55392D556735365BBA96B661DE' +
          '7F025E031F192A9D1E75CAA1D52A2CFD2E42FFB7234BFE478FF8E' +
          '9CE7128332E72FEDAF1C2FDF91A319E51BD93562F0');
        color := -1;
      end;

    MM_SYMBOL_SLAYER_MASTER:
      with result do
      begin
        name := 'Slayer Master';
        bmp := BitmapFromString(15, 5, 'z78DAA5D04B0AC030' +
          '0804D02B8D89A5CD320D9DFB1FA9BF8D622D8582B810E6210381A' +
          '00EAC1CA2A85461E3F34C1CB366FBCE7634F6533C4C04D9FAEE62' +
          '84ECF22EDB3F9D53B89525CADF7F4E1BB864B77FB411B359C351D' +
          'E019F8C655C');
        color := -1;
      end;

    MM_SYMBOL_SLAYER_CONTRACT:
      with result do
      begin
        name := 'Slayer Contract';
        bmp := BitmapFromString(8, 8, 'meJw7cOCAna0dEFlZfUBGWAUh4kBS' +
        'TnUKEMEFgWxkxRApCAkRZ2RgACK4AiAbWRwiBWGgWQrXheweZF0AZ' +
        'Mk/Hw==');
        color := -1;
      end;

    MM_SYMBOL_HERBALIST:
      with result do
      begin
        name := 'Herbalist';
        bmp := BitmapFromString(15, 5, 'z78DA7D8E5D0AC0300883' +
          'AFA4FDD33E5AC6EE7FA415C258C0D10A22267E8DA8EC5A253C9CB' +
          'B5EF5166D7D4C89DE6DE9C45C6DF8BB1733FBBB15FD0A1B10B001' +
          '99F9CCC42C5AB77B16DFEF4C86BF370B355C653272428513EA990' +
          'C3FF3393954EEFC2327CFE4CCCFC933136A263F5CC35F29');
        color := -1;
      end;

    MM_SYMBOL_SHOP_CANDLE:
      with result do
      begin
        name := 'Candle Shop';
        bmp := BitmapFromString(15, 5, 'z78DA33303400422723' +
          '470B470B4CD2CDD0C2D5C01042BA9ABB9A9A3A218BE0D26560888' +
          '0B8D4209B8F6CB2A591051040488A4C367035753571317136B134' +
          '8390B8CC1CEA26030022F6653F');
        color := -1;
      end;

    MM_SYMBOL_SAWMILL:
      with result do
      begin
        name := 'Sawmill';
        bmp := BitmapFromString(15, 5, 'z78DAB58EB10DC03008045' +
          '70A600C2EFDF1FE33450A299088A53469AEB08FD3D3498D7861C9' +
          '3A2A4D3ABA0FF1E99619EFBB2BBA9B54CA0A157D69C66FED87FFA' +
          '55CD7663FF7C30120F87173EEEFCA266DF2431F0AB6E11D3C770C' +
          'A76EBE00CD48658B');
        color := -1;
      end;

    MM_SYMBOL_SHOP_KEBAB:
      with result do
      begin
        name := 'Kebab Shop';
        bmp := BitmapFromString(15, 5, 'beNpj4OBg4Dh37BgQZTtJRDFwZM8' +
          'xhKD/mpo9DAwgEScJiAKgSohioIjEFJBKIAlEQJUQxcjqkRUDVULE' +
          'gSQQzUl2ArKB5N7qKCBj6dKlyIoh4lhJNMWY6iEIZCNYJUgxALQIU' +
          '2Q=');
        color := -1;
      end;

    MM_SYMBOL_SHORTCUT:
      with result do
      begin
        name := 'Agility Shortcut';
        bmp := BitmapFromString(15, 5, 'z78DA8D90410AC0300804' +
          'BFA421A1E95137EDFF9F54E8F62088259741161D64C5B4E98573E' +
          '9821B1A206E3EE49F5DAC1F835724F36F7E9D12CCD370DBE40EE7' +
          '9854FE9864330DF993C8ECC9CC66F65039F7FD551B3BDCFFF9018' +
          '756682E');
        color := -1;
      end;

    MM_SYMBOL_SHOP_HUNTER:
      with result do
      begin
        name := 'Hunter Shop';
        bmp := BitmapFromString(15, 5, 'z78DA95D0510AC3300' +
          '806E02BC558CDEFA309F6FE47DAC08E3942A143F041934FB1517B' +
          '87C78447CD76BA591CCA445015EE5DD641C459F9D4F554C997F56' +
          'FA36FEC3204819E663A77F25CAE633C972F01BC48AAB9FBB9C373' +
          '79DFB6E69C98DDE1E0813FAE1106FCF897564C992A6277F20B925' +
          '96443');
        color := -1;
      end;

    MM_SYMBOL_HUNTING:
      with result do
      begin
        name := 'Hunting';
        bmp := BitmapFromString(15, 5, 'z78DA8DCF410A00' +
          '210C03C02FC52D76E9B18AFFFF92B0EB2150025E728876AC78916' +
          '8D3678C55D360F6F89FE919211B9EC267A2C87CB32F6FFD08EC70' +
          'CF6FDDC8D554597F712FF3AC3AE546C96A1FE573B2BC0197F063A' +
          'B');
        color := -1
      end;

    MM_SYMBOL_SAND:
      with result do
      begin
        name := 'Sand Source';
        bmp := BitmapFromString(15, 5, 'z78DA8DCF4B0AC0300' +
          '804D02B8DA9F9B84CA4BDFF91526A16820D64330CA20F0481208A' +
          '51B4FA1C4998CBD07EE5D5EFA654B34F9BC75B7C2682BC336D72E' +
          '247B921239137577766ECB629E9BD959D5CC14CCF8F1FBE88A665' +
          '8794BE952DFDFE49DA95972794856206');
        color := -1;
      end;

    MM_SYMBOL_SHOP_PET:
      with result do
      begin
        name := 'Pet Shop';
        bmp := BitmapFromString(15, 5, 'beNpj42Nm4zt87GxnbWFhUkh' +
          'skCsQ7dm7CYIgXKB4dUkYUA1QJVwxULyypllFSQMoBUEQLlAcyF68' +
          'bA1ccV1hBlAQKAXkQoxdOL0LyMalGCgLUQYRhOsCOgOI0BQfWt0JQ' +
          'TomBhAEVAnkAo0FGg5SDADYtlua');
        color := -1;
      end;

    MM_SYMBOL_OBELISK:
      with result do
      begin
        name := 'Summoning Obelisk';
        bmp := BitmapFromString(15, 5, 'beNpj42Nm4zt87CwE2SVP1' +
          'XaoKeidC0SeUTWfHj4AiixetgYoCCSBKuGKgSKVNc1AZXMO3AOpWf' +
          '8EqBiiEaIFrhioEigCRJPnrAAqBqJjl98BEVAlxFigGmSTIVqAtgM' +
          'VAI0FqgeSEBMwFQNVAo0FigPVgxjrnwB1Obj4IBQDAImMdLM=');
        color := -1;
      end;

    MM_SYMBOL_SHOP_SUMMONING:
      with result do
      begin
        name := 'Summoning Shop';
        bmp := BitmapFromString(15, 5, 'meJyzicq0QUKMDAzIyAZVFk3ZAVS' +
          'AVQtQJGrCfCA6gA0gqweyFyxY8OjFi5MPvwLVb9uyEVM9muLJ377C' +
          '1WNqgRgOABDhZzk=');
        color := -1;
      end;

    MM_SYMBOL_SPOT_REST: // 10 September 2014
      with result do
      begin
        name := 'Resting Spot';
        bmp := BitmapFromString(14, 20, 'meJxjYEAH74+te3t0DYYwCri+ZcG9rfNqUsLrUiMe7Zx/ZcssTDU3ty16vW/pstZiBWkJNlZWIAIyVrSXvj+44taWOXBlrw6sOj6/K9rLnouTnREJcHGwx3k7nlrc83r/MqCyD4dX9hYkaCrJsbOzAUF0dHQUDERERCgrK2spy00qS3u7b8nrvYutDLS4ubkg6ODBg6thYMuWLR4e7lxcnHbGuq/2LHq+a6GVviZc5YoVKzhgwMTExMXFBajSxlj32c4FT7bMttTTEOTnAyI+Xp5ly5ZxcnLw8HDz8vJYWlp6e3sBtdsYaT/ePAuIrA20hIWEIGjBggU83FyCAgJAto21tZeXJy8Pt72J3qNNMx+sn2ZnpAMUNzc3r6+vnzx5MtA0MVHRpKSk3t5eoO1AXU7mhvfXTb27ZjJQpayMdGZmxowZM0pLS/l4eQ0NDBYtWtTV1WVmZiokKOhganBn9aS7ayenBbppqihbW1rGREdraWkK8PMDNcbGxvr6+kpKSijISmeEet9c3reiteTc7Nbp5eneduYykhJAZ0iIi8tIS0sBFYmLOZoZTipJPTOnFR5NZ2Y0HJlSmxfmLS8rq6Qgr6yoAGQURAccmFRzdGotZuwfnVytrqKsoqQIREDGqRmNuNLSxrbi+oQgVWUlIGrLjlvdmIcn4R3pq7A3NXC0MD6J20AIOD25BmhsS0b00f4K/CqB4FBf+cHeMoLKgGBXR+GG+kxMcQBnPMK+');
        color := 920844;
      end;

    MM_SYMBOL_RUNECRAFTING: // 21 September 2014
      with result do
      begin
        name := 'Runecrafting';
        bmp := BitmapFromString(16, 19, 'meJxjYECAxoYurIgBGygpbfMPiL' +
        'K2cTG3sLOxdQYiIMPKyt7fL7SyvBFNcXF5b1hii5F9cnLH0uoZa2Z' +
        'tPTZ396k5u09O23wwKDE7MSG9rLQOWX1O1XSBmluSTa+Uy845FKzO' +
        '7VhdMnlF3ZzVjfPX5zRO8PIJrqpAWFFe0RAWlafhV2c083Xa5X8KU' +
        'z9oRa2LrlyY0za7oGdBYd9Cz4ik2Njk0tJaiPqaigYNLWP/mGLHhI' +
        'Wq2ZeLrv8TK7jjkrjIN7UjILMzp2NOat0EbX3j8pIaoOLamlZnZ3c' +
        'lNc3kml6X2Ba+uNsNL//brvkhkPBGIPmxuke1d2pDYt1kY3tvoLLa' +
        '6pbamjZ9A2N5ZTXflHLfzDZ1p1qZ3jf5h34WHP7V+uQ/j89eI88yn' +
        '4xmU5cAXV3D2srG7LzShLgUKRk5Q3tvz5Ram5AahYBpSv6rxSMvT3' +
        'nwR3Xaa+mAxaY+hXJq+mEhUdk5RSAnVTRYWlirGdo4RBTYhebZBOe' +
        '6hpdrhi1T6PhWceu/xdK3Epb1ugZWRXml0MDMLcpIyZZX1tCx8TJy' +
        'jwQiY/doTetYKcVo4eQXrpu/y/j0h4ZlpmXkw4O0orjK0cFZTlFNV' +
        'sNETs9e3tBZXs9F3tBHwqmLz32uVvj0tIxqtCjOTs/VUNcUEhbhF5' +
        'IQEJEWEJYQEJMVEVNWUbWMjC0PCI9DU19RUl1WVJmWlKGtYyAhKQ1' +
        'EQEZkeFxeVkFJYTnWJAfRlZuZr6mhBURZqdkl+WW4VMJBS22zt4cP' +
        'EAEZBBUDQXlJZVlBGQgVVxKjHgg6GtqAiEjFQJCZmQtEWKUAGX3nxA==');
        color := 7324409;
      end;

    MM_SYMBOL_LODESTONE: // 5th October 2014
      with result do
      begin
        name := 'Lodestone';
        bmp := BitmapFromString(12, 11, 'meJwdiklLAmEAhv9Qh0BlJAgcFR' +
        'EtmrFtsrHJpVz6LP1mnFxQXDJwoSzRATGLUiOs6BClENGhU+cCf05' +
        'vwXN43mXcLjXV4PdAu0/m7xL5l9IxgCD+DDVME+3oVPZPR61bJfNe' +
        'rzxk8u1AHEAQUU5H7YYS6GWjX1r9MproU5XMrxTCaQC5iaV7JIEJh' +
        '7dGdkiV6wO5wEtJH31+/QAQRJQDqkzOs5NaqhsmnVBEta9Rb+yseQ' +
        'EgiJ1gpBvZG1cPW7LvKSdXBE/RtbE8YyZbBECKnFhZ92BqUZ/ktHy' +
        'epNIO1xUJqDZenDUDCGLG6cKEA2c1KcJCP76r2paqglD7B4I4lIOY' +
        'cNjkHHNGhq46HpOhptedW+QBBBElJhxEzsmaWIPBwDK6ssSPUjsAg' +
        'vhXmlgcymRb9ov7kmC3WhjGqNfpAQQRJSYcfgH3Zq3k');
        color := 7751249;
      end;

    MM_SYMBOL_DIVINATION:
      with result do
      begin
        name := 'Divination';
        bmp := BitmapFromString(11, 9, 'meJw7cAAFtLE4rOHP+P3nF5ABEQF' +
        'y//gfMGWWYWRgAApCEJALRGgKgOL/+NZDELIaoCzQQCAbqBIo9S1s' +
        'LlAEogyiAKISogAoC0QvLxyGqIHbgmwXUBZo4K+JFyC2YLofqAZoC' +
        'JABcS3Q5chqgFyIdUAGsjMwAVAv0CigRUAFAPKplbk=');
        color := -1;
      end;
    else
      print('Invalid symbol constant: ' + toStr(sym), TDebug.ERROR);
  end;
end;

(*
TRSMinimap.findSymbols
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.FindSymbols(const Symbols: TIntegerArray; const SearchArea: TBox; out FSymbols: TFoundSymbols; FindOne: Boolean = False): Boolean; overload;

Searches for all of the symbols in 'Symbols' in the area 'SearchArea', Results
True if atleast 1 symbol has been found, with the symbol data in the FSymbols param.

* Param FindOne is set to false on default, but if enabled the function will only
  search for one of each symbol.

.. note::

    - by Olly
    - Last Updated: 10 September 2014 by Olly

Example:

.. code-block:: pascal

    procedure Test_Symbols();
    var
      Symbols: TFoundSymbols;
      i: Integer;
    begin
      Minimap.FindSymbols([MM_SYMBOL_BANK, MM_SYMBOL_DUNGEON, MM_SYMBOL_FISHING, MM_SYMBOL_QUEST, MM_SYMBOL_SPOT_REST], Minimap.getBounds(), Symbols, False);

      for i := 0 to High(Symbols) do
      begin
        smartImage.drawCircle(Symbols[i].Pos, 7, False, clLime);
        smartImage.drawCross(Symbols[i].Pos, 5, clLime);
        Writeln(Symbols[i].Acc);
      end;
    end;
*)
function TRSMinimap.findSymbols(const Symbols: TIntegerArray; const SearchArea: TBox; out FSymbols: TFoundSymbols; FindOne: Boolean = False): Boolean; overload;
var
  Bitmap, i, Targ, OldTarg, Wid, Hei, bWid, bHei: Integer;
  Sym: _TRSSymbol;
  SearchBox, SymBox: TBox;
  P: TPoint;
  Acc: Extended;
label
  Loop;
begin
  Bitmap := BitmapFromClient(SearchArea);
  OldTarg := GetImageTarget();
  Targ := SetTargetBitmap(Bitmap);
  SearchBox := IntToBox(0, 0, SearchArea.X2 - SearchArea.X1, SearchArea.Y2 - SearchArea.Y1);
  GetBitmapSize(Bitmap, bWid, bHei);

  for i := 0 to High(Symbols) do
  begin
    Sym := Self._getSymbol(Symbols[i]);

    if (Sym.Color = -1) then
    begin
      Printf('%s symbol needs to be updated! Please post a bug report in the SRL bugs section.', [Sym.name], TDebug.ERROR);
      Result := false;
    end;

    GetBitmapSize(Sym.Bmp, Wid, Hei);

    Loop:
    if (FindDeformedBitmapToleranceIn(Sym.Bmp, P.X, P.Y, SearchBox, 40, 0, True, Acc)) then
      if (Acc > Self.symbolAccuracy) then
      begin
        SymBox := IntToBox(P.X, P.Y, Min(P.X + Wid, bWid - 1), Min(P.Y + Hei, bHei - 1));

        if (CountColorTolerance(Sym.Color, SymBox, 30, ColorSetting(1)) > 1) then
        begin
          RectangleBitmap(Bitmap, IntToBox(SymBox.X1, SymBox.Y1, Min(SymBox.X1 + 10, bWid - 1), Min(SymBox.Y1 + 12, bHei - 1)), 1);
          Inc(P.X, SearchArea.X1 + (Wid div 2));
          Inc(P.Y, SearchArea.Y1 + (Hei div 2));
          Insert([Symbols[i], P, Acc], FSymbols);
          if (not FindOne) then
            goto Loop;
        end;
      end;
    FreeBitmap(Sym.Bmp);
  end;

  SetImageTarget(OldTarg);
  FreeTarget(Targ);
  FreeBitmap(Bitmap);

  Result := (Length(FSymbols) > 0);
end;

(*
TRSMinimap.findSymbol
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.findSymbol(var p: TPoint; symbol: integer; searchBox: TBox): boolean;

Returns true if the "symbol" is found in the "searchBox". Stores it's coordinates
in "p".

.. note::

    - by Stupid3ooo
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (minimap.findSymbol(p, MM_SYMBOL_BANK, minimap.getBounds()) then
    begin
      writeln('Found bank symbol');
      mouse(p, MOUSE_LEFT);
      wait(500 + random(500));
      minimap.waitFlag(10);
    end;
*)
function TRSMinimap.findSymbol(var p: TPoint; symbol: integer; searchBox: TBox): boolean;
var
  Symbols: TFoundSymbols;
begin
  Result := Self.FindSymbols([Symbol], SearchBox, Symbols, True);
  if (Result) then
  begin
    Printf('TRSMinimap.findSymbol(): Found symbol %d at accuracy %f', [Symbol, Symbols[0].Acc], TDebug.SUB);
    p := Symbols[0].Pos;
  end else
    p := Point(-1, -1);
end;

(*
TRSMinimap.findSymbols
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.findSymbols(var tpa: TPointArray; symbol: integer; searchBox: TBox): boolean;

Returns true if one or more of the "symbol" is found.  Stores each instance's corrdinates
in "tpa".

.. note::

    - by lordsaturn
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    symbols := minimap.findSymbols(tpa, MM_SYMBOL_FISHING, intToBox(minimap.x1, minimap.cy, minimap.x2, minimap.y2));
*)
function TRSMinimap.findSymbols(var tpa: TPointArray; symbol: integer; searchBox: TBox): boolean; overload;
var
  Symbols: TFoundSymbols;
  i: Integer;
begin
  Result := Self.FindSymbols([Symbol], SearchBox, Symbols);
  if (Result) then
  begin
    for i := 0 to High(Symbols) do
      Insert(Symbols[i].Pos, tpa);

    Printf('TRSMinimap.findSymbols(): Found %d symbols (ID: %d)', [Length(Symbols), Symbol], TDebug.SUB);
  end;
end;

(*
TRSMinimap.findSymbols
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.findSymbols(var tpa: TPointArray; symbols: TIntegerArray; searchBox: TBox): boolean; overload;

Returns true if one of the symbols in "symbols" is found in "searchBox".  Stores
each symbol's coordinates in "tpa".

.. note::

    - by Nava2 & NCDS
    - Last Updated: 23 May 2013 by Coh3n

Example:

.. code-block:: pascal

    symbols := minimap.findSymbols(tpa, [MM_SYMBOL_BANK, MM_SYMBOL_FISHING], minimap.getBounds());
*)
function TRSMinimap.findSymbols(var tpa: TPointArray; symbols: TIntegerArray; searchBox: TBox): boolean; overload;
var
  fSymbols: TFoundSymbols;
  i: Integer;
begin
  Result := Self.FindSymbols(Symbols, SearchBox, fSymbols);
  if (Result) then
  begin
    for i := 0 to High(fSymbols) do
      Insert(fSymbols[i].Pos, tpa);

    Printf('TRSMinimap.findSymbols(): Found %d symbols', [Length(fSymbols)], TDebug.SUB);
  end;
end;

(*
TRSMinimap.isResting
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.isResting(): boolean;

Returns true if the player is resting.

.. note::

    - by Olly
    - Last Updated: 08 August 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.isResting()) then
      writeln('we are resting!');
*)
function TRSMinimap.isResting(): boolean;
var
  tpa: TPointArray;
begin
  result := false;

  // blue color
  if (not findColorsTolerance(tpa, 13345801, self.button[MM_BUTTON_RUN].bounds, 50)) then
    exit();

  result := inRange(length(tpa), 5, 25);
end;

(*
TRSMinimap.getRunEnergy
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.getRunEnergy(): integer;

Returns the players current run energy.

.. note::

    - by Olly
    - Last Updated: 08 August 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.isResting()) then
      writeln('we are resting!');
*)
function TRSMinimap.getRunEnergy(): integer;
begin
 // il figure this out soon..
end;

(*
TRSMinimap.isRunEnabled
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.isRunEnabled(): boolean;

Returns true if the players run is enabled.

.. note::

    - by Olly
    - Last Updated: 08 August 2013 by Olly

Example:

.. code-block:: pascal

    if (minimap.isRunEnabled()) then
      writeln('Our run is enabled!');
*)
function TRSMinimap.isRunEnabled(): boolean;
var
  tpa: TPointArray;
begin
  result := false;

  if (not findColorsTolerance(tpa, 2805490, self.button[MM_BUTTON_RUN].bounds, 20)) then
    exit();

  result := (length(tpa) > 5);
end;

(*
TRSMinimap.toggleRun
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMinimap.toggleRun(enable: boolean);

Will toggle run on if enable is set to true, else will turn the run off.

.. note::

    - by Olly
    - Last Updated: 08 August 2013 by Olly

Example:

.. code-block:: pascal

    minimap.toggleRun(true);
*)
procedure TRSMinimap.toggleRun(enable: boolean);
var
  p: TPoint;
begin
  p := self.button[MM_BUTTON_RUN].center;

  case enable of
    true:
      if (not self.isRunEnabled()) then
      begin
        mouseCircle(p.x, p.y, self.button[MM_BUTTON_RUN].radius, MOUSE_LEFT);
        print('minimap.toggleRun(): Enabled run', TDebug.SUB);
      end;

    false:
      if (self.isRunEnabled()) then
      begin
        mouseCircle(p.x, p.y, self.button[MM_BUTTON_RUN].radius, MOUSE_LEFT);
        print('minimap.toggleRun(): Disabled run', TDebug.SUB);
      end;
  end;
end;

(*
TRSMinimap.toggleRun
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMinimap.toggleRun(minRunPercent: integer); overload;

Overloaded procedure that will toggle the run on if our run is greater than
'minRunPercent'.

.. note::

    - by Olly
    - Last Updated: 08 August 2013 by Olly

Example:

.. code-block:: pascal

    minimap.toggleRun(50);
*)
procedure TRSMinimap.toggleRun(minRunPercent: integer); overload;
begin
  // needs getRunEnergy()
{
  if (not self.isRunEnabled()) then
    if self.getRun() > minRunPercent then
      self.toggleRun(true);
}
end;

(*
__GridCoords16
~~~~~~~~~~~~~~

.. code-block:: pascal

    function __GridCoords16(Grid16: TPoint): TPoint;

Helper for MMToMs.

.. note::

    - by Narcle
    - Last Updated: 08 August 2013 by Olly

Example:

.. code-block:: pascal

    __GridCoords16(point(50, 50));
*)
Function __GridCoords16(Grid16: TPoint): TPoint;
var
  Yh, yM, x, y: Extended;
  p: TPoint;
begin
  p := mainScreen.playerPoint;

  x := Grid16.x;
  y := Grid16.y;
  yM := 45.0;
  Yh := Abs(Y + yM);

  result.x := round(p.x + (X*6.7/(12.8-(Yh/yM*3.10)))*9.75);
  result.y := round(p.y + Y * (4.40 + ((Yh/yM)*1.40)));

  if (not pointInBox(result, mainScreen.getBounds())) then
    result := [-1, -1];
end;

(*
TRSMinimap.pointToMainscreen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.pointToMainscreen(const point: TPoint): TPoint;

Converts a point on the minimap to a point on the mainscreen

.. note::

    - by Narcle
    - Last Updated: 21 November 2013 by Olly

Example:

.. code-block:: pascal

    p := minimap.pointToMainscreen(minimap.getCenterPoint());
*)
function TRSMinimap.pointToMainscreen(const point: TPoint): TPoint;
begin
  result := __GridCoords16([point.x-self.cx, point.y-self.cy]);
end;

(*
TRSMinimap.pointsToMainscreen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMinimap.pointsToMainscreen(points: TPointArray; sortFromPlayer: boolean = true): TPointArray;

Converts a tpa of points on the minimap to mainscreen points, will delete points
that aren't on the mainscreen.

.. note::

    - by Narcle
    - Last Updated: 21 November 2013 by Olly

Example:

.. code-block:: pascal

    tpa := minimap.pointsToMainscreen(mmDots);
*)
function TRSMinimap.pointsToMainscreen(points: TPointArray; sortFromPlayer: boolean = true): TPointArray;
var
  i, hi: integer;
  p, tmp: TPoint;
begin
  hi := high(points);

  if (hi < 0) then
    exit;

  for i := 0 to hi do
  begin
    tmp := self.pointToMainscreen(points[i]);

    if (not tmp.equals(point(-1, -1))) then
      insert(tmp, result);
  end;

  if (sortFromPlayer) then
    sortTPAFrom(result, mainScreen.playerPoint);
end;

begin
  minimap.__init();
end;

{$f+}
