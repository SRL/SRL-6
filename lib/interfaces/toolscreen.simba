(*
Tool Screen
============

The toolscreen file holds functions and procedures that are used in the runescape toolscreen.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/toolscreen.simba>`_.

*)

{$f-}

(*
Consts, Types, Vars
~~~~~~~~~~~~~~~~~~~

The following constants, types and variables are used throughout the toolScreen methods.

**type TRSToolScreen**

.. code-block:: pascal

    type
      TRSToolScreen = type TRSInterface;

A type that stores the toolScreen interface properties.

*)
type
  TRSToolScreen = type TRSInterface;

(*
**var toolScreen**

.. code-block:: pascal

    var
      toolScreen: TRSToolScreen;

A variable through which scripters can access the TRSToolScreen type methods.

*)
var
  toolScreen: TRSToolScreen;

(*
TRSToolScreen methods
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following methods should be called through the **toolScreen** variable.

Example:

.. code-block:: pascal

    if toolScreen.isOpen() then
      writeln('Tool screen is open!');
*)

{*
__init
------

.. code-block:: pascal

    procedure TRSToolScreen.__init();

Initializes the TRSToolScreen.

.. note::

    - by footballjds
    - Last Updated: 14 December 2013 by footballjds

Example:

.. code-block:: pascal

    toolScreen.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSToolScreen.__init();
begin
  with (self) do
  begin
    name := 'RS Choose Tool Screen';
    ID := ID_INTERFACE_TOOL;
    parentID := -1;
    isStatic := false;
  end;
end;
{$ENDIF}

{*
__find
------

.. code-block:: pascal

    function TRSToolScreen.__find(): boolean;

Returns true if the toolScreen interface is detected and its bounds are set.
Scripters should use toolScreen.isOpen() below.

.. note::

    - by Ashaman88
    - Last Updated: 4 November 2014 by The Mayor

Example:

.. code-block:: pascal

    if toolScreen.__find() then
      writeln('The toolScreen is open, and the bounds are set!');
*}
{$IFNDEF CODEINSIGHT}
function TRSToolScreen.__find(): boolean;
const
  TEXT_COLOR = 2070783;
  TEXT_TOP = [54, 79]; // 'knife' and 'needle' length
  TEXT_BOTTOM = 40;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: integer;
  b: TBox;
begin
  if (not findColors(TPA, TEXT_COLOR, getClientBounds())) then
    exit(false);

  ATPA := TPA.cluster(9);

  for i := 0 to high(ATPA) do
    if inRange(length(ATPA[i]), TEXT_TOP[0],  TEXT_TOP[1]) then
    begin
      b := ATPA[i].getBounds();
      b.offset([0, 118]);

      if findColors(TPA, TEXT_COLOR, b) then
        if length(TPA) = TEXT_BOTTOM then
        begin
          b := TPA.getBounds();
          self.setBounds([b.x1 - 186, b.y1 - 183, b.x2 + 186, b.y2 + 15]);
          exit(true);
        end;
    end;
end;
{$ENDIF}

(*
isOpen
------

.. code-block:: pascal

    function TRSToolScreen.isOpen(waitTime: integer = 0): boolean;

Returns true if the toolScreen interface is open. The optional **waitTime** parameter
*(default = 0)* is the maximum time (in milliseconds) it will keep looking.

.. note::

    - by footballjds
    - Last Updated: 4 November 2014 by The Mayor

Example:

.. code-block:: pascal

    if toolScreen.isOpen() then
      writeln('The toolScreen is open!');
*)
function TRSToolScreen.isOpen(waitTime: integer = 0): boolean;
var
  t: LongWord;
begin
  t := (getSystemTime() + waitTime);

  repeat
    if self.__find() then
    begin
      result := true;
      break;
    end;
  until (getSystemTime() >= t);

  print('TRSToolScreen.isOpen(): Result = ' + boolToStr(result));
end;

(*
select
-----------------

.. code-block:: pascal

    function TRSToolScreen.select(tool: integer): boolean;

Returns true if it selects the tool **tool** . This is the same as the above
method except the **tool** parameter takes an integer instead of a string.

.. note::

    - by akarigar
    - Last Updated: 17 December 2014 by akarigar

Example:

.. code-block:: pascal

    if toolScreen.select(1) then
      writeln('We started making something!');
*)
function TRSToolScreen.select(tool: integer): boolean;
var
  timeout : LongWord;
begin
  if (tool <= 0) or (not self.isOpen()) then
    exit(false);

  timeout := getSystemTime() + randomRange(1500, 1900);
  repeat
    multiType(intToStr(tool), randomRange(30, 50), 2, false);
    wait(100 + random(50));
    result := not self.isOpen();
  until (getSystemTime() > timeout) or result;

  print('TRSToolScreen.select(): result = ' + lowercase(boolToStr(result)), TDebug.SUB);
end;

begin
  toolScreen.__init();
end;

(*
select (overload)
------

.. code-block:: pascal

    function TRSToolScreen.select(tool: string; key: boolean = true): boolean; overload;

Returns true if it selects the tool **tool** . If the **key** parameter is set
to true *(default = true)* then it will press the corresponding key, else it
will use the mouse.

.. note::

    - by footballjds
    - Last Updated: 17 December 2014 by akarigar

Example:

.. code-block:: pascal

    if toolScreen.select('Knife') then
      writeln('We started making something!');
*)
function TRSToolScreen.select(tool: String; key: boolean = true): boolean; overload;
const
  TEXT_COLOR = 2070783;
var
  textArea: TBox;
  boxArr: TBoxArray;
  i : integer;
  p: TPoint;
begin
  result := false;

  if (not self.isOpen()) then
    exit();

  textArea := [self.x1, self.y1 + 55, self.x2, self.y2 - 125];
  boxArr := grid(3, 1, 50, 50, 102, 0, [self.x1 + 93, self.y1 + 113]);

  result := (findText(p, TEXT_COLOR, 5, [string(tool)], [StatChars], textArea));

  if (result) then
    for i := 0 to high(boxArr) do
      if (pointInBox([p.x + 20, p.y + 50], boxArr[i])) then
      begin
        if key and self.select(i + 1) then
          exit(true);
        mouseBox(boxArr[i], MOUSE_LEFT);
      end;

  print('TRSToolScreen.select(): result = ' + lowercase(boolToStr(result)), TDebug.SUB);
end;

{$f+}
