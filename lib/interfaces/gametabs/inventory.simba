(*
Inventory
=========

The Inventory file holds functions and procedures that are used in the
Runescape inventory gametab.

*)

{$include_once gametab.simba}

(*
const Inventory low/high
~~~~~~~~~~~~~~~~~~~~~~~~

Integer constants that represent the highest and lowest inventory slots.

*)
const
  INV_SLOT_LOW = 1;
  INV_SLOT_HIGH = 28;


(*
const Drop Patterns
~~~~~~~~~~~~~~~~~~~

TIntegerArray constants that represent drop patterns.

*)
const
  DROP_PATTERN_REGULAR := TIntegerArray([1..28]);
  DROP_PATTERN_BACKWARDS := TIntegerArray([28..1]);
  DROP_PATTERN_SNAKE := [28, 27, 26, 25, 21, 22, 23, 24, 20, 19, 18, 17, 13,
                         14, 15, 16, 12, 11, 10, 9, 5, 6, 7, 8, 4, 3, 2, 1];
  DROP_PATTERN_UP_DOWN := [1, 5, 9, 13, 17, 21, 25, 26, 22, 18, 14, 10, 6, 2,
                           3, 7, 11, 15, 19, 23, 27, 28, 24, 20, 16, 12, 8, 4];

(*
type TRSTabInventory
~~~~~~~~~~~~~~~~~~~~

A type that stores functions and properties of the Runescape inventory tab.

*)
type
  TRSTabInventory = record(TRSInterface)
    tabIndex: integer;
    __inventoryGrid: TBoxArray;
end;


(*
var tabInventory
~~~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape inventory tab.

*)
var
  tabInventory: TRSTabInventory;


{*
TRSTabInventory.__init
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSTabInventory.__init();

Initiates the tabInventory variable. Called at the end of this file.

.. note::

    by Ollybest
    Last updated: Mar. 15, 2013 by Ollybest

Example:

.. code-block:: pascal

    tabInventory.__init();

*}
procedure TRSTabInventory.__init();
begin
  with self do
  begin
    name := 'RS Inventory tab';
    ID := ID_INTERFACE_TAB_INVENTORY;
    tabIndex := _TAB_INVENTORY;
    parentID := -1;
    static := true;
    x := _gameTabArea.x1;
    y := _gameTabArea.y1;
    w := (_gameTabArea.x2 - x);
    h := (_gameTabArea.y2 - y);
    __inventoryGrid := Grid(4, 7, 31, 31, 42, 36, point(578, 278));
  end;
end;


(*
TRSTabInventory.isOpen()
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.open(): boolean;

Returns true if our current tab is the inventory tab.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

    if (tabInventory.isOpen()) then
      writeln('the inventory tab is open');
*)
function TRSTabInventory.isOpen(): boolean;
begin
  result := (getCurrentTab = self.tabIndex);
end;


(*
TRSTabInventory.open()
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.open(): boolean;

Opens the inventory tab if we're currently not on it.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

    if (tabInventory.open()) then
      writeln('We opened the inventory tab');
*)
function TRSTabInventory.open(): boolean;
begin
  result := true;

  if (not (self.isOpen)) then
    result := _openGameTab(self.tabIndex);
end;


(*
TRSTabInventory.invaildSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.invaildSlot(slot: integer): boolean;

Returns if the desired slot is not vaild.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

    if (tabInventory.invaildSlot(35)) then
      writeln('WARNING: slot 35 is invaild');
*)
function TRSTabInventory.invaildSlot(slot: integer): boolean;
begin
  result := (not (inRange(slot, INV_SLOT_LOW, INV_SLOT_HIGH)));

  if (result) then
    printToDebug('The slot "' + intToStr(slot) + '" is an incorrect slot!');
end;


(*
TRSTabInventory.getSlotBox
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.getSlotBox(slot: integer): tbox;

Returns the tbox of the desired inventory slot.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   var
     b: tbox;
   begin
     b := tabInventory.getSlotBox(1);
   ...
   ..
   .

*)
function TRSTabInventory.getSlotBox(slot: integer): tbox;
begin
  if (self.invaildSlot(slot)) then
    exit(intToBox(-1, -1, -1, -1));

  // - 1 because the grid (array) starts at 0.
  result := __inventoryGrid[slot - 1];
end;


(*
TRSTabInventory.isItemInSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.isItemInSlot(slot: integer): boolean;

Returns true if an item is in the desired inventory slot.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   if (tabInventory.isItemInSlot(1)) then
     writeln('We have an item in slot number 1');

*)
function TRSTabInventory.isItemInSlot(slot: integer): boolean;
var
  b: tbox := getSlotBox(slot);
begin
  if (not self.open()) then
    exit(false);

  if (self.invaildSlot(slot)) then
    exit(false);

  result := b.colorExists(OUTLINE_BLACK);
end;


(*
TRSTabInventory.pointToSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.pointToSlot(p: tpoint): integer;

Returns the inventory slot number in which the tpoint falls within.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   var
     p: tpoint;
     i: integer;
   begin
     if finddtm(p.x, p.y, dtm, tabInventory.getBounds()) then
       i := tabInventory.pointToSlot(p);

     writeln('our dtm is in slot ' + intToStr(i));
   ...
   ..
   .

*)
function TRSTabInventory.pointToSlot(p: tpoint): integer;
var
  hi: integer := INV_SLOT_HIGH;
  i: integer := INV_SLOT_LOW;
begin
  if (not (pointInBox(p, self.getBounds()))) then
    exit;

  for i to hi do
    if pointInBox(p, self.getSlotBox(i)) then
      exit(i);

  result := 0;
end;

(*
TRSTabInventory.getInvCount
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.getInvCount: integer;

Returns how many items are in our inventory.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   writeln(tabInventory.getInvCount);

*)
function TRSTabInventory.getInvCount: integer;
var
  i: integer := INV_SLOT_LOW;
  hi: integer := INV_SLOT_HIGH;
begin
  result := 0;

  if (not self.open()) then
    exit;

  for i to hi do
    if (self.isItemInSlot(i)) then
      inc(result);
end;


(*
TRSTabInventory.isInvCount
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.isInvCount(count: integer; waitTime: integer = 0): boolean;

Returns true if our inventory count is "count", also includes an optional waitTime
parameter useful for waiting for a set inventory count.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   if tabInventory.isInvCount(10) then
     writeln('we have 10 items in our inventory.');

*)
function TRSTabInventory.isInvCount(count: integer; waitTime: integer = 0): boolean;
var
  t := getSystemTime() + waitTime;
begin
  result := false;

  if (self.invaildSlot(count)) then
    exit;

  repeat
    if (self.GetInvCount = count) then
      exit(true);
  until (getSystemTime() > t);
end;


(*
TRSTabInventory.isInvFull
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.isInvFull: boolean;

Returns true if our inventory is full.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   if tabInventory.isInvFull then
     writeln('our inventory is full!');

*)
function TRSTabInventory.isInvFull: boolean;
var
  i: integer := INV_SLOT_LOW;
  hi: integer := INV_SLOT_HIGH;
begin
  if (not self.open()) then
    exit(false);

  result := true;

  for i to hi do
    if (not (self.isItemInSlot(i))) then
      exit(false);
end;


(*
TRSTabInventory.isInvEmpty
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.isInvEmpty: boolean;

Returns true if our inventory is empty.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   if tabInventory.isInvEmpty then
     writeln('our inventory is empty!');

*)
function TRSTabInventory.isInvEmpty: boolean;
begin
  if (not self.open()) then
    exit(false);

  result := (not (self.getBounds().colorExists(OUTLINE_BLACK)));
end;


(*
TRSTabInventory.mouseSlot
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.mouseInvSlot(slot, button: integer): boolean;

Moves and performs the desired mouse action at the selected inventory slot.

.. note::

    by Ollybest
    Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   if tabInventory.mouseSlot(1, MOUSE_MOVE) then
     writeln('We moved the mouse to inventory slot 1');

*)
function TRSTabInventory.mouseSlot(slot, mouseAction: integer): boolean;
var
  b: tbox := self.getSlotBox(slot);
  p: TPoint;
begin
  if (not self.open()) or (self.invaildSlot(slot)) then
    exit(false);

  if (not (inRange(mouseAction, 0, 3))) then
  begin
    printToDebug('mouseSlot: invalid mouse button');
    exit(false);
  end;

  result := true;
  mouseBox(b, mouseAction);
end;


(*
TRSTabInventory.isSlotActivated
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.isSlotActivated(slot: integer): boolean;

Will return true if a desired slot is activated.

.. note::

    by Ollybest
    Last Updated: March. 12, 2013

Example:

.. code-block:: pascal

   if tabInventory.isSlotActivated(28) then
     writeln('Slot 28 is activated.');

*)
function TRSTabInventory.isSlotActivated(slot: integer): boolean;
var
  b: tbox := self.getSlotBox(slot);
begin
  if (not self.open()) or (self.invaildSlot(slot)) then
    exit(false);

  result := b.colorExists(OUTLINE_WHITE);
end;


(*
TRSTabInventory.getActivatedSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.getActivatedSlot: integer;

Returns what slot is activated, if none are it will return - 1.

.. note::

    by Ollybest
    Last Updated: March. 12, 2013

Example:

.. code-block:: pascal

   var
     i: integer;
   begin
     i := getActivatedSlot;
   ...
   ..
   .

*)
function TRSTabInventory.getActivatedSlot: integer;
var
  i: integer := INV_SLOT_LOW;
  hi: integer := INV_SLOT_HIGH;
begin
  if (not self.open()) or (not (self.getBounds().colorExists(OUTLINE_WHITE))) then
    exit(- 1);

  for i to hi do
    if self.isSlotActivated(i) then
      exit(i);

  result := - 1;
end;


(*
TRSTabInventory.dropItems
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSTabInventory.dropItems(slots: TIntegerArray = [1..28]);

Drops items in the TIntegerArray, the parameter slots its optional if untouched
the procedure will drop all items in slots 1 to 28. Can also be used with
drop patterns.
    * tabInventory.dropItems(); - would drop items in slots 1..28
    * tabInventory.dropItems([1, 2, 25, 6]); - would drop items in slots 1, 2, 25 and 6
    * tabInventory.dropItems(DROP_PATTERN_SNAKE);  - would use the drop pattern "snake"

.. note::

    by Ollybest
    Last Updated: March. 12, 2013

Example:

.. code-block:: pascal

    tabInventory.dropItems();

*)
procedure TRSTabInventory.dropItems(slots: TIntegerArray = DROP_PATTERN_REGULAR);
var
  l: integer := length(slots);
  i: integer := 0;
  r: integer := 1;
  tia: TIntegerArray;
begin
  if (not self.open()) then
    exit;

  if (l < 1) then
  begin
    printToDebug('dropItems: you didnt enter any slots to drop.');
    exit;
  end;

  // small chance of mixing some slots up
  if (random(12) = 5) then
    if (l = 28) then
      for r to (l - 4) do
        swap(slots[randomRange(r - 1, r + 4)], slots[randomRange(r - 1, r + 4)]);

  for i to l - 1 do
    if (not (self.invaildSlot(slots[i]))) then
      if self.isItemInSlot(slots[i]) then
      begin
        self.mouseSlot(slots[i], MOUSE_RIGHT);
        if chooseOption(['Drop', 'drop', 'rop']) then
        begin
          insert(slots[i], tia);
          wait(120 + random(305));
        end;
      end;

  if (length(tia) > 0) then
  begin
    tia.sortQuick;
    printToDebug('dropItems: Dropped items in slots ' + toStr(tia));
  end else
    printToDebug('dropItems: Failed finding any items to drop');
end;


(*
TRSTabInventory.countItemsDTM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.countItemsDTM(dtm: integer): integer;

Searches for the dtm in each inventory slot and will return how many matches it finds.

.. note::

    by Ollybest
    Last Updated: March. 12, 2013

Example:

.. code-block:: pascal

    var
      dtm: integer;
      i: integer;
    begin
      dtm := dtmFromString('lotsofstuffhere');
      i := tabInventory.countItemsDTM(dtm);
      writeln('We counted ' + intToStr(i) + ' items in our inventory.');
    ...
    ..
    .

*)
function TRSTabInventory.countItemsDTM(dtm: integer): integer;
var
  i : integer := INV_SLOT_LOW;
  hi: integer := INV_SLOT_HIGH;
begin
  result := 0;

  if (not self.open()) then
    exit;

  for i to hi do
    if self.getSlotBox(i).dtmExists(dtm) then
      inc(result);

  printToDebug('countItemsDTM: counted ' + intToStr(result) + ' items.');
end;


(*
TRSTabInventory.clickItemsDTM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabInventory.clickItemsDTM(dtms: TIntegerArray; clicktype: integer; option: string; waitFor: integer = 300): integer;

Searches for the dtm(s) and if found will perform what action is it set to do
accepts multiple dtms. Will return how many items were clicked.
    * DTMs - enter the dtm(s) (accept multiple dtms) to search for.
    * clicktype - what will the mouse do?
        MOUSE_MOVE
        MOUSE_LEFT
        MOUSE_RIGHT
    * option - what option to choose. If not using MOUSE_RIGHT just leave it blank.
    * waitFor - this is optional and on defualt is set to 300, if burying a bone you
                may need a longer wait time than something else.

.. note::

    by Ollybest
    Last Updated: March. 12, 2013

Example:

.. code-block:: pascal

    //  would search for one dtm and click the item.
    tabInventory.clickitemsDTM([dtm], MOUSE_MOVE, '');

    //  would search for multiple dtms and a 1000ms wait after burying the item.
    tabInventory.clickItemsDTM([dtm1, dtm2], MOUSE_RIGHT, 'bury', 1000);

*)
function TRSTabInventory.clickItemsDTM(dtms: TIntegerArray; clicktype: integer; option: string; waitFor: integer = 300): integer;
var
  l: integer := length(dtms);
  hi: integer := INV_SLOT_HIGH;
  i: integer := INV_SLOT_LOW;
  ii: integer;
begin
  if (l < 1) then
  begin
    printToDebug('clickItemsDTM: You didnt enter any dtms.');
    exit(- 1);
  end;

  if (not self.open()) then
    exit(- 1);

  for i to hi do
    for ii := 0 to (l - 1) do
      if self.getSlotBox(i).dtmExists(dtms[ii]) then
      begin
        self.mouseSlot(i, clickType);
        if (clickType = MOUSE_RIGHT) and (option <> '') then
          chooseOption([option], MOUSE_LEFT, 200);

        inc(result);
        wait(waitFor + random(100));
      end;

  printToDebug('clickItemsDTM: clicked ' + intToStr(result) + ' items.');
end;

begin
  tabInventory.__init();
end;
