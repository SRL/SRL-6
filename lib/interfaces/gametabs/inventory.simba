(*
Inventory
=========

The Inventory include contains all inventory-related functions.

.. contents::

*)

(*
Constant: Outline
~~~~~~~~~~~~~~~~~

Integer constants that represents item outline color.

Example:

.. code-block:: pascal

  FindColorsTolerance(P, OUTLINE_BLACK, Box.X1, Box.Y1, Box.X2, Box.Y2, 0);

*)
const
  OUTLINE_BLACK = 131072;
  OUTLINE_WHITE = 16777215;

(*
Constant: Inventory TBox Coordinates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TBox constants that represents the TBox coordinates for the inventory border.

Example:

.. code-block:: pascal

  Result := (not FindColor(X, Y, OUTLINE_BLACK, MI_BOX.X1, MI_BOX.Y1, MI_BOX.X2, MI_BOX.Y2));

*)
const
  MI_BOX := IntToBox(547, 252, 737, 506);

(*
Constant: Center Inventory Coordinates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TPoint constant that represents the center point of the inventory

Example:

.. code-block:: pascal

  SortTPAFrom(TPA, Point(MI_CP.X, MI_CP.Y));

*)
const
  MI_CP := point(642, 384);

(*
Type: TItem
~~~~~~~~~~~

A record that stores useful information about inventory Items.  It is up to
the scripter to use these attributes in their scripts.

Example:

.. code-block:: pascal

  with TItem do
  begin
    Name := 'Log';
    Slot := 1;
    Stack := False;
  end;

*)
type
  TItem  = record
    width, height : Integer; // the width and height of the item
    count : Integer;         // the count of the item
    itemBox : TBox;          // the exact box around the item
    centerPoint : TPoint;    // the center point inside the item
    itemExists : Boolean;     // to define the item Exists
    name : String;           // to define name of an item.
    colorArr : TIntegerArray;// to define an array of colors
    checkSum : Integer;      // to define the checksum used in Item scanning
    TPACount : Integer;      // the length of the Items TPA
    slot : Integer;          // the Slot the item is in.
    stack : Boolean;         // to define if the item stacks
  end;
  TItemArray = array of TItem;

(*
invBox
~~~~~~

.. code-block:: pascal

    Function invBox(Slot :Integer): TBox;

Returns TBox of surrounding Inventory SlotBox
1-2-3-4
5-6-7-8
etc.

.. note::

    by Boreas
    Modified: by Ogre July 15th 2009.
    Last Modified: by BraK October 1st 2012.

Example:

.. code-block:: pascal

  iBox := invBox;
  MMouse(randomRange(iBox.x1, iBox.x2), randomRange(iBox.y1, iBox.y2), 0, 0);

*)
function invBox(Slot :Integer): TBox;
var
  Slot1, Slot6: TBox;
begin
  if not InRange(Slot, 1, 28) then
  begin
    Result := IntToBox(-1,-1,-1,-1);
    Exit;
  end;
  Slot1 := IntToBox(563, 263, 594, 294);
  Slot6 := IntToBox(605, 299, 636, 330);
  Result.x1 := Slot1.X1 + (((Slot + 3) mod 4) * (Slot6.X1 - Slot1.X1));
  Result.y1 := Slot1.Y1 + (((Slot - 1) div 4) * (Slot6.Y1 - Slot1.Y1));
  Result.x2 := Result.x1 + (Slot1.X2 - Slot1.X1);
  Result.y2 := Result.y1 + (Slot1.Y2 - Slot1.Y1);
end;

(*
getItem
~~~~~~~

.. code-block:: pascal

    function getItem(Slot: Integer) : TItem;

Returns The Width, Height, Count, ItemBox and CenterPoint of the given Item Slot.

.. note::

    by SKy Scripter and BraK

Example:

.. code-block:: pascal

  TItem := getItem(InvSlot);
  MMouse(TItem.centerPoint.x, TItem.centerPoint.y, 2, 2);

*)
function getItem(Slot: Integer) : TItem;
var
  I, Cx, Cy : Integer;
  P : TPointArray;
  MinP, MaxP : TPoint;
  Box : TBox;
begin
//  GameTab(tab_Inv);
  Box := invBox(Slot);
  FindColorsTolerance(P, OUTLINE_BLACK, Box.X1, Box.Y1, Box.X2, Box.Y2, 0);
  Result.Count := Length(P);
  if (Result.Count = 0) then Exit;
  Result.ItemExists := True;
  MinP := P[0];
  MaxP := P[Result.Count-1];
  Cx := P[0].x + P[Result.Count-1].x;
  Cy := P[0].y + P[Result.Count-1].y;
  for I := 1 to Result.Count - 2 do
  begin
    if (P[i].x < MinP.x) then MinP.x := P[i].x;
    if (P[i].y < MinP.y) then MinP.y := P[i].y;
    if (P[i].x > MaxP.x) then MaxP.x := P[i].x;
    if (P[i].y > MaxP.y) then MaxP.y := P[i].y;
    Cx := Cx + P[i].x;
    Cy := Cy + P[i].y;
  end;
  Cx := Cx div Result.Count;
  Cy := Cy div Result.Count;
  Result.CenterPoint := Point(Cx, Cy);
  Result.Width  := MaxP.x - MinP.x;
  Result.Height := MaxP.y - MinP.y;
  Result.ItemBox := PointToBox(MinP, MaxP);
  result.Slot := Slot;
end;

(*
getInventoryArray
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function GetInventoryArray : TItems;

Returns The Width, Height, Count, ItemBox and CenterPoint in array [0..27] of
all Items in the inventory.

.. note::

    by SKy Scripter

Example:

.. code-block:: pascal

  invItems := getInventoryArray);
  for i := 3 to 7 do
    MMouse(invItems[i].centerPoint.x, invItems[i].centerPoint.y, 2, 2);

*)
function getInventoryArray : TItemArray;
var
  I: Byte;
begin
  SetLength(Result, 28);
  for I := 0 to 27 do
   Result[I] := GetItem(i + 1);
end;

(*
slotCoords
~~~~~~~~~~

.. code-block:: pascal

    function slotCoords(i: Integer): TPoint;

Returns X and Y of Specified Inventory Slot

.. note::

    by RsN

Example:

.. code-block:: pascal

  Coords := slotCoords(3);
  MMouse(Coords.x, Coords.y, 2, 2);

*)
function slotCoords(Slot: Integer): TPoint;
var
  Box: TBox;
begin
  Box := InvBox(Slot);
  Result.X := (Box.X1 + Box.X2) Shr 1;
  Result.Y := (Box.Y1 + Box.Y2) Shr 1;
end;

(*
coordsToSlot
~~~~~~~~~~~~

.. code-block:: pascal

    function coordsToSlot(X, Y: Integer): Integer;

Returns which Inventory slot the X and Y coords are in. If the
coords are between slots (or not in the inventory area at all) it will return 0.

.. note::

    by Boreas and BraK

Example:

.. code-block:: pascal

  Writeln('Item found in slot '+IntToStr(coordsToSlot(point.x, point.y)));

*)
function coordsToSlot(X, Y: Integer): Integer;
begin
  if not PointInBox(Point(X, Y), IntToBox(MI_BOX.X1, MI_BOX.Y1, MI_BOX.X2, MI_BOX.Y2)) then
    exit;
  for Result := 1 to 28 do
    if PointInBox(Point(X, Y), InvBox(result)) then
      exit;
  Result := 0;
end;

(*
getInvItemBounds
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getInvItemBounds(InvSpot: Integer; var T: TBox): Boolean;

If item exists, returns TBox of the item, else returns the normal InvBox.

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

  for i := 1 to 7 do
    if getInvItemBounds(i, iBox) then
      Writeln('Item found in slot '+IntToStr(i));

*)
function getInvItemBounds(Slot: Integer; var T: TBox): Boolean;
var
  TPA: TPointArray;
begin
//  GameTab(tab_inv);                                                           //Off until Gametab is done
  if (not FindColors(TPA, OUTLINE_BLACK, T.x1, T.y1, T.x2, T.y2)) then          //No shortcut elevation
  begin
    Result := False;
    T := invBox(Slot);
    Exit;
  end;
  Result := True;
  T := GetTPABounds(TPA);
end;

(*
itemExists
~~~~~~~~~

.. code-block:: pascal

    function itemExists(Slot: Integer): Boolean;

Checks if item in inventory at specified position exists

.. note::

    by WT-Fakawi and BraK

Example:

.. code-block:: pascal

  for i := 1 to 28 do
    if itemExists(i) then
      Inc(Count);

*)
function itemExists(Slot: Integer): Boolean;
begin
//  GameTab(tab_Inv);                                                            //Off until Gametab is done
  result := getItem(Slot).itemExists;
end;

(*
invCount
~~~~~~~~

.. code-block:: pascal

    function invCount: Integer;

Returns amount of items in your inventory

.. note::

    by RsN

Example:

.. code-block:: pascal

  totalCount := invCount;

*)
function invCount: Integer;
var
  I: Integer;
begin
  Result := 0;
  //GameTab(tab_inv);                                                           //Off until Gametab is done
  for I := 1 to 28 do
    if (itemExists(I)) then
      Inc(Result);
end;

(*
invEmpty
~~~~~~~~

.. code-block:: pascal

    function invEmpty: Boolean;

Returns True if inventory is empty

.. note::

    by WT-Fakawi

Example:

.. code-block:: pascal

  if invEmpty then
    CloseBank;

*)
function invEmpty: Boolean;
var
  X, Y: Integer;
begin
  //GameTab(tab_Inv);                                                           //Off until Gametab is done
  Result := (not FindColor(X, Y, OUTLINE_BLACK, MI_BOX.X1, MI_BOX.Y1, MI_BOX.X2, MI_BOX.Y2));
end;

(*
invFull
~~~~~~~

.. code-block:: pascal

    function invFull: Boolean;

Returns True if inventory is full

.. note::

    by n3ss3s

Example:

.. code-block:: pascal

  if invFull then
    walkToBank;

*)
function invFull: Boolean;
var
  i : integer;
begin
  //GameTab(Tab_Inv);                                                           //Off until Gametab is done
  Result := True;

  for i := 1 to 28 do
    if (not itemExists(i)) then
    begin
      Result := False;
      exit;
    end;
end;

(*
itemActivated
~~~~~~~~~~~~~~

.. code-block:: pascal

    function itemActivated(Slot: Integer): Boolean;

Checks if item in specified inventory slot has a white outline.
Returns True if the item has a white outline, otherwise returns false.

.. note::

    by marpis

Example:

.. code-block:: pascal

  Result := itemActivated(4);

*)
function itemActivated(Slot: Integer): Boolean;
var
  X, Y: Integer;
  TB: TBox;
begin
  result := false;
//  if not GameTab(tab_Inv) then
//    exit;
  TB := invBox(Slot);
  Result := FindColor(x, y, OUTLINE_WHITE, TB.x1, TB.y1, TB.x2, TB.y2);
end;

(*
getActivatedItem
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getActivatedItem : integer;

Returns the selected item in invetory (if any), else returns -1.

.. note::

    by mastaraymond and BraK

Example:

.. code-block:: pascal

  Slot := getActivatedItem;

*)
function getActivatedItem: integer;
begin
  for result := 1 to 28 do
    if itemActivated(result) then
      exit;
  result := - 1;
end;
