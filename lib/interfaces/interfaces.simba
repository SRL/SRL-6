(*
Interfaces
==========

The interfaces file stores any global interface functions, that are shared by
all TRSInterfaces.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/interfaces.simba>`_.

*)

{$f-}

(*
Consts, Types, Vars
~~~~~~~~~~~~~~~~~~~

The following constants, types and variables are used throughout the lodestoneScreen methods.

**const Interface IDs**

The following are integer constants that represent the ID of each global interface.
Note: not all of the gametab IDs are currently in use.

  GameTabs:
    * ID_INTERFACE_GAMETABS
    * ID_INTERFACE_TAB_BACKPACK
    * ID_INTERFACE_TAB_MELEE
    * ID_INTERFACE_TAB_MAGIC
    * ID_INTERFACE_TAB_RANGED
    * ID_INTERFACE_TAB_DEFENSIVE
    * ID_INTERFACE_TAB_STATS
    * ID_INTERFACE_TAB_EQUIPMENT
    * ID_INTERFACE_TAB_PRAYER
    * ID_INTERFACE_TAB_ABILITY_BOOK
    * ID_INTERFACE_TAB_FRIENDS
    * ID_INTERFACE_TAB_FRIENDS_CHAT
    * ID_INTERFACE_TAB_CLAN_CHAT
    * ID_INTERFACE_TAB_OPTIONS
    * ID_INTERFACE_TAB_EMOTES
    * ID_INTERFACE_TAB_MUSIC
    * ID_INTERFACE_TAB_NOTES

  Logged In:
    * ID_INTERFACE_ACTION_BAR
    * ID_INTERFACE_CHAT_BOX
    * ID_INTERFACE_MINIMAP
    * ID_INTERFACE_MAINSCREEN
    * ID_INTERFACE_BANKSCREEN
    * ID_INTERFACE_OPTIONS
    * ID_INTERFACE_CONVERSATION_BOX
    * ID_INTERFACE_PINSCREEN
    * ID_INTERFACE_PRODUCTION
    * ID_INTERFACE_LODESTONE
    * ID_INTERFACE_TOOL
    * ID_INTERFACE_PROGRESS
    * ID_INTERFACE_DEPOSITBOX
    * ID_INTERFACE_POWERSSCREEN
    * ID_INTERFACE_COLLECTBOX
    * ID_INTERFACE_GRANDEXCHANGE
    * ID_INTERFACE_HEROSCREEN
    * ID_INTERFACE_BEASTOFBURDEN
    * ID_INTERFACE_LOOTSCREEN
    * ID_INTERFACE_TARGETINFO
    * ID_INTERFACE_TRADESCREEN
    * ID_INTERFACE_METRICS

  Logged Out:
    * ID_INTERFACE_LOBBY
    * ID_INTERFACE_LOBBY_WORLDS

*)
const
  // gametabs
  ID_INTERFACE_GAMETABS         = 0;
  ID_INTERFACE_TAB_BACKPACK     = 1;
  ID_INTERFACE_TAB_MELEE        = 2;
  ID_INTERFACE_TAB_MAGIC        = 3;
  ID_INTERFACE_TAB_RANGED       = 4;
  ID_INTERFACE_TAB_DEFENSIVE    = 5;
  ID_INTERFACE_TAB_STATS        = 6;
  ID_INTERFACE_TAB_EQUIPMENT    = 7;
  ID_INTERFACE_TAB_PRAYER       = 8;
  ID_INTERFACE_TAB_ABILITY_BOOK = 9;
  ID_INTERFACE_TAB_FRIENDS      = 10;
  ID_INTERFACE_TAB_FRIENDS_CHAT = 11;
  ID_INTERFACE_TAB_CLAN_CHAT    = 12;
  ID_INTERFACE_TAB_OPTIONS      = 13;
  ID_INTERFACE_TAB_EMOTES       = 14;
  ID_INTERFACE_TAB_MUSIC        = 15;
  ID_INTERFACE_TAB_NOTES        = 16;

  // client - logged in
  ID_INTERFACE_ACTION_BAR       = 30;
  ID_INTERFACE_CHAT_BOX         = 31;
  ID_INTERFACE_MINIMAP          = 32;
  ID_INTERFACE_MAINSCREEN       = 33;
  ID_INTERFACE_BANKSCREEN       = 34;
  ID_INTERFACE_OPTIONS          = 35;
  ID_INTERFACE_CONVERSATION_BOX = 36;
  ID_INTERFACE_PINSCREEN        = 37;
  ID_INTERFACE_PRODUCTION       = 38;
  ID_INTERFACE_LODESTONE        = 39;
  ID_INTERFACE_TOOL             = 40;
  ID_INTERFACE_PROGRESS         = 41;
  ID_INTERFACE_DEPOSITBOX       = 42;
  ID_INTERFACE_POWERSSCREEN     = 43;
  ID_INTERFACE_COLLECTBOX       = 44;
  ID_INTERFACE_GRANDEXCHANGE    = 45;
  ID_INTERFACE_HEROSCREEN       = 46;
  ID_INTERFACE_BEASTOFBURDEN    = 47;
  ID_INTERFACE_LOOTSCREEN       = 48;
  ID_INTERFACE_TARGETINFO       = 49;
  ID_INTERFACE_TRADESCREEN      = 50;
  ID_INTERFACE_METRICS          = 51;

  // client - logged out
  ID_INTERFACE_LOBBY            = 52;
  ID_INTERFACE_LOBBY_WORLDS     = 53;

(*
**type TRSInterface**

A record that stores useful information about RS interfaces.

.. code-block:: pascal

    type
      TRSInterface = record
        name: string;
        ID, parentID: integer;
        isStatic: Boolean;
        x, y, w, h: integer;
        x1, y1, x2, y2: integer;
        cx, cy: integer;
      end;

A type that stores the interface generic properties.

*)
type
  TRSInterface = record
    name: string;
    ID, parentID: integer;
    isStatic: Boolean;
    x, y, w, h: integer;
    x1, y1, x2, y2: integer;
    cx, cy: integer;
  end;


(*
TRSInterface methods
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following methods should be called through the respective interface variables.
For example: bankScreen, mainScreen, actionBar, chatBox.

*)

(*
getBounds
---------

.. code-block:: pascal

    function TRSInterface.getBounds(): TBox;

Returns a TBox of the TRSInterface's bounds.

.. note::

    - by Coh3n
    - Last Updated: 13 September 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      b: TBox;
    begin
      b := mainScreen.getBounds();
    end;
*)
function TRSInterface.getBounds(): TBox;
begin
  result := intToBox(self.x1, self.y1, self.x2, self.y2);
end;

(*
setBounds
---------

.. code-block:: pascal

    procedure TRSInterface.getBounds(newBounds: TBox);

Sets the TRSInterface's bounds, width, height, and center point.

.. note::

    - by Coh3n
    - Last Updated: 13 September 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      b: TBox;
    begin
      b := intToBox(10, 100, 10, 100);
      mainScreen.setBounds(b);
    end;
*)
procedure TRSInterface.setBounds(newBounds: TBox);
begin
  self.x := newBounds.x1;
  self.y := newBounds.y1;
  self.w := newBounds.x2 - newBounds.x1 +1;
  self.h := newBounds.y2 - newBounds.y1 +1;

  self.x1 := newBounds.x1;
  self.y1 := newBounds.y1;
  self.x2 := newBounds.x2;
  self.y2 := newBounds.y2;

  self.cx := middleBox(newBounds).x;
  self.cy := middleBox(newBounds).y;
end;

(*
getCenterPoint
--------------

.. code-block:: pascal

    function TRSInterface.getCenterPoint(): TPoint;

Returns the center point of the TRSInterface.

.. note::

    - by Coh3n
    - Last Updated: 21 May 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      p: TPoint;
    begin
      p := mainScreen.getCenterPoint();
      mouse(p, MOUSE_MOVE);
    end;
*)
function TRSInterface.getCenterPoint(): TPoint;
begin
  result := self.getBounds().getMiddle();
end;

{$f+}
