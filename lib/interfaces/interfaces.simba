(*
Interfaces
==========

The interfaces file stores any global interface functions, including TRSInterface
and all its functions.  All interface files should import this file.

*)

{$include_once ../core/debug.simba}
{$include_once ../core/mouse.simba}

{$f-}

(*
const IDs
~~~~~~~~~

Integer constants that represent the ID's of each global interface.
*)
const
  ID_INTERFACE_TAB_INVENTORY = 0;
  ID_INTERFACE_TAB_LOGOUT    = 1;
  ID_INTERFACE_LOBBY         = 2;
  ID_INTERFACE_MAINSCREEN    = 3;

(*
type TRSInterface
~~~~~~~~~~~~~~~~~

A record that stores useful information about RS interfaces.
*)
type
  TRSInterface = record
    name: string;
    ID, parentID: integer;
    static: boolean;
    x, y, w, h: integer;
  end;

(*
TRSInterface.getBounds
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.getBounds(): TBox;

Returns a TBox of the TRSInterface.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    b := mainscreen.getBounds();
*)
function TRSInterface.getBounds(): TBox;
begin
  result := intToBox(x, y, (x + w), (y + h));
end;

(*
TRSInterface.getCenterPoint
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.getCenterPoint(): TPoint;

Returns the center point of the TRSInterface.

.. note::

    by Coh3n
    Last Updated: Mar. 21, 2013 by Coh3n

Example:

.. code-block:: pascal

    mP := tabInventory.getCenterPoint();
*)
function TRSInterface.getCenterPoint(): TPoint;
begin
  result.x := (self.x + (self.w div 2));
  result.y := (self.y + (self.h div 2));
end;

(*
TRSInterface.drag
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.drag(dest: TPoint): boolean;

Drags the TRSInterface to a destination point (dest) if the interface's static
attribute is set to false.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    squealOfFortune.drag(point(0, 0));
*)
function TRSInterface.drag(dest: TPoint): boolean;
var
  mouseDownPoint, currMousePos, diff, dragTo: TPoint;
begin
  if (self.static = true) then
  begin
    printToDebug('Interface '+self.name+' is static; cannot be dragged');
    exit(false);
  end;

  // point to start the drag
  mouseDownPoint := point(self.x + random(self.w), self.y + random(self.y)); // point to start the drag
  mouse(mouseDownPoint);

  // calculate where to drag to and from
  getMousePos(currMousePos.x, currMousePos.y);
  diff.x := (self.x - dest.x);
  diff.y := (self.y - dest.y);
  dragTo.x := (currMousePos.x - diff.x);
  dragTo.y := (currMousePos.y - diff.y);

  // drag the mouse
  dragMouse(dragTo);
  self.x := dest.x;
  self.y := dest.y;
  result = true;
end;
