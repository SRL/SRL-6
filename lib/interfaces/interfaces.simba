(*
Interfaces
==========

The interfaces file stores any global interface functions, including TRSInterface
and all its functions.  All interface files should import this file.

*)

{$include_once ../core/debug.simba}
{$include_once ../core/mouse.simba}
{$include_once ../core/text.simba}

{$f-}

(*
const IDs
~~~~~~~~~

Integer constants that represent the ID's of each global interface.
*)
const 
  // gametabs
  ID_INTERFACE_TAB_INVENTORY    = 0;
  ID_INTERFACE_TAB_LOGOUT       = 1;
  ID_INTERFACE_TAB_COMBAT       = 2;
  ID_INTERFACE_TAB_NOTICE       = 3;
  ID_INTERFACE_TAB_STATS        = 4;
  ID_INTERFACE_TAB_ACADEMY      = 5;
  ID_INTERFACE_TAB_EQUIPMENT    = 6;
  ID_INTERFACE_TAB_PRAYER       = 7;
  ID_INTERFACE_TAB_ABILITY_BOOK = 8;
  ID_INTERFACE_TAB_EXTRAS       = 9;
  ID_INTERFACE_TAB_FRIENDS_LIST = 10;
  ID_INTERFACE_TAB_FRIENDS_CHAT = 11;
  ID_INTERFACE_TAB_CLAN_CHAT    = 12;
  ID_INTERFACE_TAB_OPTIONS      = 13;
  ID_INTERFACE_TAB_EMOTES       = 14;
  ID_INTERFACE_TAB_MUSIC        = 15;
  ID_INTERFACE_TAB_NOTES        = 16;

  // client - logged in
  ID_INTERFACE_CHAT_BOX   = 30;
  ID_INTERFACE_ACTION_BAR = 31;
  ID_INTERFACE_MAINSCREEN = 32;
  ID_INTERFACE_MINIMAP    = 33;
  ID_INTERFACE_BANKSCREEN = 34;

  // client - logged out
  ID_INTERFACE_LOBBY = 40;

(*
type TRSInterface
~~~~~~~~~~~~~~~~~

A record that stores useful information about RS interfaces.
*)
type
  TRSInterface = record
    name: string;
    ID, parentID: integer;
    static: boolean;
    x1, y1, x2, y2: integer;
    cx, cy: integer;
    w, h: integer;
  end;

(*
TRSInterface.getBounds
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.getBounds(): TBox;

Returns a TBox of the TRSInterface.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    b := mainscreen.getBounds();
*)
function TRSInterface.getBounds(): TBox;
begin
  result := intToBox(self.x1, self.y1, self.x2, self.y2);
end;

(*
TRSInterface.setBounds
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSInterface.getBounds(newBounds: TBox);

Sets the bounds, width, height, and center point of the TRSInterface.

.. note::

    by Coh3n
    Last Updated: 16 May 2013 by Coh3n

Example:

.. code-block:: pascal

    mainscreen.setBounds(newBox);
*)
procedure TRSInterface.setBounds(newBounds: TBox);
begin
  self.x1 := newBounds.x1;
  self.y1 := newBounds.y1;
  self.x2 := newBounds.x2;
  self.y2 := newBounds.y2;

  self.w := (newBounds.x2 - newBounds.x1);
  self.h := (newBounds.y2 - newBounds.y1);

  self.cx := self.getCenterPoint().x;
  self.cy := self.getCenterPoint().y;
end;

(*
TRSInterface.getCenterPoint
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.getCenterPoint(): TPoint;

Returns the center point of the TRSInterface.

.. note::

    by Coh3n
    Last Updated: 21 May 2013 by Coh3n

Example:

.. code-block:: pascal

    mP := tabInventory.getCenterPoint();
*)
function TRSInterface.getCenterPoint(): TPoint;
begin
  result := self.getBounds().getMidPoint();
end;

(*
TRSInterface.drag
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.drag(dest: TPoint): boolean;

Drags the TRSInterface to a destination point (dest) if the interface's static
attribute is set to false.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    squealOfFortune.drag(point(0, 0));
*)
function TRSInterface.drag(dest: TPoint): boolean;
var
  mouseDownPoint, currMousePos, diff, dragTo: TPoint;
begin
  if (self.static = true) then
  begin
    print('Interface '+self.name+' is static; cannot be dragged');
    exit(false);
  end;

  // point to start the drag
  mouseDownPoint := point(self.x1 + random(self.w), self.y1 + random(self.h)); // point to start the drag
  mouse(mouseDownPoint);

  // calculate where to drag to and from
  getMousePos(currMousePos.x, currMousePos.y);
  diff.x := (self.x1 - dest.x);
  diff.y := (self.y1 - dest.y);
  dragTo.x := (currMousePos.x - diff.x);
  dragTo.y := (currMousePos.y - diff.y);

  // drag the mouse & reset attributes
  dragMouse(dragTo);
  self.setBounds(intToBox(dest.x, dest.y, (self.x1 + self.w), (self.y1 + self.h)));
  result = true;
end;
